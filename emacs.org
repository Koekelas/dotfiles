:PROPERTIES:
:header-args: :mkdirp yes
:header-args:emacs-lisp: :tangle stow/emacs/.config/emacs/init.el :lexical yes
:END:
#+TITLE: Emacs

* Header
Enable lexical binding.

#+BEGIN_SRC emacs-lisp
  ;;; init.el --- Nicolas' Emacs configuration -*- lexical-binding: t; -*-

  ;; Copyright (C) 2017-2023 Nicolas De Jaeghere

  ;; Author: Nicolas De Jaeghere <nicolas@dejaeghe.re>
  ;; URL: <https://github.com/Koekelas/dotfiles>

  ;; This file is not part of GNU Emacs.

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; This file contains Nicolas' Emacs configuration.

  ;;; Code:
#+END_SRC

Require libraries.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'subr-x))
  (require 'seq)
  (require 'xdg)
#+END_SRC

* Bootstrap

** nsm - Network security manager
On a fresh installation, nsm is needed to download [[*straight - Package manager][straight]], which is
needed to install [[*no-littering - Normalize configuration and data file names][no-littering]]. Replicate no-littering configuration
for nsm.

#+BEGIN_SRC emacs-lisp
  (require 'nsm)

  (setq nsm-settings-file
        (expand-file-name "var/nsm-settings.el" user-emacs-directory))
  (make-directory (file-name-directory nsm-settings-file) 'parents)
  #+END_SRC

Tighten network security.

  #+BEGIN_SRC emacs-lisp
  (setq network-security-level 'high)
#+END_SRC

** straight - Package manager
[[https://github.com/radian-software/straight.el][straight (GitHub)]]

Disable builtin package manager.

#+BEGIN_SRC emacs-lisp :tangle stow/emacs/.config/emacs/early-init.el
  (setq package-enable-at-startup nil)
#+END_SRC

Straight can install any commit from any Git repository, it isn't
limited to what's available in a package archive. Configure straight.

#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)              ; Must be a dynamic variable

  (setq straight-check-for-modifications '(check-on-save find-when-checking))

  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el"
                           user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'no-message))
#+END_SRC

** Embedded packages
When some customizations got large, I wondered, what would creating a
package from one or more code blocks entail? Not much!

First, output the code blocks to one or more files. This can be done
by setting the =:tangle= header argument, see [[info:org#Extracting Source Code][Extracting Source Code
(info)]] and [[info:org#Using Header Arguments][Using Header Arguments (info)]]. The directory containing the
files must be a directory in =stow/emacs/.config/emacs/lisp/=.

Next, generate autoloads from the files. This can be done during
tangle, see [[*Babel][Babel]], specifically the function ~koek-org/gen-autoloads~
and the variable ~org-babel-post-tangle-hook~. The base name of the file
containing the entry points must equal the name of the directory.

Last, add the directory containing the files to the load path and load
the autoloads. This can be done by using the macro ~koek-pkg/register~
or the [[*use-package - Package configuration macro][use-package]] keyword ~:koek~.

#+BEGIN_SRC emacs-lisp
  (defmacro koek-pkg/register (package)
    "Register embedded package.
  PACKAGE is a symbol, the name of the package."
    (let ((package-name (symbol-name package)))
      `(progn
         ;; Add the package to the load path during compilation so the
         ;; compiler can load the package (the compiler executes top
         ;; level require statements), expand its macros and warn about
         ;; undefined symbols
         (eval-and-compile
           (add-to-list 'load-path
                        ,(thread-last user-emacs-directory
                           (expand-file-name "lisp/")
                           (expand-file-name package-name))))
         (load ,(concat package-name "-autoloads.el")
               'no-error 'no-message 'no-suffix))))
#+END_SRC

For examples, see [[*prepcast - Prepare for screencasting][prepcast]] and other code blocks which output to
directories in =stow/emacs/.config/emacs/lisp/=.

** no-littering - Normalize configuration and data file names
[[https://github.com/emacscollective/no-littering][no-littering (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'no-littering)
  (require 'no-littering)
#+END_SRC

** use-package - Package configuration macro
[[https://github.com/jwiegley/use-package][use-package (GitHub)]]

Install use-package.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'delight)         ; Optional dependency
  (straight-use-package 'use-package)
#+END_SRC

The keyword ~:koek~ registers [[*Embedded packages][embedded packages]]. It's a predicate
keyword, i.e., it accepts as argument =t=, =nil= or nothing.

#+BEGIN_SRC emacs-lisp
  (require 'use-package)

  (defun koek-up/process-koek (package _keyword arg rem state)
    "Process :koek keyword.
  PACKAGE is a symbol, the name of the package.  ARG is a symbol,
  the argument of the keyword, either t or nil.  REM is a plist,
  the remaining keywords.  STATE is a plist, the state of the
  keywords.  For more information, see
  `use-package-process-keywords'."
    (use-package-concat (when arg
                          `((koek-pkg/register ,package)))
                        (use-package-process-keywords package rem state)))

  (defalias 'use-package-normalize/:koek #'use-package-normalize-predicate)
  (defalias 'use-package-handler/:koek #'koek-up/process-koek)

  (let ((n (seq-position use-package-keywords :load-path)))
    (setq use-package-keywords
          (append (seq-subseq use-package-keywords 0 n)
                  '(:koek)
                  (seq-subseq use-package-keywords n))))
#+END_SRC

** Latest org
For org configuration, see [[*Org][Org]].

Installing latest org after loading builtin org breaks org. Install
latest org and its documentation before loading org.

#+BEGIN_SRC emacs-lisp
  (straight-use-package
   `(org
     :pre-build
     ,(list (if (eq system-type 'berkeley-unix) "gmake" "make")
            "autoloads" "info"
            (concat "EMACS=" invocation-directory invocation-name))
     :build (:not autoloads info)))
#+END_SRC

* Common

** koek-subr - Common subroutines
#+BEGIN_SRC emacs-lisp
  (koek-pkg/register koek-subr)
  (require 'koek-subr)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle stow/emacs/.config/emacs/lisp/koek-subr/koek-subr.el
  ;;; koek-subr.el --- Common subroutines -*- lexical-binding: t; -*-

  ;; Copyright (C) 2021-2023 Nicolas De Jaeghere

  ;; Author: Nicolas De Jaeghere <nicolas@dejaeghe.re>
  ;; Keywords: lisp
  ;; URL: <https://github.com/Koekelas/dotfiles>

  ;; This file is not part of GNU Emacs.

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; This package provides common subroutines for use with Nicolas'
  ;; Emacs configuration.

  ;;; Code:

  (eval-when-compile
    (require 'subr-x))
  (require 'seq)

  ;;; Configuration variables

  (defvar koek-subr/roman-numerals
    '((1000 . "M")
      ( 900 . "CM")
      ( 500 . "D")
      ( 400 . "CD")
      ( 100 . "C")
      (  90 . "XC")
      (  50 . "L")
      (  40 . "XL")
      (  10 . "X")
      (   9 . "IX")
      (   5 . "V")
      (   4 . "IV")
      (   1 . "I"))
    "Alist of Arabic numeral to Roman numeral pairs.
  Pairs are sorted from largest to smallest.")

  (defvar koek-subr/chevrons
    (rx (any "<" ">" "\N{LEFT ANGLE BRACKET}" "\N{RIGHT ANGLE BRACKET}"
             "\N{SINGLE LEFT-POINTING ANGLE QUOTATION MARK}"
             "\N{SINGLE RIGHT-POINTING ANGLE QUOTATION MARK}"
             "\N{LEFT-POINTING DOUBLE ANGLE QUOTATION MARK}"
             "\N{RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK}"))
    "Regular expression matching chevrons.")

  (defvar koek-subr/down-words
    (rx word-start
        (or "a" "an" "and" "as" "at" "but" "by" "en" "for" "if" "in" "nor" "of"
            "on" "or" "per" "the" "to" "v" "v." "via" "vs" "vs.")
        word-end)
    "Regular expression matching words down cased in title case.")

  ;;; Number subroutines

  (defun koek-subr/arabic-to-roman (n &optional roman-numerals)
    "Convert Arabic number N to a Roman number.
  N is an integer greater than zero.  ROMAN-NUMERALS is used
  internally."
    (unless roman-numerals
      (setq roman-numerals koek-subr/roman-numerals))
    (when (> n 0)
      (pcase-let ((`(,arabic . ,roman) (car roman-numerals)))
        (if (>= n arabic)
            (concat roman (koek-subr/arabic-to-roman (- n arabic) roman-numerals))
          (koek-subr/arabic-to-roman n (cdr roman-numerals))))))

  ;;; String subroutines

  (defun koek-subr/strip-chevrons (s)
    "Strip chevrons from beginning and ending of string S.
  S is a string, the string to strip chevrons from."
    (let ((chevrons (rx (one-or-more (regexp koek-subr/chevrons)))))
      (string-trim s chevrons chevrons)))

  ;; The algorithm is from <https://github.com/gouch/to-title-case>
  (defun koek-subr/title-case (title)
    "Title case TITLE.
  TITLE is a string, the title to title case."
    (let* ((pieces (koek-subr/cut title (rx (or (any ":-") (one-or-more blank)))))
           (next-window (koek-subr/make-sliding-window pieces 5 'center))
           (window nil)
           (parts nil))
      (while (setq window (funcall next-window))
        (pcase-let ((`(,pprev ,prev ,cur ,next ,nnext) window))
          (cond
           ;; ---------- 1. Down word? Down case current? ----------
           ((and
             ;;   I. Down word?
             (let ((case-fold-search t))  ; Dynamic variable
               (string-match koek-subr/down-words cur))
             ;;  II. Not begin/end of title?
             prev next
             ;; III. Not end of main title/begin of sub title?
             (not (string-equal next ":")) (not (string-equal (or pprev "") ":"))
             ;;  IV. Not begin/end of hyphenated word?
             (or (not (string-equal next "-"))
                 (and (string-equal prev "-") (string-equal next "-"))))
            (push (downcase cur) parts))
           ;; ---------- 2. Deliberately cased? Keep case current? ----------
           ((or
             ;;   I. Up case other than first character?
             (let ((case-fold-search nil)) ; Dynamic Variable
               (string-match (rx not-newline upper) cur))
             ;;  II. URI scheme?
             (and (string-equal (or next "") ":")
                  (not (string-blank-p (or nnext ""))))
             ;; III. URI host?
             (string-match (rx not-newline "." not-newline) cur))
            (push cur parts))
           ;; ---------- 3. Default, capital case current ----------
           (t
            (push (capitalize cur) parts)))))
      (string-join (reverse parts))))

  (defun koek-subr/normalize-title (title)
    "Join lines, collapse whitespace and title case TITLE.
  TITLE is a string, the title to normalize."
    (let* ((titles
            (split-string
             (replace-regexp-in-string (rx (one-or-more blank)) " " title)
             (rx (one-or-more "\n")) 'omit-nulls " "))
           (main (car titles))
           (subs (cdr titles))
           (normalized
            (concat main (when subs (concat ": " (string-join subs " "))))))
      (koek-subr/title-case normalized)))

  (defun koek-subr/elide (s length)
    "Elide string S to LENGTH.
  S is a string, the string to elide.  LENGTH is an integer, the
  maximum length of S including the elide character."
    (truncate-string-to-width s length nil nil t))

  (defun koek-subr/cut (s where)
    "Cut string S into pieces at every WHERE.
  S is a string, the string to cut.  WHERE is a regular expression,
  where to cut S.  When WHERE matches the empty string (e.g. word
  boundary), cut S at match, else, cut S before and after match.
  When WHERE specifies capture groups, cut S at first matching
  capture group.

  Unlike `split-string', calling `string-join' on result reproduces
  S, i.e., separators are part of result."
    (let* ((length (length s))
           (start 0)
           (poss (list start)))
      (while (and (< start length) (string-match where s start))
        (pcase-let
            ((`(,begin ,end)
              (let ((matches (seq-filter #'car (seq-partition (match-data) 2))))
                (or (cadr matches) (car matches)))))
          (unless (= begin (car poss))
            (push begin poss))
          (unless (= end begin)
            (push end poss))
          (setq start (if (= start end) (1+ end) end))))
      (unless (= length (car poss))
        (push length poss))
      (setq poss (reverse poss))
      (seq-mapn (apply-partially #'substring s) poss (cdr poss))))

  ;;; List subroutines

  (defun koek-subr/make-sliding-window (xs width &optional align)
    "Return generator function to slide over XS.
  Slide over list XS, from begin to end, element by element,
  generating sublists/windows of next WIDTH elements.  Calling
  generator returns next window or, when end is reached, nil.

  XS is a list, the elements to slide over.  WIDTH is an integer,
  the number of elements per window.  Optional ALIGN is a symbol,
  how to align the elements in the window, either nil (don't pad
  XS), center (pad XS so first element is in center of first
  window, last element in center last window) or border (pad XS so
  first element is at end of first window, last element at begin
  last window) and defaults to nil.  For center, WIDTH must be
  odd."
    (let* ((n-pad (pcase align
                    ('center (/ (1- width) 2))
                    ('border (1- width))
                    (_align  0)))
           (rem (append (make-list n-pad nil) xs (make-list n-pad nil)))
           (n-rem (length rem)))
      (lambda ()
        (when (>= n-rem width)
          (prog1 (seq-take rem width)
            (setq n-rem (1- n-rem))
            (setq rem (cdr rem)))))))

  ;;; Macro subroutines

  (defun koek-subr/intern (&rest parts)
    (let ((names (mapcar (apply-partially #'format "%s") parts)))
      (intern (apply #'concat names))))

  ;;; Buffer subroutines

  (defun koek-subr/construct-earmuffed-name (&rest parts)
    (let* ((names (thread-last parts
                    (remq nil)
                    (mapcar (apply-partially #'format "%s"))
                    (remove "")))
           (main (car names))
           (subs (cdr names)))
      (concat "*" main (when subs (concat ": " (string-join subs " "))) "*")))

  ;; project
  (defun koek-subr/reset-default-directory ()
    (unless (buffer-file-name)
      (setq default-directory "~/")))

  ;;; File name subroutines

  (defun koek-subr/lock-file-p (file-name)
    "Return whether FILE-NAME is a lock file."
    (string-prefix-p ".#" (file-name-nondirectory file-name)))

  (defun koek-subr/get-child-dirs (file-name &optional full)
    "Return child directories in directory FILE-NAME.
  When optional FULL is truthy, return absolute file names, else,
  return relative file names."
    (thread-last (directory-files-and-attributes file-name full)
      (seq-filter (pcase-lambda (`(,file-name ,type))
                    (let ((name (file-name-nondirectory file-name)))
                      (and (eq type t)    ; Directory
                           (string-match directory-files-no-dot-files-regexp
                                         name)))))
      (mapcar (pcase-lambda (`(,file-name))
                (file-name-as-directory file-name)))))

  ;;; URI subroutines

  (defun koek-subr/urip (s)
    "Return whether S is a URI.
  S is a string, the string to interrogate."
    (when s
      (string-match
       (rx line-start alpha (zero-or-more (any alnum "+-.")) ":") s)))

  ;;; Completion subroutines

  (defmacro koek-subr/enrich (candidates &rest metadata-pairs)
    "Enrich CANDIDATES with metadata."
    (declare (indent 1))
    (let ((candidates-sym (gensym))
          (metadata-sym (gensym)))
      `(let ((,candidates-sym ,candidates)
             (,metadata-sym
              (cons 'metadata
                    (list ,@(mapcar (pcase-lambda (`(,key ,value))
                                      `(cons ',key ,value))
                                    (seq-partition metadata-pairs 2))))))
         (lambda (input pred action)
           (pcase action
             ('metadata ,metadata-sym)
             (_action
              (complete-with-action action ,candidates-sym input pred)))))))

  (provide 'koek-subr)

  ;;; koek-subr.el ends here
#+END_SRC

* System

** Garbage collector
Increasing cons threshold makes garbage collection more efficient and
decreasing it makes garbage collection less noticeable, i.e., a cons
threshold x freezes Emacs longer than half x collected one time but
shorter than half x collected two times. Increase cons threshold
during initialization. Reduces startup time.

#+BEGIN_SRC emacs-lisp :tangle stow/emacs/.config/emacs/early-init.el
  (setq gc-cons-threshold (* (expt 1024 2) 128)) ; In bytes
#+END_SRC

When initialized, [[*gcmh - Collect garbage when idle][gcmh]] kicks in.

*** gcmh - Collect garbage when idle
[[https://gitlab.com/koral/gcmh][gcmh (GitLab)]]

#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :straight t
    :hook (after-init . gcmh-mode)
    :config
    (setq gcmh-high-cons-threshold (* (expt 1024 2) 16)) ; In bytes
    :delight)
#+END_SRC

** exwm - X window manager
[[https://github.com/ch11ng/exwm][exwm (GitHub)]]

The idea for acquiring the URL of Firefox buffers is from [[https://www.reddit.com/r/emacs/comments/mb8u1m/weekly_tipstricketc_thread/gs55kqw/][Reddit user
b3n (Reddit)]]. For the Firefox add-on, see [[file:dotfiles.org::*KeePass Helper][KeePass Helper]].

#+BEGIN_SRC emacs-lisp
  ;; Prevent exwm from querying whether to replace window manager after
  ;; installation
  (setq exwm-replace nil)

  ;; One session type mustn't pollute (e.g. bind keys) other session
  ;; types. use-package loads the package under configuration during
  ;; compilation, i.e., when Emacs evaluated a use-package statement for
  ;; the package, it executes the statement (reality is more nuanced but
  ;; the nuances aren't relevant to the discussion). When (i) in a non
  ;; EXWM session, (ii) Emacs loaded this configuration and (iii) Emacs
  ;; is compiling this configuration, the :when keyword prevents the
  ;; exwm statements from polluting the non EXWM session. Deferring is
  ;; insufficient.

  (use-package exwm
    :straight t
    :when (koek-wm/exwm-session-p)
    :defer t
    :preface
    (defvar koek-wm/session
      (split-string (getenv "XDG_CURRENT_DESKTOP") path-separator 'omit-nulls)
      "List of names for current session.")

    (defun koek-wm/exwm-session-p ()
      "Return whether current session is an EXWM session."
      (and (length= koek-wm/session 1) (member "EXWM" koek-wm/session)))

    (defun koek-wm/get-process-args (id)
      "Return arguments of process id ID.
  ID is an integer, the process id of the process."
      (when-let ((args (alist-get 'args (process-attributes id))))
        (let ((normalized
               (thread-last args
                 (string-replace "\\ " "\N{NO-BREAK SPACE}")
                 (replace-regexp-in-string (rx (one-or-more " ")) "\N{NULL}")
                 (string-replace "\N{NO-BREAK SPACE}" " "))))
          (split-string normalized "\N{NULL}"))))

    (defun koek-wm/get-process-ids (name)
      "Return process ids of process NAME.
  NAME is a string, the name of the process."
      (seq-filter (lambda (id)
                    (when-let ((args (koek-wm/get-process-args id)))
                      (let ((nm (thread-first args
                                  car
                                  (split-string "/")
                                  last
                                  car)))
                        (string-equal nm name))))
       (list-system-processes)))

    (defun koek-wm/set-xsettingsd-preset (file-name)
      (when-let ((id (car (koek-wm/get-process-ids "xsettingsd"))))
        (let ((config-file
               (expand-file-name "xsettingsd/xsettingsd" (xdg-config-home))))
          ;; Third argument truthy overwrites existing link, docstring
          ;; only mentions not signaling an error
          (make-symbolic-link file-name config-file 'overwrite)
          (signal-process id 'SIGHUP))))

    (defun koek-wm/update-xsettingsd-preset ()
      (let* ((preset (if (koek-thm/darkp) "dark" "light"))
             (file-name (thread-last (xdg-data-home)
                          (expand-file-name "xsettingsd/presets/")
                          (expand-file-name preset))))
        (koek-wm/set-xsettingsd-preset file-name)))

    (defun koek-wm/set-gsetting (schema key value)
      (call-process "gsettings" nil 0 nil "set" schema key value))

    (defun koek-wm/set-gtk-theme-preference (dark)
      (koek-wm/set-gsetting "org.gnome.desktop.interface" "color-scheme"
                            (if dark "prefer-dark" "default")))

    (defun koek-wm/update-gtk-theme-preference ()
      (koek-wm/set-gtk-theme-preference (koek-thm/darkp)))

    (defun koek-wm/power-off ()
      "Power off system."
      (call-process "systemctl" nil 0 nil "poweroff"))

    (defun koek-wm/reboot ()
      "Reboot system."
      (call-process "systemctl" nil 0 nil "reboot"))

    ;; make-process
    (defun koek-wm/kill-power-off (&optional arg)
      "Kill Emacs and power off system.
  With `\\[universal-argument]' prefix argument ARG, reboot
  system."
      (interactive "P")
      (let ((kill-emacs-hook              ; Dynamic variable
             (append kill-emacs-hook
                     (list (if arg #'koek-wm/reboot #'koek-wm/power-off)))))
        (save-buffers-kill-terminal)))

    (defun koek-wm/suspend ()
      "Suspend system."
      (interactive)
      (call-process "systemctl" nil 0 nil "suspend"))
    :init
    (bind-keys
     ("C-c z p" . koek-wm/kill-power-off)
     ("C-c z z" . koek-wm/suspend))
    :config
    (add-hook 'koek-thm/enable-hook #'koek-wm/update-xsettingsd-preset)
    (add-hook 'koek-thm/enable-hook #'koek-wm/update-gtk-theme-preference))

  (use-package exwm-core
    :when (koek-wm/exwm-session-p)
    :defer t
    :preface
    ;; minor mode
    (defun koek-wm/visit-eww (url)
      (interactive
       (let* ((page (if (koek-wm/classp "firefox")
                        (koek-wm/get-firefox-page)
                      (user-error "Not in a Firefox buffer")))
              (url (or (plist-get page :url) (user-error "Not visiting a URL"))))
         (list url)))
      (let ((buffer (generate-new-buffer
                     (koek-subr/construct-earmuffed-name "eww" url))))
        (with-current-buffer buffer
          (eww-mode)
          (eww url))
        (pop-to-buffer buffer)))

    (defun koek-wm/view-source (url &optional interactive)
      (interactive
       (let* ((page (if (koek-wm/classp "firefox")
                        (koek-wm/get-firefox-page)
                      (user-error "Not in a Firefox buffer")))
              (url (or (plist-get page :url) (user-error "Not visiting a URL"))))
         (list url 'interactive)))
      (let ((callback
             (lambda (status)
               (when (alist-get :error status)
                 (error "Retrieve `%s' failed" url))
               (let ((response (current-buffer))
                     (start (progn
                              (goto-char (point-min))
                              (search-forward "\n\n")))
                     (buffer
                      (generate-new-buffer
                       (koek-subr/construct-earmuffed-name "view-src" url))))
                 (with-current-buffer buffer
                   (insert-buffer-substring response start)
                   (restore-buffer-modified-p nil)
                   (set-auto-mode)
                   (goto-char (point-min)))
                 (kill-buffer response)
                 (pop-to-buffer buffer)
                 (when interactive
                   (message "Retrieving `%s'...done" url))))))
        (when interactive
          (message "Retrieving `%s'..." url))
        (url-retrieve url callback nil 'silent)))
    :config
    (bind-keys
     :map exwm-mode-map
     ("s-e" . koek-wm/visit-eww)
     ("s-c" . koek-wm/view-source))       ; [C]ode

    (add-hook 'exwm-mode-hook #'koek-subr/reset-default-directory))

  (use-package exwm-input
    :when (koek-wm/exwm-session-p)
    :defer t
    :preface
    ;; The S modifier isn't recognized on the left. DEL isn't recognized
    ;; but <backspace> is.
    (defvar koek-wm/base-simulation-keys
      '(("C-f" . "<right>")
        ("C-b" . "<left>")
        ("C-n" . "<down>")
        ("C-p" . "<up>")
        ("M-f" . "C-<right>")
        ("M-b" . "C-<left>")
        ("C-e" . "<end>")
        ("C-a" . "<home>")
        ("C-v" . "<next>")
        ("M-v" . "<prior>")
        ("M->" . "C-<end>")
        ("M-<" . "C-<home>")
        ("C-s" . "C-f")
        ("C-§" . "C-f")
        ("C-d" . "<delete>")
        ("M-d" . "C-<delete>")
        ("M-<backspace>" . "C-<backspace>")
        ("C-k" . "S-<end> <backspace>")
        ("M-@" . "C-S-<right>")
        ("M-h" . "C-a")
        ("M-w" . "C-c")
        ("C-w" . "C-x")
        ("C-y" . "C-v")
        ("C-/" . "C-z")
        ("M-/" . "C-y"))
      "Alist of Emacs keybinding to non Emacs keybinding pairs.
  Keybinding is a string, see `edmacro-mode'.")

    (defun koek-wm/rehto-window (&optional arg)
      (interactive "p")
      (other-window (- (or arg 1))))
    :config
    ;; Keybindings in exwm and non exwm buffers, even in char mode,
    ;; i.e., keybindings mustn't conflict with non Emacs keybindings
    ;; (e.g. copy, cut and paste). Keybindings associated with desktop
    ;; environments (e.g. maximize window, close window and switch
    ;; between windows) meet these requirements.
    (let ((keys '(("s-z" . repeat)
                  ("s-0" . koek-wm/switch-workspace-0)
                  ("s-1" . koek-wm/switch-workspace-1)
                  ("s-2" . koek-wm/switch-workspace-2)
                  ("s-3" . koek-wm/switch-workspace-3)
                  ("s-4" . koek-wm/switch-workspace-4)
                  ("s-5" . koek-wm/switch-workspace-5)
                  ("s-6" . koek-wm/switch-workspace-6)
                  ("s-7" . koek-wm/switch-workspace-7)
                  ("s-8" . koek-wm/switch-workspace-8)
                  ("s-9" . koek-wm/switch-workspace-9)
                  ("s-w" . koek-wm/switch-previous-workspace)
                  ("s-<tab>" . other-window)
                  ("s-<iso-lefttab>" . koek-wm/rehto-window)
                  ("<f11>" . exwm-layout-toggle-fullscreen)
                  ("s-b" . switch-to-buffer)
                  ("s-<backspace>" . previous-buffer)
                  ("s-<delete>" . next-buffer)
                  ("s-q" . bury-buffer)
                  ("s-d" . kill-current-buffer)
                  ("s-x" . koek-xde/launch-app)
                  ("s-C-f" . koek-xde/launch-file-manager)
                  ("s-C-b" . koek-xde/launch-browser)
                  ("s-s" . exwm-input-toggle-keyboard))))
      (setq exwm-input-global-keys
            (mapcar (pcase-lambda (`(,key . ,command))
                      (cons (kbd key) command))
                    keys)))

    ;; Translate Emacs to non Emacs keybindings in line mode
    (setq exwm-input-simulation-keys
          (mapcar (pcase-lambda (`(,from . ,to))
                    (cons (kbd from) (kbd to)))
                  koek-wm/base-simulation-keys)))

  (use-package exwm-workspace
    :when (koek-wm/exwm-session-p)
    :bind
    (("C-c w e" . exwm-workspace-swap)
     ("C-c w k" . exwm-workspace-delete))
    :preface
    (defun koek-wm/get-class (&optional buffer)
      (when (featurep 'exwm-core)
        (buffer-local-value
         'exwm-class-name (get-buffer (or buffer (current-buffer))))))

    (defun koek-wm/like-class-p (a b)
      (pcase-let* ((args (list a b))
                   (`(,class ,ref-class)
                    (if (> (length a) (length b)) (reverse args) args)))
        (let ((case-fold-search t))       ; Dynamic variable
          (string-match (regexp-quote class) ref-class))))

    (defun koek-wm/classp (class &optional buffer)
      ;; `exwm-class-name' is the name of the application while
      ;; `exwm-instance-name' is the name of the instance of the
      ;; application, see
      ;; <https://www.x.org/releases/X11R7.6/doc/xorg-docs/specs/ICCCM/icccm.html#wm_class_property>.
      (when-let ((ref-class (koek-wm/get-class buffer)))
        (koek-wm/like-class-p class ref-class)))

    (defvar koek-wm/app-names
      '(("ardour"                  . ("Ardour"))
        ("blender"                 . ("Blender"))
        ("blueman"                 . ("Bluetooth Manager"))
        ("boxes"                   . ("Boxes"))
        ("displaycal"              . ("DisplayCAL"))
        ("displaycal-3dlut-maker"  . ("3D LUT Maker"))
        ("displaycal-curve-viewer" . ("Curve Viewer"))
        ("displaycal-profile-info" . ("ICC Profile Info"))
        ("displaycal-scripting-client" . ("Scripting Client"))
        ("displaycal-synthprofile" . ("Synthetic ICC"))
        ("displaycal-testchart-editor" . ("Testchart Editor"))
        ("displaycal-vrml-to-x3d-converter" . ("VRML to X3D"))
        ("eid-viewer"              . ("eID Viewer"))
        ("electrum"                . ("Electrum Bitcoin Wallet"))
        ("eog"                     . ("Image Viewer"))
        ("epiphany"                . ("Web"))
        ("evince"                  . ("Document Viewer" "Doc"))
        ("file-roller"             . ("Archive Manager"))
        ("firefox"                 . ("Firefox" "FF"))
        ("fontforge"               . ("FontForge"))
        ("freecad"                 . ("FreeCAD"))
        ("gimp"                    . ("GNU Image Manipulation Program" "GIMP"))
        ("gnome-calculator"        . ("Calculator"))
        ("gnome-connections"       . ("Connections"))
        ("gnome-disks"             . ("Disks"))
        ("gnome-logs"              . ("Logs"))
        ("gnome-screenshot"        . ("Screenshot"))
        ("gnome-system-monitor"    . ("System Monitor"))
        ("gnome-terminal"          . ("Terminal"))
        ("gnome.clocks"            . ("Clocks"))
        ("gnome.maps"              . ("Maps"))
        ("gnome.weather"           . ("Weather"))
        ("gromit-mpx"              . ("Gromit-MPX"))
        ("inkscape"                . ("Inkscape"))
        ("jami"                    . ("Jami"))
        ("keepassxc"               . ("KeePassXC"))
        ("libreoffice-base"        . ("LibreOffice Base" "Base"))
        ("libreoffice-calc"        . ("LibreOffice Calc" "Calc"))
        ("libreoffice-draw"        . ("LibreOffice Draw" "Draw"))
        ("libreoffice-impress"     . ("LibreOffice Impress" "Impress"))
        ("libreoffice-math"        . ("LibreOffice Math" "Math"))
        ("libreoffice-startcenter" . ("LibreOffice"))
        ("libreoffice-writer"      . ("LibreOffice Writer" "Writer"))
        ("lollypop"                . ("Lollypop"))
        ("mpv"                     . ("mpv Media Player" "mpv"))
        ("nautilus"                . ("Files"))
        ("nm-connection-editor"    . ("Advanced Network Configuration"))
        ("obs"                     . ("OBS Studio"))
        ("octave"                  . ("GNU Octave" "Octave"))
        ("openscad"                . ("OpenSCAD"))
        ("pavucontrol"             . ("PulseAudio Volume Control"))
        ("picard"                  . ("MusicBrainz Picard" "Picard"))
        ("pitivi"                  . ("Pitivi"))
        ("processing"              . ("Arduino IDE"))
        ("qt5ct"                   . ("Qt5 Settings"))
        ("qtox"                    . ("qTox"))
        ("scribus"                 . ("Scribus"))
        ("seahorse"                . ("Passwords and Keys"))
        ("simple-scan"             . ("Document Scanner"))
        ("soffice"                 . ("LibreOffice"))
        ("steam"                   . ("Steam"))
        ("vlc"                     . ("VLC Media Player" "VLC"))
        ("wireshark"               . ("Wireshark"))))

    (defun koek-wm/get-app-name (&optional buffer nick)
      (when-let*
          ((class (koek-wm/get-class buffer))
           (names
            (alist-get class koek-wm/app-names nil nil #'koek-wm/like-class-p)))
        (or (and nick (cadr names)) (car names))))

    (defun koek-wm/get-firefox-page ()
      (string-match
       ;; Mozilla Firefox
       ;; Mozilla Firefox Private Browsing
       ;; Mozilla Firefox (Private Browsing)
       ;; URL - Title — Mozilla Firefox
       ;; URL - — Mozilla Firefox
       ;; URL - Title - Mozilla Firefox
       ;; URL - - Mozilla Firefox
       ;; URL - Title — Mozilla Firefox Private Browsing
       ;; URL - — Mozilla Firefox Private Browsing
       ;; URL - Title — Mozilla Firefox (Private Browsing)
       ;; URL - — Mozilla Firefox (Private Browsing)
       ;; URL - Title - Mozilla Firefox (Private Browsing)
       ;; URL - - Mozilla Firefox (Private Browsing)
       (rx line-start
           ;; URL
           (group-n 1 alpha (zero-or-more (any alnum "+-.")) ":" (minimal-match (zero-or-more not-newline)))
           ;; Separator
           " - "
           ;; Title
           (zero-or-one (group-n 2 (minimal-match (one-or-more not-newline))))
           ;; Suffix
           (zero-or-one " ") (any "-\N{EM DASH}") " Mozilla Firefox" (zero-or-one " " (or "Private Browsing" "(Private Browsing)"))
           line-end)
       exwm-title)
      (list :url (match-string 1 exwm-title) :title (match-string 2 exwm-title)))

    (defun koek-wm/make-firefox-record ()
      (let* ((page (koek-wm/get-firefox-page))
             (url (or (plist-get page :url) (user-error "Not visiting a URL")))
             (title (plist-get page :title))
             (normalized (when title
                           (koek-subr/normalize-title title))))
        (koek-bmrk/generic-url-record url normalized)))

    (defun koek-wm/setup-current ()
      (cond
       ((koek-wm/classp "firefox")
        (setq-local bookmark-make-record-function
                    #'koek-wm/make-firefox-record))))

    (defun koek-wm/update-current ()
      (let ((name
             (or (koek-wm/get-app-name nil 'nick) exwm-class-name "Unnamed")))
        (cond
         ;; ---------- Epiphany/Web ----------
         ((koek-wm/classp "epiphany")
          (exwm-workspace-rename-buffer
           (koek-subr/construct-earmuffed-name name exwm-title)))
         ;; ---------- Evince/Document Viewer ----------
         ((koek-wm/classp "evince")
          (let ((title (string-trim-right
                        exwm-title
                        (rx " \N{EM DASH} " (one-or-more not-newline)))))
            (exwm-workspace-rename-buffer
             (koek-subr/construct-earmuffed-name name title))))
         ;; ---------- Firefox ----------
         ((koek-wm/classp "firefox")
          (let* ((page (koek-wm/get-firefox-page))
                 (title (plist-get page :title))
                 (url (plist-get page :url))
                 (parsed (url-generic-parse-url url))
                 (scheme (url-type parsed))
                 (id (if (member scheme '("about" "chrome"))
                         title
                       (or title url))))
            (exwm-workspace-rename-buffer
             (koek-subr/construct-earmuffed-name name id))
            ;; ibuffer, marginalia
            (setq list-buffers-directory url)))
         ;; ---------- Nautilus/Files ----------
         ((koek-wm/classp "nautilus")
          (exwm-workspace-rename-buffer
           (koek-subr/construct-earmuffed-name name (concat exwm-title "/"))))
         ;; ---------- Default ----------
         (t
          (exwm-workspace-rename-buffer
           (koek-subr/construct-earmuffed-name name))))))

    (defvar koek-wm/previous-workspace-n nil
      "Previously selected workspace number.")

    (define-advice exwm-workspace-switch
        (:around (f frame-or-index &optional force) koek-wm/update-previous-workspace-n)
      (let ((prev-workspace-n exwm-workspace-current-index))
        (funcall f frame-or-index force)
        (let ((action (if (framep frame-or-index) 'delete 'switch)))
          (cond
           ((and (eq action 'switch)
                 (/= exwm-workspace-current-index prev-workspace-n))
            (setq koek-wm/previous-workspace-n prev-workspace-n))
           ((and (eq action 'delete)
                 koek-wm/previous-workspace-n
                 (> koek-wm/previous-workspace-n exwm-workspace-current-index))
            (setq koek-wm/previous-workspace-n
                  (1- koek-wm/previous-workspace-n)))))))

    (dolist (n (number-sequence 0 9))
      (defalias (koek-subr/intern "koek-wm/switch-workspace-" n)
        (lambda ()
          (interactive)
          (exwm-workspace-switch-create n))
        (format "Switch to workspace %d." n)))

    (defun koek-wm/switch-previous-workspace ()
      "Switch to previously selected workspace."
      (interactive)
      (cond
       ((null koek-wm/previous-workspace-n)
        (user-error "No previous workspace"))
       ((= koek-wm/previous-workspace-n exwm-workspace-current-index)
        (user-error "On previous workspace, previous became current after delete"))
       (t
        (exwm-workspace-switch-create koek-wm/previous-workspace-n))))

    (defun koek-wm/n-to-label (n)
      "Convert workspace number N to a workspace label.
  N is an integer, a workspace number."
      (or (koek-subr/arabic-to-roman n) "N"))
    :init
    (bind-keys
     ("C-c w 0" . koek-wm/switch-workspace-0)
     ("C-c w 1" . koek-wm/switch-workspace-1)
     ("C-c w 2" . koek-wm/switch-workspace-2)
     ("C-c w 3" . koek-wm/switch-workspace-3)
     ("C-c w 4" . koek-wm/switch-workspace-4)
     ("C-c w 5" . koek-wm/switch-workspace-5)
     ("C-c w 6" . koek-wm/switch-workspace-6)
     ("C-c w 7" . koek-wm/switch-workspace-7)
     ("C-c w 8" . koek-wm/switch-workspace-8)
     ("C-c w 9" . koek-wm/switch-workspace-9)
     ("C-c w w" . koek-wm/switch-previous-workspace))
    :config
    (setq exwm-workspace-number 2)
    (setq exwm-workspace-show-all-buffers t)
    (setq exwm-workspace-index-map #'koek-wm/n-to-label)
    (add-hook 'exwm-update-class-hook #'koek-wm/setup-current)
    (add-hook 'exwm-update-title-hook #'koek-wm/update-current))

  (use-package exwm-layout
    :when (koek-wm/exwm-session-p)
    :defer t
    :config
    (setq exwm-layout-show-all-buffers t))

  (use-package exwm-manage
    :when (koek-wm/exwm-session-p)
    :defer t
    :preface
    (defvar koek-wm/file-dialog-titles
      (rx line-start (or "File" "Open" "Select" "Save" "Export"))
      "Regular expression matching titles of file dialog buffers.")
    :config
    (pcase-let
        ((`(,width ,height) (thread-last (display-monitor-attributes-list)
                              car                   ; Primary monitor
                              (alist-get 'geometry) ; Arrangement/resolution
                              cddr))                ; Resolution
         (defaults '(floating-mode-line nil)))
      (setq exwm-manage-configurations
            `(;; ---------- File dialogs ----------
              ((and exwm-title
                    (string-match koek-wm/file-dialog-titles exwm-title))
               x ,(/ width 4) y ,(/ height 6)
               width ,(* (/ width 4) 2) height ,(* (/ height 6) 4)
               char-mode t ,@defaults)
              ;; ---------- Epiphany/Web ----------
              ((koek-wm/classp "epiphany")
               simulation-keys
               ,(let ((keys (append '(("M-o" . "C-n")
                                      ("M-p" . "C-S-p")
                                      ("M-k" . "C-w"))
                                    koek-wm/base-simulation-keys)))
                  (mapcar (pcase-lambda (`(,from . ,to))
                            (cons (kbd from) (kbd to)))
                          keys))
               ,@defaults)
              ;; ---------- Firefox ----------
              ((koek-wm/classp "firefox")
               simulation-keys
               ,(let ((keys (append '(("M-o" . "C-n")
                                      ("M-p" . "C-S-p")
                                      ("M-k" . "C-w"))
                                    koek-wm/base-simulation-keys)))
                  (mapcar (pcase-lambda (`(,from . ,to))
                            (cons (kbd from) (kbd to)))
                          keys))
               ,@defaults)
              ;; ---------- Nautilus/Files ----------
              ((koek-wm/classp "nautilus")
               simulation-keys
               ,(let ((keys (append '(("M-k" . "C-w"))
                                    koek-wm/base-simulation-keys)))
                  (mapcar (pcase-lambda (`(,from . ,to))
                            (cons (kbd from) (kbd to)))
                          keys))
               ,@defaults)
              ;; ---------- mpv ----------
              ((koek-wm/classp "mpv")
               ,@defaults)
              ;; ---------- Default ----------
              (t
               char-mode t ,@defaults)))))
#+END_SRC

*** exar - Monitors :wip:
For monitors and monitor layouts, see [[*Monitors][Monitors]].

#+BEGIN_SRC emacs-lisp :tangle stow/emacs/.config/emacs/lisp/exar/exar.el
  ;;; exar.el --- Emacs, X Window System and RandR -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020-2023 Nicolas De Jaeghere

  ;; Author: Nicolas De Jaeghere <nicolas@dejaeghe.re>
  ;; Keywords: unix
  ;; URL: <https://github.com/Koekelas/dotfiles>

  ;; This file is not part of GNU Emacs.

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Emacs, X Window System and RandR

  ;; <https://cgit.freedesktop.org/xorg/proto/randrproto/plain/randrproto.txt>
  ;; <http://read.pudn.com/downloads110/ebook/456020/E-EDID%20Standard.pdf>

  ;;; Code:

  (eval-when-compile
    (require 'subr-x))
  (require 'seq)
  (require 'eieio)
  (require 'xcb)
  (require 'xcb-xproto)
  (require 'xcb-randr)
  (require 'exwm-core)
  (require 'exwm-randr)

  (defvar exar-monitors nil)
  (defvar exar-layouts nil)

  (defvar exar-manufacturers
    '(("AUO" . "AU Optronics Corp.")
      ("MJI" . "Marantz Japan Inc.")))

  (defconst exar--x:True 1)
  (defconst exar--x:False 0)
  (defconst exar--x:AnyPropertyType 0)

  (defvar exar--cookie nil)
  (defvar exar--previous-layout nil)

  (defun exar--plist-to-alist (plist)
    (mapcar (pcase-lambda (`(,name ,prop))
              (cons name prop))
            (seq-partition plist 2)))

  (defun exar--get-in (plist &rest keys)
    (if keys
        (apply #'exar--get-in (plist-get plist (car keys)) (cdr keys))
      plist))

  (defun exar--reverse-endian (bytes)
    (reverse bytes))

  (defun exar--format-bin (bytes)
    (concat "0x" (mapconcat (apply-partially #'format "%02x") bytes "")))

  ;; Four byte ints, eight bit bytes, big endian
  (defun exar--decode-int (bytes)
    (let ((base (expt 2 8)))
      (thread-last bytes
        exar--reverse-endian
        (seq-map-indexed (lambda (byte n)
                           (* byte (expt base n))))
        (apply #'+))))

  (defun exar--decode-string (bytes)
    (decode-coding-string (apply #'unibyte-string bytes) 'utf-8))

  (defun exar--decode-terminated-string (bytes)
    (exar--decode-string
     (seq-take-while (lambda (byte)
                       (/= byte ?\n))
                     bytes)))

  (defun exar--decode-manufacturer (bytes)
    (let ((base (expt 2 5))
          (n (exar--decode-int bytes))
          (chars nil))
      (while (> n 0)
        (push (+ (1- ?A) (% n base)) chars)
        (setq n (/ n base)))
      (concat chars)))

  (defun exar--decode-edid (bytes)
    (when bytes
      (let ((vendor-block   (seq-subseq bytes 8 18))
            (edid-block     (seq-subseq bytes 18 20))
            (basic-block    (seq-subseq bytes 20 25))
            (detailed-block (seq-subseq bytes 54 126)))
        (list
         :id (exar--format-bin vendor-block)
         :vendor   ; Section 3.4, Vendor/product identification
         (let ((week (car (seq-subseq vendor-block 8 9))))
           (list
            :manufacturer
            (exar--decode-manufacturer (seq-subseq vendor-block 0 2))
            :product
            (exar--format-bin (exar--reverse-endian (seq-subseq vendor-block 2 4)))
            :serial
            (exar--decode-int (exar--reverse-endian (seq-subseq vendor-block 4 8)))
            :week (unless (= week 0)
                    week)
            :year (+ (car (seq-subseq vendor-block 9 10)) 1990)))
         :edid     ; Section 3.5, EDID structure version/revision
         (list :version  (car edid-block) :revision (cadr edid-block))
         :basic    ; Section 3.6, Basic display parameters/features
         (let* ((horizontal (car (seq-subseq basic-block 1 2)))
                (vertical   (car (seq-subseq basic-block 2 3)))
                (valid (not (or (= horizontal 0) (= vertical 0)))))
           (list
            :horizontal (when valid horizontal)
            :vertical   (when valid vertical)
            :gamma      (/ (+ (car (seq-subseq basic-block 3 4)) 100) 100.0)))
         :detailed ; Section 3.10, Detailed timing descriptions
         (mapcar
          (lambda (detailed)
            (let ((data (seq-drop detailed 5)))
              (pcase (exar--decode-int (seq-subseq detailed 0 4))
                (255
                 (list
                  :type "serial"
                  :data (string-trim (exar--decode-terminated-string data))))
                (254
                 (list
                  :type "string"
                  :data (string-trim (exar--decode-terminated-string data))))
                (253
                 (list :type "range"))
                (252
                 (list
                  :type "name"
                  :data (string-trim (exar--decode-terminated-string data))))
                (251
                 (list :type "color"))
                (250
                 (list :type "timing"))
                ((pred (lambda (marker)
                         (and (<= marker 249) (>= marker 17))))
                 (list :type nil))
                (16
                 (list :type "dummy"))
                ((pred (lambda (marker)
                         (<= marker 15)))
                 (list :type "manufacturer" :data (exar--format-bin data)))
                (_type
                 (list :type "timing")))))
          (seq-partition detailed-block 18))))))

  (defun exar--intern-atom (name)
    (oref (xcb:+request-unchecked+reply exwm--connection
              (xcb:InternAtom :only-if-exists exar--x:False
                              :name-len (length name)
                              :name name))
          atom))

  (defun exar--get-output-property (output-id name)
    (oref (xcb:+request-unchecked+reply exwm--connection
              (xcb:randr:GetOutputProperty :output output-id
                                           :property (exar--intern-atom name)
                                           :type exar--x:AnyPropertyType
                                           :long-offset 0
                                           :long-length 100
                                           :delete exar--x:False
                                           :pending exar--x:False))
          data))

  (defun exar--get-output-info (output-id)
    (with-slots (name connection)
        (xcb:+request-unchecked+reply exwm--connection
            (xcb:randr:GetOutputInfo :output output-id
                                     :config-timestamp exar--cookie))
      (list :id output-id
            :name (exar--decode-string name)
            :edid (exar--decode-edid (exar--get-output-property output-id "EDID"))
            :connected (eq connection xcb:randr:Connection:Connected))))

  (defun exar--get-outputs ()
    (with-slots (config-timestamp outputs)
        (xcb:+request-unchecked+reply exwm--connection
            ;; Read output properties (e.g. EDID)
            (xcb:randr:GetScreenResources :window exwm--root))
      (let ((exar--cookie config-timestamp))
        (mapcar (lambda (id)
                  (cons id (exar--get-output-info id)))
                outputs))))

  (defun exar--get-connected-outputs (outputs)
    (seq-filter (lambda (output)
                  (plist-get (cdr output) :connected))
                outputs))

  (defun exar--get-monitors (outputs)
    (let ((output-ids
           (seq-reduce (pcase-lambda (ids `(,id . ,props))
                         (when-let ((edid (exar--get-in props :edid :id)))
                           (push (cons edid id) ids))
                         ids)
                       outputs nil)))
      (mapcar (pcase-lambda (`(,id . ,props))
                (let ((output (thread-first (plist-get props :edid)
                                (assoc output-ids)
                                cdr
                                (alist-get outputs))))
                  (cons id (append (list :id id) props (list :output output)))))
              (exar--plist-to-alist exar-monitors))))

  (defun exar--get-layouts (outputs)
    (let ((monitors (exar--get-monitors outputs)))
      (mapcar
       (lambda (layout)
         (plist-put (copy-sequence layout)
                    :monitors
                    (mapcar (pcase-lambda (`(,id . ,props))
                              (append props (alist-get id monitors)))
                            (exar--plist-to-alist (plist-get layout :monitors)))))
       exar-layouts)))

  (defun exar--get-preferred-layout (layouts)
    (seq-find (lambda (layout)
                (seq-every-p (lambda (monitor)
                               (plist-get monitor :output))
                             (plist-get layout :monitors)))
              layouts))

  (defun exar--set-primary-output (output-id)
    (xcb:+request exwm--connection
        (xcb:randr:SetOutputPrimary :window exwm--root
                                    :output output-id)))

  (defun exar--set-primary (monitor-layout)
    (exar--set-primary-output (exar--get-in (car monitor-layout) :output :id)))

  (defun exar--set-workspaces (monitor-layout)
    (setq exwm-randr-workspace-monitor-plist
          (seq-mapcat (lambda (monitor)
                        (let ((output (exar--get-in monitor :output :name)))
                          (seq-mapcat (lambda (workspace)
                                        (list workspace output))
                                      (plist-get monitor :workspaces))))
                      monitor-layout)))

  (defun exar--get-display-ns (outputs monitor-layout)
    (let* ((primary
            (assq (exar--get-in (car monitor-layout) :output :id) outputs))
           ;; Sort primary first, mirror dispwin
           (sorted (cons primary
                         (seq-filter (lambda (output)
                                       (/= (car output) (car primary)))
                                     outputs))))
      (seq-map-indexed (lambda (output n)
                         (cons (car output) (1+ n)))
                       sorted)))

  (defun exar--load-color-dispwin (display-n file-name)
    (call-process "dispwin" nil 0 nil (number-to-string display-n) file-name))

  (defun exar--load-color-none (_display-n _file-name)
    nil)

  (defvar exar--load-color-f
    (cond
     ((executable-find "dispwin")
      #'exar--load-color-dispwin)
     (t
      #'exar--load-color-none)))

  (defun exar--load-color (display-n file-name)
    (funcall exar--load-color-f display-n file-name))

  (defun exar--load-colors (display-ns monitor-layout)
    (dolist (monitor monitor-layout)
      (when-let ((color (plist-get monitor :color)))
        (exar--load-color (alist-get (exar--get-in monitor :output :id)
                                     display-ns)
                          color))))

  (defun exar--apply ()
    (let* ((outputs (exar--get-outputs))
           (layout (exar--get-preferred-layout (exar--get-layouts outputs)))
           (monitor-layout (plist-get layout :monitors)))
      (when (and (not (string-equal (plist-get layout :name)
                                    (plist-get exar--previous-layout :name)))
                 monitor-layout)
        (exar--set-primary monitor-layout)
        (exar--set-workspaces monitor-layout)
        (exar--load-colors (exar--get-display-ns outputs monitor-layout)
                           monitor-layout)
        (setq exar--previous-layout layout))))

  (defun exar-insert-edid (output)
    (interactive
     (let* ((candidates
             (mapcar
              (lambda (output)
                (let* ((props (cdr output))
                       (manufacturer-name
                        (exar--get-in props :edid :vendor :manufacturer))
                       (monitor-names
                        (thread-last (exar--get-in props :edid :detailed)
                          (seq-filter (lambda (detailed)
                                        (let ((type (plist-get detailed :type)))
                                          (or (string-equal type "name")
                                              (string-equal type "string")))))
                          (mapcar (lambda (detailed)
                                    (plist-get detailed :data)))))
                       (output-name (plist-get props :name)))
                  (cons
                   (concat (or (cdr (assoc manufacturer-name exar-manufacturers))
                               manufacturer-name)
                           (when monitor-names
                             (concat " " (string-join monitor-names " ")))
                           (concat " connected to " output-name))
                   output)))
              (exar--get-connected-outputs (exar--get-outputs))))
            (output (thread-first (completing-read "Monitor: " candidates nil t)
                      (assoc candidates)
                      cdr)))
       (list output)))
    (insert (exar--get-in (cdr output) :edid :id)))

  ;;;###autoload
  (defun exar-enable ()
    (add-hook 'exwm-randr-screen-change-hook #'exar--apply)
    (exwm-randr-enable))

  (provide 'exar)

  ;;; exar.el ends here
#+END_SRC

** server - Emacs server
The advantage of starting the server during initialization compared to
starting Emacs as daemon is initialization happens in a graphical
frame, i.e., it's possible to query resolution, color depth, fonts,
etc.

#+BEGIN_SRC emacs-lisp
  (use-package server
    :config
    (server-start))
#+END_SRC

** Clipboard
Add clipboard to kill ring before killing.

#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC

** Global commands
The setting ~repeat-on-final-keystroke~ is cumbersome. Rebind ~repeat~ to
something short.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-z" #'repeat)
#+END_SRC

** XDG desktop entries
#+BEGIN_SRC emacs-lisp
  (defvar koek-xde/entries-dirs
    (mapcar (apply-partially #'expand-file-name "applications/")
            (cons (xdg-data-home) (xdg-data-dirs)))
    "List of directories where to look for desktop entries.
  Directories are sorted from highest to lowest priority, i.e.,
  earlier directories shadow entries in later ones.")

  (defun koek-xde/read-entries ()
    (let ((file-names
           (thread-last koek-xde/entries-dirs
             (seq-filter #'file-accessible-directory-p)
             (seq-mapcat
              (lambda (file-name)
                (directory-files file-name
                                 'full (rx ".desktop" line-end) 'no-sort))))))
      (seq-reduce (lambda (entries file-name)
                    (let ((id (file-name-base file-name)))
                      (unless (gethash id entries)
                        (puthash id (xdg-desktop-read-file file-name) entries)))
                    entries)
                  file-names (make-hash-table :test #'equal))))

  (defun koek-xde/enabledp (entry session)
    (let ((no-display (gethash "NoDisplay" entry "false"))
          (hidden (gethash "Hidden" entry "false"))
          (onlys (split-string (gethash "OnlyShowIn" entry "") ";" 'omit-nulls))
          (nots (split-string (gethash "NotShowIn" entry "") ";" 'omit-nulls)))
      (null (or (string-equal no-display "true")
                (string-equal hidden "true")
                (and onlys (null (seq-intersection session onlys)))
                (and nots (seq-intersection session nots))))))

  (defun koek-xde/get-entries ()
    (let ((entries (koek-xde/read-entries))
          (disabled nil))
      (maphash (lambda (id entry)
                 (unless (koek-xde/enabledp entry koek-wm/session)
                   (push id disabled)))
               entries)
      (dolist (id disabled)
        (remhash id entries))
      entries))

  (defvar koek-xde/entry-history nil
    "History of entry names read.")

  (defun koek-xde/read-id (prompt)
    (let* ((entries (koek-xde/get-entries))
           (ids (let ((ids nil))
                  (maphash (lambda (id entry)
                             (push (cons (gethash "Name" entry) id) ids))
                           entries)
                  ids))
           (candidates
            (seq-reduce (pcase-lambda (candidates `(,name . ,id))
                          (puthash name (gethash id entries) candidates)
                          candidates)
                        ids (make-hash-table :test #'equal)))
           (table (koek-subr/enrich candidates
                    category 'xdg-desktop-entry
                    annotation-function
                    (lambda (candidate)
                      (when-let ((comment (thread-last candidates
                                            (gethash candidate)
                                            (gethash "Comment"))))
                        (concat " " comment))))))
      (thread-first
          (completing-read prompt table nil t nil 'koek-xde/entry-history)
        (assoc ids)
        cdr)))

  (defun koek-xde/launch (id &rest uris)
    ;; default-directory
    (apply #'call-process "gtk-launch" nil 0 nil id
           (mapcar (lambda (uri)
                     (if (koek-subr/urip uri)
                         uri
                       (expand-file-name uri)))
                   uris)))

  (defvar koek-xde/file-manager-id "org.gnome.Nautilus")
  (defvar koek-xde/browser-id "firefox")

  (defun koek-xde/launch-app (id)
    (interactive (list (koek-xde/read-id "Launch: ")))
    (koek-xde/launch id))

  (defun koek-xde/launch-file-manager ()
    "Launch file manager."
    (interactive)
    (koek-xde/launch koek-xde/file-manager-id))

  (defun koek-xde/launch-browser ()
    "Launch browser."
    (interactive)
    (koek-xde/launch koek-xde/browser-id))

  (bind-keys
   ("C-c x x" . koek-xde/launch-app)
   ("C-c x C-f" . koek-xde/launch-file-manager)
   ("C-c x C-b" . koek-xde/launch-browser))
#+END_SRC

* Frames, windows and buffers

** Frame commands
The command ~suspend-frame~ is disorienting. Unbind ~suspend-frame~.

#+BEGIN_SRC emacs-lisp
  (unbind-key "C-x C-z")
#+END_SRC

The default keybindings assume a QWERTY keyboard. Some keybindings are
cumbersome on a non QWERTY keyboard. Rebind cumbersome frame commands.

#+BEGIN_SRC emacs-lisp
  (bind-keys
   ("C-c v m" . make-frame-command)
   ("C-c v o" . other-frame)
   ("C-c v d" . delete-frame)
   ("C-c v C-d" . delete-other-frames))
#+END_SRC

** Window settings
Resize windows pixelwise, not characterwise.

#+BEGIN_SRC emacs-lisp
  (setq window-resize-pixelwise t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq window-sides-vertical t)
#+END_SRC

** Window commands
Rebind cumbersome and bind additional window commands.

#+BEGIN_SRC emacs-lisp
  (bind-keys
   ("C-c w h" . split-window-below)
   ("C-c w v" . split-window-right)
   ("C-c w b" . balance-windows)
   ("C-c w a" . fit-window-to-buffer)     ; [A]dapt
   ("C-c w d" . delete-window)
   ("C-c w C-d" . delete-other-windows)
   ("C-c w M-d" . kill-buffer-and-window)
   ("C-c w m" . window-toggle-side-windows))
#+END_SRC

Unlike ~balance-windows~, which divides the width and height equally,
~balance-windows-area~ divides the area equally. It produces identical
results for simple configurations (e.g. one left and one right) but
different results for complex configurations (e.g. one left and two
above each other right). Bind ~balance-windows-area~.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c w C-b" #'balance-windows-area)
#+END_SRC

** Window resize commands
Resizing windows by characters or pixels is slow. Resize windows in
steps.

#+BEGIN_SRC emacs-lisp
  (defvar koek-wind/n-hor-steps 32
    "Number of horizontal steps to resize a window from monitor width to zero.")

  (defun koek-wind/resize (shrink vertical)
    "Resize selected window.
  When SHRINK is truthy, shrink window, else, grow window.  When
  VERTICAL is truthy, resize vertically, else, resize
  horizontally."
    (let* ((width (nth 2 (frame-monitor-geometry)))
           (step (/ width koek-wind/n-hor-steps))
           (delta (if shrink (- step) step)))
      (window-resize nil delta (not vertical) nil 'pixelwise)))

  (defun koek-wind/grow (&optional arg)
    "Grow selected window.
  With `\\[universal-argument]' prefix argument ARG, grow
  vertically, else, grow horizontally."
    (interactive "P")
    (koek-wind/resize nil arg))

  (defun koek-wind/shrink (&optional arg)
    "Shrink selected window.
  With `\\[universal-argument]' prefix argument ARG, shrink
  vertically, else, shrink horizontally."
    (interactive "P")
    (koek-wind/resize 'shrink arg))

  (bind-keys
   ("C-c w g" . koek-wind/grow)
   ("C-c w s" . koek-wind/shrink))
#+END_SRC

** ace-window - Jump to visible window
[[https://github.com/abo-abo/ace-window][ace-window (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :straight t
    :bind
    ("C-c j w" . ace-window)
    :config
    (setq aw-scope 'frame)
    (setq aw-swap-invert t)
    (setq aw-keys '(?q ?s ?d ?f ?j ?k ?l ?m))
    (setq aw-dispatch-alist nil)
    (setq aw-leading-char-style 'path)
    (ace-window-display-mode)
    ;; Ace isn't a minor mode but it can be delighted [sic]
    :delight)
#+END_SRC

** transpose-frame - Transform window layout
[[https://github.com/emacsorphanage/transpose-frame][transpose-frame (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package transpose-frame
    :straight t
    :bind
    ("C-c w t" . transpose-frame)
    :preface
    (defun koek-tf/flip (&optional arg)
      "Flip window layout.
  With `\\[universal-argument]' prefix argument ARG, flip
  vertically, else, flip horizontally."
      (interactive "P")
      (if arg
          (flip-frame)
        (flop-frame)))

    (defun koek-tf/rotate (&optional arg)
      "Rotate window layout.
  With `\\[universal-argument]' prefix argument ARG, rotate
  clockwise, else, rotate counterclockwise."
      (interactive "P")
      (if arg
          (rotate-frame-clockwise)
        (rotate-frame-anticlockwise)))
    :init
    (bind-keys
     ("C-c w f" . koek-tf/flip)
     ("C-c w c" . koek-tf/rotate)))
#+END_SRC

** winner - Undo and redo window layout changes
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :bind
    (("C-c w l" . winner-undo)
     ("C-c w r" . winner-redo))
    :init
    (winner-mode))
#+END_SRC

** uniquify - Descriptive buffer names
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :config
    (setq uniquify-buffer-name-style 'forward)
    (setq uniquify-trailing-separator-p t))
#+END_SRC

** Buffer categories
Parts of this configuration want to act on buffer categories, not only
on the per package buffers in a specific major mode or with a specific
name. Define functionality to make buffer categories.

#+BEGIN_SRC emacs-lisp
  (defmacro koek-buff/def-category-pred (name)
    "Define buffer category predicate NAME."
    (let* ((prefix (string-trim-right (symbol-name name)
                                      (rx (zero-or-one "-") "p")))
           (category (car (last (split-string prefix (rx (any "-/"))))))
           (modes-sym (koek-subr/intern prefix "-modes"))
           (names-sym (koek-subr/intern prefix "-names"))
           (fs-sym (koek-subr/intern prefix "-fs"))
           (mode-pred-sym (koek-subr/intern prefix "-mode-p"))
           (name-pred-sym (koek-subr/intern prefix "-name-p")))
      `(progn
         (defvar ,modes-sym nil
           ,(format "List of %s major mode symbols." category))

         (defvar ,names-sym nil
           ,(format "Regular expression matching names of %s buffers." category))

         (defvar ,fs-sym '(,mode-pred-sym ,name-pred-sym)
           ,(format "List of %s interrogation functions." category))

         (defun ,mode-pred-sym (&optional buffer)
           ,(string-join
             (list
              (format
               "Return whether major mode of BUFFER is derived from a %s mode."
               category)
              "Optional BUFFER is a buffer or string, respectively the buffer or"
              "name of the buffer to interrogate and defaults to the current"
              (format "buffer.  For %s major modes, see `%s'."
                      category modes-sym))
             "\n")
           (apply #'provided-mode-derived-p
                  (buffer-local-value
                   'major-mode (get-buffer (or buffer (current-buffer))))
                  ,modes-sym))

         (defun ,name-pred-sym (&optional buffer)
           ,(string-join
             (list
              (format "Return whether name of BUFFER is a %s name." category)
              "Optional BUFFER is a buffer or string, respectively the buffer or"
              "name of the buffer to interrogate and defaults to the current"
              (format "buffer.  For %s names, see `%s'." category names-sym))
             "\n")
           (when ,names-sym
             (let ((buffer-name (if (stringp buffer)
                                    buffer
                                  (buffer-name (or buffer (current-buffer))))))
               (string-match ,names-sym buffer-name))))

         (defun ,name (&optional buffer)
           ,(string-join
             (list
              (format "Return whether BUFFER is a %s buffer." category)
              "Optional BUFFER is a buffer or string, respectively the buffer or"
              "name of the buffer to interrogate and defaults to the current"
              (format "buffer.  For %s interrogation functions, see" category)
              (format "`%s'." fs-sym))
             "\n")
           (with-current-buffer (get-buffer (or buffer (current-buffer)))
             (seq-some #'funcall ,fs-sym))))))
#+END_SRC

Define buffer categories for directory, documentation, shell and web
buffers.

#+BEGIN_SRC emacs-lisp
  (koek-buff/def-category-pred koek-buff/dirp)
  (koek-buff/def-category-pred koek-buff/docp)
  (koek-buff/def-category-pred koek-buff/shellp)
  (koek-buff/def-category-pred koek-buff/webp)

  (defun koek-buff/doc-page-p (&optional buffer)
    "Return whether BUFFER displays a documentation webpage.
  Optional BUFFER is a buffer or string, respectively the buffer or
  name of the buffer to interrogate and defaults to the current
  buffer."
    (let* ((url
            (buffer-local-value
             'list-buffers-directory (get-buffer (or buffer (current-buffer)))))
           (parsed (url-generic-parse-url url))
           (host (url-host parsed))
           (path (url-filename parsed)))
      (cond
       ((string-suffix-p "devdocs.io" host))
       ((string-suffix-p "lispworks.com" host)
        (or (string-prefix-p "/documentation" path)
            (string-prefix-p "/reference" path))))))

  ;; Directory buffers
  (setq koek-buff/dir-modes '(dired-mode))
  (setq koek-buff/dir-fs
        `(koek-buff/dir-mode-p
          koek-buff/dir-name-p
          ,(apply-partially #'koek-wm/classp "nautilus")))

  ;; Help and documentation buffers
  (setq koek-buff/doc-modes
        '(help-mode helpful-mode shortdoc-mode Info-mode Man-mode apropos-mode
          devdocs-mode cider-docview-mode sly-apropos-mode geiser-doc-mode))
  (setq koek-buff/doc-names
        (rx line-start
            (or "*eldoc*"
                "*cider-clojuredocs*"
                "*sly-description*"
                ;; When new buffer, major mode is set after calling
                ;; `display-buffer'
                "*Shortdoc"
                "*info*"
                "*Man"
                ;; When no matches, major mode is `fundamental-mode'
                "*Apropos*")))
  (setq koek-buff/doc-fs
        '(koek-buff/doc-mode-p koek-buff/doc-name-p koek-buff/doc-page-p))

  ;; Shell buffers
  (setq koek-buff/shell-modes
        '(vterm-mode eshell-mode cider-repl-mode sly-mrepl-mode erlang-shell-mode
          indium-repl-mode inferior-octave-mode inferior-python-mode
          geiser-repl-mode sql-interactive-mode))
  (setq koek-buff/shell-names
        (rx line-start
            ;; When new buffer, major mode is set after calling
            ;; `display-buffer'
            (or "*vterm" "*eshell")))

  ;; Web buffers
  (setq koek-buff/web-modes '(eww-mode elpher-mode))
  (setq koek-buff/web-fs
        `(koek-buff/web-mode-p
          koek-buff/web-name-p
          ,(apply-partially #'koek-wm/classp "epiphany")
          ,(apply-partially #'koek-wm/classp "firefox")))
#+END_SRC

** Buffer commands
#+BEGIN_SRC emacs-lisp
  (bind-keys
   ("C-c b l" . previous-buffer)
   ("C-c b r" . next-buffer))
#+END_SRC

Bury unneeded buffers, computers have more than enough memory.

#+BEGIN_SRC emacs-lisp
  (defun koek-buff/bury (&optional arg)
    "Bury current.
  With `\\[universal-argument]' prefix argument ARG, kill current."
    (interactive "P")
    (if arg
        (kill-buffer)
      (bury-buffer)))

  (bind-key [remap kill-buffer] #'koek-buff/bury)
#+END_SRC

** Buffer placement
#+BEGIN_SRC emacs-lisp
  (defun koek-buff/display-project-shell-p (name _action)
    ;; Shell then project, project is expensive
    (and (koek-buff/shellp name) (koek-proj/locate-root name)))

  (defun koek-buff/display-doc-p (name _action)
    (koek-buff/docp name))

  (let ((default-hor-actions
          '((window-parameters . ((no-other-window . t) (no-delete-other-windows . t)))
            (preserve-size     . (nil . t))
            (window-height     . 0.15)))
        (default-vert-actions
          '((window-parameters . ((no-other-window . t) (no-delete-other-windows . t)))
            (preserve-size     . (t . nil))
            (window-width      . 80))))
    (setq display-buffer-alist
          `((,(rx line-start
                  (or "*magit"
                      "*vterm*"
                      "*eshell*"
                      "*Proced*"
                      "*view-src"
                      "*org-src"))
             . ((display-buffer-reuse-window display-buffer-same-window)))
            ;; Below selected
            (,(rx line-start (or " *transient*" "*Calendar*"))
             . (display-buffer-below-selected))
            ;; Top
            (,(rx line-start
                  (or "*Occur*"
                      "*grep*"
                      "*Flymake"
                      "*PDF-Occur*"))
             . (display-buffer-in-side-window . ((side . top) ,@default-hor-actions)))
            ;; Left
            (,(rx line-start
                  (or "*Customize"
                      "*Network Security Manager*"
                      "*BBDB*"
                      "*Dictionary*"
                      "*Holidays*"
                      "*Pp"))
             . (display-buffer-in-side-window . ((side . left) ,@default-vert-actions)))
            (,(rx line-start "*Messages*")
             . (display-buffer-in-side-window . ((side . left) (slot . 1) ,@default-vert-actions)))
            (koek-buff/display-doc-p
             . (display-buffer-in-side-window . ((side . left) (slot . 1) ,@default-vert-actions)))
            ;; Bottom
            (,(rx line-start
                  (or "*Backtrace*"
                      "*Warnings*"
                      "*trace-output*"
                      "*compilation"
                      "*Compile-Log*"))
             . (display-buffer-in-side-window . ,default-hor-actions))
            (koek-buff/display-project-shell-p
             . (display-buffer-in-side-window . ((slot . 1) ,@default-hor-actions))))))
#+END_SRC

** ibuffer - list-buffers replacement
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :bind
    ([remap list-buffers] . ibuffer)
    :config
    (setq ibuffer-movement-cycle nil)
    (setq ibuffer-jump-offer-only-visible-buffers t)
    (setq ibuffer-formats
          '((mark
             " " (name 40 40 :left :elide)
             " " read-only modified
             " " (size 8 8 :right :elide)
             " " (mode 16 16 :left :elide)
             " " filename-and-process)))
    (setq ibuffer-eliding-string truncate-string-ellipsis)
    (add-hook 'ibuffer-mode-hook #'koek-subr/reset-default-directory))

  (use-package ibuf-ext
    :after ibuffer
    :preface
    (defun koek-ibuf/get-host (&optional buffer)
      (let ((url
             (buffer-local-value
              'list-buffers-directory (get-buffer (or buffer (current-buffer))))))
        (when (koek-subr/urip url)
          (let* ((parsed (url-generic-parse-url url))
                 (host (url-host parsed)))
            (unless (string-empty-p host)
              host)))))

    (defun koek-ibuf/determine-sourcehut-github-gitlab-repo (url)
      (pcase-let* ((parsed (url-generic-parse-url url))
                   (host (url-host parsed))
                   (`(,group ,repo)
                    (split-string (url-filename parsed) "/" 'omit-nulls)))
        (when (and host group repo
                   (string-match
                    (rx word-boundary (or "sr" "github" "gitlab") word-boundary)
                    host))
          (format "%s - %s/%s" repo host group))))

    (defun koek-ibuf/determine-bitbucket-repo (url)
      (pcase-let* ((parsed (url-generic-parse-url url))
                   (host (url-host parsed))
                   (`(,group-marker ,group ,repo-marker ,repo)
                    (split-string (url-filename parsed) "/" 'omit-nulls)))
        (when (and host group-marker group repo-marker repo
                   (string-match
                    (rx word-boundary "bitbucket" word-boundary) host)
                   (string-equal group-marker "projects")
                   (string-equal repo-marker "repos"))
          (format "%s - %s/%s" repo host group))))

    (defvar koek-ibuf/determine-repo-fs
      '(koek-ibuf/determine-sourcehut-github-gitlab-repo
        koek-ibuf/determine-bitbucket-repo))

    (defun koek-ibuf/get-repo (&optional buffer)
      (let ((url
             (buffer-local-value
              'list-buffers-directory (get-buffer (or buffer (current-buffer))))))
        (when (koek-subr/urip url)
          (seq-some (lambda (f)
                      (funcall f url))
                    koek-ibuf/determine-repo-fs))))

    (defun koek-ibuf/part-app-p (name)
      (string-equal (koek-wm/get-app-name) name))

    (defun koek-ibuf/part-project-p (file-name)
      "Return whether current displays a file part of project FILE-NAME.
  FILE-NAME is a string, the root of the project to compare with."
      (string-equal (koek-proj/locate-root) file-name))

    (defun koek-ibuf/part-host-p (host)
      "Return whether current displays a webpage part of HOST.
  HOST is a string, the host to compare with."
      (string-equal (koek-ibuf/get-host) host))

    (defun koek-ibuf/part-repo-p (name)
      (string-equal (koek-ibuf/get-repo) name))

    (defun koek-ibuf/group-app ()
      (interactive)
      (let ((names (thread-last (buffer-list)
                     (mapcar #'koek-wm/get-app-name)
                     (remq nil)
                     seq-uniq
                     (seq-sort #'string-lessp))))
        (setq ibuffer-filter-groups
              (mapcar (lambda (name)
                        `(,name . ((predicate . (koek-ibuf/part-app-p ,name)))))
                      names)))
      (ibuffer-update nil 'silent))

    (defun koek-ibuf/group-project ()
      "Group buffers by project."
      (interactive)
      (let ((file-names (thread-last (buffer-list)
                          (mapcar #'koek-proj/locate-root)
                          (remq nil)
                          seq-uniq
                          (seq-sort #'string-lessp))))
        (setq ibuffer-filter-groups
              (mapcar (lambda (file-name)
                        `(,file-name
                          . ((predicate . (koek-ibuf/part-project-p ,file-name)))))
                      file-names))
        (ibuffer-update nil 'silent)))

    (defun koek-ibuf/group-host ()
      "Group buffers by host."
      (interactive)
      (let ((hosts (thread-last (buffer-list)
                     (mapcar #'koek-ibuf/get-host)
                     (remq nil)
                     seq-uniq
                     (seq-sort #'string-lessp))))
        (setq ibuffer-filter-groups
              (mapcar (lambda (host)
                        `(,host . ((predicate . (koek-ibuf/part-host-p ,host)))))
                      hosts))
        (ibuffer-update nil 'silent)))

    (defun koek-ibuf/group-repo ()
      (interactive)
      (let ((names (thread-last (buffer-list)
                     (mapcar #'koek-ibuf/get-repo)
                     (remq nil)
                     seq-uniq
                     (seq-sort #'string-lessp))))
        (setq ibuffer-filter-groups
              (mapcar (lambda (name)
                        `(,name . ((predicate . (koek-ibuf/part-repo-p ,name)))))
                      names))
        (ibuffer-update nil 'silent)))

    (defun koek-ibuf/clear-filters (&optional what)
      "Clear filters and filter groups.
  WHAT is a symbol, the filter to clear, either filter (only
  filters), group (only groups) or all (filters and groups)."
      (interactive
       (let ((what (pcase (prefix-numeric-value current-prefix-arg)
                     (4     'filter)
                     (16    'group)
                     (_what 'all))))
         (list what)))
      (let ((current (ibuffer-current-buffer)))
        (when (or (null what)
                  (eq what 'filter)
                  (eq what 'all))
          (setq ibuffer-filtering-qualifiers nil))
        (when (or (eq what 'group)
                  (eq what 'all))
          (setq ibuffer-filter-groups nil))
        (ibuffer-update nil 'silent)
        (when current
          (ibuffer-jump-to-buffer (buffer-name current)))))
    :config
    (bind-keys
     :map ibuffer-mode-map
     ("\\ a" . koek-ibuf/group-app)
     ("\\ p" . koek-ibuf/group-project)
     ("\\ h" . koek-ibuf/group-host)
     ("\\ r" . koek-ibuf/group-repo)
     ("/ /" . koek-ibuf/clear-filters))

    (setq ibuffer-saved-filters
          '(("Directory" . ((predicate . (koek-buff/dirp))))
            ("Help and documentation" . ((predicate . (koek-buff/docp))))
            ("Shell"     . ((predicate . (koek-buff/shellp))))
            ("Web"       . ((predicate . (koek-buff/webp))))
            ("Project"   . ((predicate . (koek-proj/locate-root))))))
    (setq ibuffer-show-empty-filter-groups nil))
#+END_SRC

* Minibuffer

** minibuffer - Read input
#+BEGIN_SRC emacs-lisp
  (use-package minibuffer
    :defer t
    :config
    (use-package consult
      :bind
      (:map minibuffer-local-map
       ("C-r" . consult-history)))

    (setq enable-recursive-minibuffers t)
    (setq completion-in-region-function #'consult-completion-in-region)

    (let ((default-styles '(orderless basic)))
      (setq completion-styles default-styles)
      ;; completion-category-defaults
      (setq completion-category-overrides
            `((buffer       . ((styles . ,default-styles)))
              (email        . ((styles . ,default-styles)))
              ;; tramp
              (file         . ((styles . (basic ,@(remq 'basic default-styles)))))
              (info-menu    . ((styles . ,default-styles)))
              (project-file . ((styles . ,default-styles)))
              (unicode-name . ((styles . ,default-styles))))))

    (setq echo-keystrokes 0.3)

    ;; prompt
    (plist-put minibuffer-prompt-properties 'cursor-intangible t)
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))

  (use-package crm
    :defer t
    :preface
    (defface koek-mbuf/crm-indicator '((t . (:box t :inherit minibuffer-prompt)))
      "Face for CRM indicator in minibuffer prompt."
      :group 'minibuffer)

    (define-advice completing-read-multiple
        (:filter-args (args) koek-mbuf/insert-crm-indicator)
      (cons (replace-regexp-in-string
             (rx (group-n 1 (zero-or-one ": ")) line-end)
             (concat " " (propertize "CRM" 'face 'koek-mbuf/crm-indicator) "\\1")
             (car args))
            (cdr args))))
#+END_SRC

*** orderless - Out of order completion style
[[https://github.com/oantolin/orderless][orderless (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :straight t
    :after minibuffer
    :preface
    (defun koek-rdls/dispatch (component _component-n _n-components)
      "Dispatch orderless component.
  COMPONENT is a string, the component to dispatch.  Four patterns
  are recognized:

  - term@= is style `orderless-literal'
  - term@, is style `orderless-initialism'
  - term@$ is style `orderless-regexp'
  - term@! is style `orderless-without-literal'"
      (when (string-match (rx (group-n 2 (one-or-more not-newline))
                              "@" (group-n 1 (any "=,$!")) line-end)
                          component)
        (let* ((dispatcher (match-string 1 component))
               (normalized (match-string 2 component))
               (style (pcase dispatcher
                        ("=" 'orderless-literal)
                        ("," 'orderless-initialism)
                        ("$" 'orderless-regexp)
                        ("!" 'orderless-without-literal))))
          (cons style normalized))))
    :config
    (setq orderless-component-separator #'orderless-escapable-split-on-space)
    (setq orderless-matching-styles
          '(orderless-literal orderless-initialism orderless-regexp))
    (setq orderless-style-dispatchers '(koek-rdls/dispatch)))
#+END_SRC

*** savehist - Persist history
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :config
    (setq savehist-autosave-interval nil)
    (savehist-mode))
#+END_SRC

** consult - completing-read powered commands
[[https://github.com/minad/consult][consult (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package consult
    :straight t
    :bind
    (([remap switch-to-buffer] . consult-buffer)
     ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
     ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
     ("C-c f f" . consult-find)
     ([remap bookmark-jump] . consult-bookmark)
     ("C-§" . consult-line)
     ("M-s s" . consult-ripgrep)
     ("C-c j d" . consult-imenu)
     ("C-c e f" . consult-keep-lines)
     ([remap yank-pop] . consult-yank-pop))
    :preface
    (autoload #'bookmark-get-bookmark "bookmark")
    (autoload #'bookmark-get-handler "bookmark")

    (defvar koek-cslt/inhibited-buffer-modes '(exwm-mode))

    (defvar koek-cslt/inhibited-file-names
      (rx (or ".pdf" ".png" ".jpg") line-end))

    (defvar koek-cslt/inhibited-bookmark-handlers
      '(koek-bmrk/handle-generic-url
        elpher-bookmark-jump
        elfeed-show-bookmark-handler))

    (defun koek-cslt/inhibit-preview-p (candidate)
      (let* ((buffer (get-buffer candidate))
             (bookmark (unless buffer
                         (bookmark-get-bookmark candidate 'no-error)))
             (file-name (unless (or buffer bookmark)
                          candidate)))
        (cond
         (buffer
          (apply #'provided-mode-derived-p
                 (buffer-local-value 'major-mode buffer)
                 koek-cslt/inhibited-buffer-modes))
         (file-name
          (when koek-cslt/inhibited-file-names
            (string-match koek-cslt/inhibited-file-names file-name)))
         (bookmark
          (memq (or (bookmark-get-handler bookmark) 'bookmark-default-handler)
                koek-cslt/inhibited-bookmark-handlers)))))

    (defmacro koek-cslt/install-inhibit-preview (state-ctor candidate &rest body)
      (declare (indent 2))
      (let ((handler-sym (gensym))
            (action-sym (gensym))
            (candidate-sym (gensym)))
        `(define-advice ,state-ctor
             (:filter-return (,handler-sym) koek-cslt/inhibit-preview)
           (lambda (,action-sym ,candidate-sym)
             (if (and (eq ,action-sym 'preview)
                      ,candidate-sym
                      (koek-cslt/inhibit-preview-p ,candidate-sym))
                 (progn
                   (let ((inhibit-message t)) ; Dynamic variable
                     (funcall ,handler-sym ,action-sym nil))
                   (let ((,candidate ,candidate-sym))
                     ,@body))
               (funcall ,handler-sym ,action-sym ,candidate-sym))))))

    (koek-cslt/install-inhibit-preview consult--buffer-state buffer-name
      (message "No preview for `%s'" buffer-name))

    (koek-cslt/install-inhibit-preview consult--file-state file-name
      (message "No preview for `%s'" (file-name-nondirectory file-name)))

    (koek-cslt/install-inhibit-preview consult--bookmark-state bookmark-name
      (message "No preview for `%s'" bookmark-name))

    (defvar koek-cslt/exwm-buffer-source
      `(:category buffer
        :items ,(lambda ()
                  (thread-last
                    (buffer-list)
                    (seq-filter
                     (lambda (buffer)
                       (provided-mode-derived-p
                        (buffer-local-value 'major-mode buffer) 'exwm-mode)))
                    (mapcar #'buffer-name)))
        :history buffer-name-history
        :hidden t
        :narrow ?x
        :state consult--buffer-state
        :name "EXWM"
        :face consult-buffer))

    (defvar koek-cslt/dir-buffer-source
      `(:category buffer
        :items ,(lambda ()
                  (thread-last (buffer-list)
                    (seq-filter #'koek-buff/dirp)
                    (mapcar #'buffer-name)))
        :history buffer-name-history
        :hidden t
        :narrow ?r
        :state consult--buffer-state
        :name "Directory"
        :face consult-buffer))

    (defvar koek-cslt/doc-buffer-source
      `(:category buffer
        :items ,(lambda ()
                  (thread-last (buffer-list)
                    (seq-filter #'koek-buff/docp)
                    (mapcar #'buffer-name)))
        :history buffer-name-history
        :hidden t
        :narrow ?d
        :state consult--buffer-state
        :name "Help and documentation"
        :face consult-buffer))

    (defvar koek-cslt/shell-buffer-source
      `(:category buffer
        :items ,(lambda ()
                  (thread-last (buffer-list)
                    (seq-filter #'koek-buff/shellp)
                    (mapcar #'buffer-name)))
        :history buffer-name-history
        :hidden t
        :narrow ?s
        :state consult--buffer-state
        :name "Shell"
        :face consult-buffer))

    (defvar koek-cslt/web-buffer-source
      `(:category buffer
        :items ,(lambda ()
                  (thread-last (buffer-list)
                    (seq-filter #'koek-buff/webp)
                    (mapcar #'buffer-name)))
        :history buffer-name-history
        :hidden t
        :narrow ?w
        :state consult--buffer-state
        :name "Web"
        :face consult-buffer))
    :config
    (setq consult-narrow-key "C-+")
    (setq consult-buffer-sources
          '(consult--source-buffer
            consult--source-recent-file
            consult--source-bookmark
            consult--source-hidden-buffer
            koek-cslt/exwm-buffer-source
            koek-cslt/dir-buffer-source
            koek-cslt/doc-buffer-source
            koek-cslt/shell-buffer-source
            koek-cslt/web-buffer-source
            consult--source-project-buffer
            consult--source-project-recent-file))
    (setq consult-bookmark-narrow
          '((?f "File" bookmark-default-handler)
            (?w "Web" koek-bmrk/handle-generic-url)
            (?g "Gopher and Gemini" elpher-bookmark-jump)
            (?n "News" elfeed-show-bookmark-handler))))
#+END_SRC

*** consult-dir - Insert file names
[[https://github.com/karthink/consult-dir][consult-dir (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'consult-dir)
#+END_SRC

** embark - Actions
[[https://github.com/oantolin/embark][embark (GitHub)]]

While listed under the /Minibuffer/ heading, embark isn't limited to the
minibuffer.

#+BEGIN_SRC emacs-lisp
  (use-package embark
    :straight t
    :bind
    ("C-&" . embark-act)
    :preface
    (defun koek-mbrk/visit-with-app (uri id)
      (interactive
       (let* ((uri (read-string "URI: "))
              (id (koek-xde/read-id (format "Visit `%s' with: " uri))))
         (list uri id)))
      (koek-xde/launch id uri))

    (defun koek-mbrk/visit-with-file-manager (uri)
      (interactive "DDirectory: ")
      (unless (file-directory-p uri)
        (user-error "Not a directory"))
      (koek-xde/launch koek-xde/file-manager-id uri))

    (defun koek-mbrk/visit-with-browser (uri)
      (interactive "sURI: ")
      (unless (koek-subr/urip uri)
        (user-error "Not a URI"))
      (koek-xde/launch koek-xde/browser-id uri))
    :config
    (use-package helpful
      :bind
      (:map embark-symbol-map
       ("h" . helpful-symbol)
       :map embark-become-help-map
       ("s" . helpful-symbol)
       ("v" . helpful-variable)
       ("f" . helpful-function)))

    (bind-keys
     :map embark-file-map
     ([remap koek-xde/launch-app] . koek-mbrk/visit-with-app)
     ([remap koek-xde/launch-file-manager] . koek-mbrk/visit-with-file-manager))

    (bind-keys
     :map embark-url-map
     ([remap koek-xde/launch-app] . koek-mbrk/visit-with-app)
     ([remap koek-xde/launch-browser] . koek-mbrk/visit-with-browser))

    (bind-keys
     :map embark-email-map
     ("RET" . koek-mu4e/compose-message)
     ("c" . koek-mu4e/compose-message)
     ("t" . koek-mu4e/display-messages-to)
     ("f" . koek-mu4e/display-messages-from)
     ("a" . koek-bbdb/display-email))

    (bind-keys
     :map embark-bookmark-map
     ("e" . koek-eww/jump-bookmark))

    (bind-keys
     :map embark-region-map
     ("q" . koek-web/query-region))

    (setq embark-help-key (kbd "?")))
#+END_SRC

*** embark-consult - Consult integration
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'embark-consult)
#+END_SRC

** vertico - Completion UI
[[https://github.com/minad/vertico][vertico (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight (vertico :files (:defaults "extensions/*.el"))
    :config
    (use-package consult-dir
      :bind
      (:map vertico-map
       ("C-c r" . consult-dir)))

    (use-package vertico-quick
      :bind
      (:map vertico-map
       ("C-c j" . vertico-quick-exit)))

    (setq vertico-resize t)
    (setq vertico-multiline
          (cons (propertize "\N{DOWNWARDS ARROW WITH TIP LEFTWARDS}" 'face 'vertico-multiline)
                (propertize truncate-string-ellipsis 'face 'vertico-multiline)))
    (vertico-mode))

  (use-package vertico-repeat
    :bind
    ("M-z" . vertico-repeat)
    :hook (minibuffer-setup . vertico-repeat-save))

  (use-package vertico-quick
    :defer t
    :config
    ;; Mirror avy
    (setq vertico-quick1 "qsdfjkl")
    (setq vertico-quick2 "m"))
#+END_SRC

** marginalia - Annotations
[[https://github.com/minad/marginalia][marginalia (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :straight t
    ;; embark benefits from marginalia as it tries to guess the
    ;; completion category of completion tables missing one, see
    ;; `marginalia--completion-metadata-get'
    :after (:any embark vertico)
    :preface
    (defun koek-mgnl/builtin-annotator (candidate)
      "Annotator for types with a builtin annotator.
  CANDIDATE is a string, the candidate to annotate.  Identical to
  the builtin annotator except it aligns the annotation."
      (when-let* ((annotate (alist-get 'annotation-function marginalia--metadata))
                  (annotation (funcall annotate candidate)))
        (marginalia--fields
         ((string-trim annotation)
          :truncate 1.0 :face 'completions-annotations))))
    :config
    (push '(xdg-desktop-entry . (koek-mgnl/builtin-annotator builtin none))
          marginalia-annotator-registry)
    (push '(email . (koek-mgnl/builtin-annotator builtin none))
          marginalia-annotator-registry)
    (marginalia-mode))
#+END_SRC

* Files

** dired - File manager
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :hook (dired-mode . dired-hide-details-mode)
    :config
    (autoload #'dired-dwim-target-next-visible "dired-aux")

    (use-package gnus-dired
      :bind
      (:map dired-mode-map
       ("C-c f a" . gnus-dired-attach)))

    (setq dired-dwim-target #'dired-dwim-target-next-visible)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (let* ((safe "-lAh") ; For safe switches, see `ls-lisp--insert-directory'
           (unsafe (concat safe " --group-directories-first")))
      (setq dired-listing-switches (if (executable-find "ls") unsafe safe))))

  (use-package dired-aux
    :after dired
    :config
    (setq dired-vc-rename-file t)
    (setq dired-create-destination-dirs 'ask))

  (use-package dired-x
    :after dired
    :demand t ; Install keybindings of package, :after precedes :demand
    :bind
    ("C-c f d" . dired-jump))

  (use-package ls-lisp
    :defer t
    :config
    (setq ls-lisp-dirs-first t))
#+END_SRC

*** wdired - Writable buffers
#+BEGIN_SRC emacs-lisp
  (use-package wdired
    :defer t
    :preface
    ;; wdired-mode isn't a proper mode, it doesn't define the variable
    ;; `wdired-mode' or run the hook `wdired-mode-hook' on mode disable
    (defvar wdired-mode nil)

    (defmacro koek-wdir/install-run-mode-hook (f mode-enabled)
      `(define-advice ,f (:around (f &rest args) koek-wdir/run-mode-hook)
         (let ((wdired-mode-hook nil))    ; Dynamic variable
           (apply f args))
         (let ((wdired-mode ,mode-enabled)) ; Dynamic variable
           (run-hooks 'wdired-mode-hook))))

    (koek-wdir/install-run-mode-hook wdired-change-to-wdired-mode t)
    (koek-wdir/install-run-mode-hook wdired-finish-edit nil)
    (koek-wdir/install-run-mode-hook wdired-exit nil)
    (koek-wdir/install-run-mode-hook wdired-abort-changes nil))
#+END_SRC

*** diredfl - Visualize file properties
[[https://github.com/purcell/diredfl][diredfl (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package diredfl
    :straight t
    :after dired
    :config
    (diredfl-global-mode))
#+END_SRC

** bookmark - Bookmarks
#+BEGIN_SRC emacs-lisp
  (use-package bookmark
    :bind
    (("C-x r m" . bookmark-set-no-overwrite)
     ("C-x r C-m" . bookmark-set))
    :preface
    ;; Violates handler contract, a handler must set but not select
    ;; current
    (defun koek-bmrk/handle-browse-url (bookmark)
      (browse-url (bookmark-get-filename bookmark)))

    (defvar koek-bmrk/handle-generic-url-f #'koek-bmrk/handle-browse-url)

    (defun koek-bmrk/handle-generic-url (bookmark)
      (funcall koek-bmrk/handle-generic-url-f bookmark))
    (put 'koek-bmrk/handle-generic-url 'bookmark-handler-type "Web")

    (defun koek-bmrk/generic-url-record (url &optional name)
      `(,name . ((handler . koek-bmrk/handle-generic-url)
                 (filename . ,url))))

    (defvar koek-bmrk/generic-url-history nil
      "History of generic URL titles read.")

    (defun koek-bmrk/read-generic-url (prompt)
      (require 'bookmark)
      (bookmark-maybe-load-default-file)
      (let* ((candidates (seq-filter (lambda (bookmark)
                                       (eq (bookmark-get-handler bookmark)
                                           'koek-bmrk/handle-generic-url))
                                     bookmark-alist))
             (table (koek-subr/enrich candidates
                      category 'bookmark)))
        (completing-read prompt table nil t nil 'koek-bmrk/generic-url-history)))
    :config
    (setq bookmark-default-file
          (no-littering-expand-etc-file-name "bookmark-default.el"))
    (setq bookmark-menu-confirm-deletion t)
    (setq bookmark-bmenu-file-column 40)
    (add-hook 'bookmark-bmenu-mode-hook #'koek-subr/reset-default-directory))
#+END_SRC

** recentf - Recent files
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :config
    (autoload #'find-library-name "find-func")

    (setq recentf-max-saved-items 100)

    ;; Ignore Emacs libraries
    (let ((file-names
           (list
            (rx line-start
                (literal (locate-dominating-file (find-library-name "files")
                                                 emacs-version)))
            ;; True and symbolic file name variants
            (regexp-quote (file-relative-name user-emacs-directory "~/")))))
      (setq recentf-exclude (append file-names recentf-exclude)))

    (recentf-mode))
#+END_SRC

** saveplace - Restore point on revisit
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :config
    (save-place-mode))
#+END_SRC

** view - Read only files
#+BEGIN_SRC emacs-lisp
  (setq view-read-only t)
#+END_SRC

** so-long - Problematic files
#+BEGIN_SRC emacs-lisp
  (use-package so-long
    :init
    (global-so-long-mode))
#+END_SRC

** Auto save files
Save auto-save files in =~/.emacs.d/var/auto-save/=.

#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+END_SRC

** autorevert - Revert file on external change
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :config
    (global-auto-revert-mode)
    :delight auto-revert-mode)
#+END_SRC

** Trash
Move deleted files to trash.

#+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)
#+END_SRC

** project - Projects
#+BEGIN_SRC emacs-lisp
  (use-package project
    :straight t
    :defer t
    :preface
    (defvar-local koek-proj/cache nil
      "Project cache.")

    (defun koek-proj/locate-root (&optional buffer)
      "Locate root of project for BUFFER.
  Optional BUFFER is a buffer or string, respectively the buffer or
  name of the buffer to locate the root for and defaults to the
  current buffer.

  This function is expensive.  For a potentially cheap alternative,
  see `koek-proj/get-root'."
      (let ((file-name
             (buffer-local-value
              'default-directory (get-buffer (or buffer (current-buffer))))))
        (when-let ((project (project-current nil file-name)))
          (project-root project))))

    (defun koek-proj/determine-name (file-name)
      "Determine name of project for project FILE-NAME."
      (file-name-nondirectory (directory-file-name file-name)))

    (defun koek-proj/init ()
      "Initialize project cache of current."
      (unless koek-proj/cache
        (setq koek-proj/cache
              (if-let ((file-name (koek-proj/locate-root)))
                  (list :root file-name
                        :name (koek-proj/determine-name file-name))
                'no-project))))

    (defun koek-proj/get-root ()
      "Return cached root of project for current.
  The first call in a buffer is expensive.  Subsequent calls in the
  same buffer are cheap but its results incorrect when the buffer
  is no longer part of the initial project.  For a correct
  alternative, see `koek-proj/locate-root'."
      (koek-proj/init)
      (plist-get koek-proj/cache :root))

    (defun koek-proj/get-name ()
      "Return cached name of project for current.
  The first call in a buffer is expensive.  Subsequent calls in the
  same buffer are cheap but its results incorrect when the buffer
  is no longer part of the initial project."
      (koek-proj/init)
      (plist-get koek-proj/cache :name))

    (defun koek-proj/locate-configs (name &optional buffer prompt)
      "Locate configuration files of project for BUFFER.
  Some projects contain configuration files (e.g. Makefile,
  project.clj and package.json), one in the root directory, the
  primary configuration file, and/or one or more in the child
  directories of the root directory, the secondary configuration
  files.

  NAME is a string, the name of the configuration file.  Optional
  BUFFER is a buffer or string, respectively the buffer or name of
  the buffer to locate the configuration files for and defaults to
  the current buffer.

  When optional PROMPT is truthy and the project only contains
  secondary configuration files, prompt for one.  The selected
  configuration file is sorted before the other ones.

  When the project contains both a primary configuration file and
  secondary configuration files, the primary one is sorted before
  the secondary ones."
      (let* ((root (or (koek-proj/locate-root buffer) (error "Not in a project")))
             (primary (let ((file-name (expand-file-name name root)))
                        (when (file-exists-p file-name)
                          (list file-name))))
             (secondary (file-expand-wildcards (thread-last root
                                                 (expand-file-name "*/")
                                                 (expand-file-name name)))))
        (if (and (null primary) (length> secondary 1) prompt)
            (let* ((candidates (mapcar (lambda (file-name)
                                         (cons (file-relative-name file-name root)
                                               file-name))
                                       secondary))
                   (file-name (thread-first
                                  (completing-read "Project configuration: "
                                                   candidates nil t)
                                (assoc candidates)
                                cdr)))
              (cons file-name (remove file-name secondary)))
          (append primary secondary))))

    (define-advice project-remember-project
        (:before-while (project) koek-proj/exclude-uninteresting)
      (if (bound-and-true-p recentf-mode)
          (recentf-include-p (project-root project))
        t))

    (define-advice project-prefixed-buffer-name
        (:override (mode) koek-proj/construct-project-buffer-name)
      (koek-subr/construct-earmuffed-name
       mode (koek-proj/determine-name default-directory)))

    (defun koek-proj/magit-status ()
      "Launch magit in current project.
  When not in a project, prompt for one."
      (interactive)
      (let ((default-directory            ; Dynamic variable
              (project-root (project-current 'maybe-prompt))))
        (magit-status-setup-buffer)))

    (defun koek-proj/consult-ripgrep ()
      "Launch ripgrep in current project.
  When not in a project, prompt for one."
      (interactive)
      (let ((default-directory            ; Dynamic variable
              (project-root (project-current 'maybe-prompt))))
        (consult-ripgrep)))

    (defun koek-proj/vterm (&optional arg)
      "Launch or switch to a vterm session in current project.
  With numeric prefix argument ARG, launch or switch to a numbered
  vterm session.  With `\\[universal-argument]' prefix argument
  ARG, launch a new vterm session.  When not in a project, prompt
  for one."
      (interactive "P")
      ;; Dynamic variables
      (defvar vterm-buffer-name)
      (let* ((default-directory (project-root (project-current 'maybe-prompt)))
             (vterm-buffer-name (project-prefixed-buffer-name "vterm")))
        (vterm arg)))

    ;; `project-eshell' doesn't launch or switch to numbered eshell
    ;; sessions
    (defun koek-proj/eshell (&optional arg)
      "Launch or switch to an eshell session in current project.
  With numeric prefix argument ARG, launch or switch to a numbered
  eshell session.  With `\\[universal-argument]' prefix argument
  ARG, launch a new eshell session.  When not in a project, prompt
  for one."
      (interactive "P")
      ;; Dynamic variables
      (defvar eshell-buffer-name)
      (let* ((default-directory (project-root (project-current 'maybe-prompt)))
             (eshell-buffer-name (project-prefixed-buffer-name "eshell")))
        (eshell arg)))
    :config
    (use-package consult
      :bind
      (:map project-prefix-map
       ("b" . consult-project-buffer)))

    (bind-keys
     :map project-prefix-map
     ("m" . koek-proj/magit-status)
     ("s" . koek-proj/consult-ripgrep)
     ("t" . koek-proj/vterm)
     ("e" . koek-proj/eshell))

    (setq project-compilation-buffer-name-function #'project-prefixed-buffer-name)
    (setq project-switch-commands
          '((project-find-file "Find file")
            (project-dired "Dired")
            (project-find-dir "Find directory")
            (consult-project-buffer "Buffer")
            (koek-proj/magit-status "Magit")
            (koek-proj/consult-ripgrep "Ripgrep")
            (koek-proj/vterm "Vterm")
            (koek-proj/eshell "Eshell"))))
#+END_SRC

** find-func - Library files
#+BEGIN_SRC emacs-lisp
  (use-package find-func
    :bind
    ("C-c f l" . find-library))
#+END_SRC

** vc - Version control
VC is a placeholder.

#+BEGIN_SRC emacs-lisp
  (use-package vc-hooks
    :defer t
    :config
    (setq vc-follow-symlinks t))
#+END_SRC

*** diff-hl - Show changes
[[https://github.com/dgutov/diff-hl][diff-hl (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :straight t
    :bind
    ("C-c a c" . diff-hl-mode)            ; [C]hanges
    :config
    (setq diff-hl-draw-borders nil))
#+END_SRC

** magit - Git
[[https://github.com/magit/magit][magit (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package magit-mode
    :straight magit
    :bind
    ("C-c f C-m" . magit-dispatch)
    :config
    (setq magit-buffer-name-format "*%M%V: %t*")
    (setq magit-display-buffer-function #'display-buffer)
    (setq magit-bury-buffer-function #'quit-window))

  (use-package magit-status
    :bind
    ("C-c f m" . magit-status))

  (use-package magit-files
    :bind
    ("C-c f M-m" . magit-file-dispatch))

  (use-package magit-diff
    :defer t
    :config
    (setq magit-diff-refine-hunk t))

  (use-package magit-blame
    :defer t
    :config
    (setq magit-blame-styles
          '((margin (margin-format    . ("%s%f" "%C %a" "%H" ""))
                    (margin-width     . 40)
                    (margin-face      . magit-blame-margin)
                    (margin-body-face . (magit-blame-dimmed)))
            (heading (heading-format . "%C %-20a %s\n"))
            (line (show-message . t)
                  (show-lines   . t))))
    (setq magit-blame-echo-style 'line))

  (use-package transient
    :defer t
    :preface
    (defvar koek-ml/transient-format)

    (defvar koek-tsnt/old-mode-line-format nil)

    (defun koek-tsnt/setup-mode-line ()
      (when (featurep 'koek-ml)
        (if koek-ml-mode
            (progn
              (unless (eq transient-mode-line-format koek-ml/transient-format)
                (setq koek-tsnt/old-mode-line-format transient-mode-line-format))
              (setq transient-mode-line-format koek-ml/transient-format))
          (setq transient-mode-line-format koek-tsnt/old-mode-line-format)
          (setq koek-tsnt/old-mode-line-format nil))))
    :config
    (koek-tsnt/setup-mode-line)
    (add-hook 'koek-ml-mode-hook #'koek-tsnt/setup-mode-line))

  (use-package git-commit
    :defer t
    :preface
    (defun koek-git/check-spelling (force)
      "Check spelling of commit message.
  When FORCE is truthy, unconditionally continue commit."
      (let ((tick (buffer-chars-modified-tick))
            (result
             (let ((ispell-skip-region-alist ; Dynamic variable
                    (cons (list (rx line-start "#") #'forward-line) ; Comment
                          ispell-skip-region-alist)))
               (ispell-buffer))))
        (cond
         (force
          t)
         ;; When spell check was completed, result is truthy
         (result
          ;; When nothing was corrected, character tick counter is
          ;; unchanged
          (or (= (buffer-chars-modified-tick) tick)
              (y-or-n-p "Spelling checked.  Commit? "))))))
    :config
    (add-hook 'git-commit-finish-query-functions #'koek-git/check-spelling))
#+END_SRC

** ediff - Diff viewer
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :bind
    (("C-c f e" . ediff-files)
     ("C-c f C-e" . ediff-current-file)
     ("C-c f M-e" . ediff-buffers)))

  (use-package ediff-init
    :defer t
    :preface
    (defun koek-diff/unnarrow-unfold ()
      "Unnarrow and unfold current."
      (widen)
      (cond
       ((derived-mode-p 'org-mode)
        (org-fold-show-all))
       ((bound-and-true-p outline-minor-mode)
        (outline-show-all))))
    :config
    (add-hook 'ediff-prepare-buffer-hook #'koek-diff/unnarrow-unfold))

  (use-package ediff-mult
    :defer t
    :config
    (add-hook 'ediff-meta-mode-hook #'koek-subr/reset-default-directory))

  (use-package ediff-util
    :defer t
    :preface
    ;; `ediff-before-setup-hook' is too early, the control buffer isn't
    ;; yet created. `ediff-startup-hook' is too late, the window
    ;; configuration was already altered.
    (define-advice ediff-setup
        (:around (f &rest args) koek-diff/setup-restore-window-config)
      (let ((config (current-window-configuration))
            (control-buffer (apply f args)))
        (with-current-buffer control-buffer
          (add-hook 'ediff-quit-hook
                    (lambda ()
                      (set-window-configuration config))
                    'append 'local))
        control-buffer)))

  (use-package ediff-wind
    :defer t
    :config
    (setq ediff-grab-mouse nil)
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)
    (setq ediff-split-window-function #'split-window-right))
#+END_SRC

* Editor

** isearch - Search for occurrences
#+BEGIN_SRC emacs-lisp
  (use-package isearch
    :defer t
    :config
    (setq isearch-wrap-pause nil)
    (setq isearch-repeat-on-direction-change t)
    (setq isearch-lazy-count t))
#+END_SRC

*** isearch-mb - Alternative UI
[[https://github.com/astoff/isearch-mb][isearch-mb (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package isearch-mb
    :straight t
    :after isearch
    :config
    (isearch-mb-mode))
#+END_SRC

** wgrep - Writable grep buffers
[[https://github.com/mhayashi1120/Emacs-wgrep][wgrep (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :straight t
    :after grep
    :preface
    ;; wgrep-mode isn't a proper mode, it doesn't define the variable
    ;; `wgrep-mode' or the hook `wgrep-mode-hook'
    (defvar wgrep-mode nil)
    (defvar wgrep-mode-hook nil)

    (defmacro koek-wgrp/install-run-mode-hook (f mode-enabled)
      `(define-advice ,f (:around (f &rest args) koek-wgrp/run-mode-hook)
         (let ((wgrep-mode ,mode-enabled)) ; Dynamic variable
           (apply f args)
           (run-hooks 'wgrep-mode-hook))))

    (koek-wgrp/install-run-mode-hook wgrep-change-to-wgrep-mode t)
    (koek-wgrp/install-run-mode-hook wgrep-finish-edit nil)
    (koek-wgrp/install-run-mode-hook wgrep-exit nil)
    (koek-wgrp/install-run-mode-hook wgrep-abort-changes nil)
    :config
    (setq wgrep-enable-key (kbd "C-x C-q")))
#+END_SRC

** avy - Jump to visible position
[[https://github.com/abo-abo/avy][avy (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :straight t
    :bind
    (("C-c j j" . avy-goto-char-timer)
     ([remap goto-line] . avy-goto-line))
    :config
    (setq avy-all-windows nil)
    (setq avy-all-windows-alt 'all-frames)
    (setq avy-keys '(?q ?s ?d ?f ?j ?k ?l ?m))
    (setq avy-dispatch-alist nil)
    ;; Hints can touch, making it difficult to identify individual ones.
    ;; Style all hint characters identical except the first one.
    (setq avy-lead-faces
          '(avy-lead-face
            avy-lead-face-1
            avy-lead-face-1
            avy-lead-face-1
            avy-lead-face-1)))
#+END_SRC

*** link-hint - Jump to visible link
[[https://github.com/noctuid/link-hint.el][link-hint (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package link-hint
    :straight t
    :bind
    (("C-c j l" . link-hint-open-link)
     ("C-c j C-l" . link-hint-copy-link)))
#+END_SRC

** Return to marked positions
When popping mark, skip consecutive identical marks. The idea is from
[[https://endlessparentheses.com/faster-pop-to-mark-command.html][Faster pop-to-mark command (Endless Parentheses)]].

#+BEGIN_SRC emacs-lisp
  (define-advice pop-to-mark-command (:around (f) koek-mark/ensure-move)
    (let ((start (point))
          (n (length mark-ring)))
      ;; Move point to current mark
      (funcall f)
      ;; Move point to previous marks in mark ring
      (while (and (= (point) start) (> n 0))
        (funcall f)
        (setq n (1- n)))))
#+END_SRC

** Narrow commands
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-advice narrow-to-region (:after (&rest _args) koek-nrrw/deactivate-mark)
    (deactivate-mark))
#+END_SRC

** sort - Sort occurrences
#+BEGIN_SRC emacs-lisp
  (use-package sort
    :bind
    (("C-c e s" . sort-lines)
     ("C-c e k" . delete-duplicate-lines)))
#+END_SRC

** align - Align occurrences
#+BEGIN_SRC emacs-lisp
  (use-package align
    :bind
    ("C-c e a" . align-regexp))
#+END_SRC

** undo-tree - Undo and redo replacement
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :straight t
    :bind
    (:map undo-tree-mode-map
     ("M-/" . undo-tree-redo))
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-auto-save-history nil)
    :delight)
#+END_SRC

** ispell - Spell checker
#+BEGIN_SRC emacs-lisp
  (use-package ispell
    :bind
    ("C-c e d" . ispell-change-dictionary)
    :config
    (setq ispell-program-name "hunspell")
    (let ((dictionary-name "en_US"))
      ;; On Windows, Hunspell expects the DICTIONARY environment
      ;; variable to be set
      (when (eq system-type 'windows-nt)
        (setenv "DICTIONARY" dictionary-name))
      (setq ispell-dictionary dictionary-name)))
#+END_SRC

*** Spell checking contractions fails :issue:setup:
Visit the dictionary's affix file. On Arch Linux, affix files are
stored in =/usr/share/hunspell/=. Add:

#+BEGIN_SRC fundamental
  ICONV 1
  ICONV ’ '
  WORDCHARS '’
#+END_SRC

For more information, see =man 5 hunspell=.

** display-line-numbers - Show line numbers
#+BEGIN_SRC emacs-lisp
  (use-package display-line-numbers
    :bind ("C-c a n" . display-line-numbers-mode)) ; Line [n]umbers
#+END_SRC

** olivetti - Show margins
[[https://github.com/rnkn/olivetti][olivetti (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :straight t
    :bind
    ("C-c a m" . olivetti-mode)           ; [M]argins
    :config
    (setq olivetti-body-width (round (* 80 1.25)))
    :delight)
#+END_SRC

** display-fill-column-indicator - Show right margin
#+BEGIN_SRC emacs-lisp
  (use-package display-fill-column-indicator
    :bind
    ("C-c a r" . display-fill-column-indicator-mode) ; [R]ight margin
    :preface
    (defvar koek-fi/column 80
      "Column in which to draw the indicator.")

    (defun koek-fi/setup-indicator ()
      "Setup indicator in current."
      (setq display-fill-column-indicator-column koek-fi/column))
    :init
    ;; Setup then enable. `add-hook' adds to the front. The reverse has
    ;; no effect.
    (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
    (add-hook 'prog-mode-hook #'koek-fi/setup-indicator)
    (add-hook 'conf-mode-hook #'display-fill-column-indicator-mode)
    (add-hook 'conf-mode-hook #'koek-fi/setup-indicator))
#+END_SRC

** face-remap - Remap faces
#+BEGIN_SRC emacs-lisp
  (use-package face-remap
    :hook ((markdown-mode org-mode) . variable-pitch-mode)
    :delight buffer-face-mode)
#+END_SRC

** goto-addr - Emphasize URIs
#+BEGIN_SRC emacs-lisp
  (use-package goto-addr
    :hook ((prog-mode conf-mode) . goto-address-prog-mode)
    :config
    (setq goto-address-mail-face goto-address-url-face)
    (setq goto-address-mail-mouse-face goto-address-url-mouse-face))
#+END_SRC

** visible - Show hidden
#+BEGIN_SRC emacs-lisp
  (bind-key "C-c a h" #'visible-mode)     ; [H]idden
#+END_SRC

** hl-line - Highlight current line
#+BEGIN_SRC emacs-lisp
  (use-package hl-line
    :bind ("C-c a l" . hl-line-mode))     ; [L]ine
#+END_SRC

*** lin - Alternative line style
[[https://git.sr.ht/~protesilaos/lin][lin (sourcehut)]]

#+BEGIN_SRC emacs-lisp
  (use-package lin
    :straight t
    :hook
    ((ibuffer-mode embark-collect-mode dired-mode bookmark-bmenu-mode
      git-rebase-mode occur-mode grep-mode proced-mode mu4e-headers-mode
      elfeed-search-mode bongo-playlist-mode)
     . lin-mode)
    :preface
    (defun koek-lin/reconfigure-for-wdired ()
      "Reconfigure lin for use with wdired.
  When wdired is enabled, disable lin, else, enable lin."
      (lin-mode (if wdired-mode 0 1)))

    (defun koek-lin/reconfigure-for-wgrep ()
      "Reconfigure lin for use with wgrep.
  When wgrep is enabled, disable lin, else, enable lin."
      (lin-mode (if wgrep-mode 0 1)))
    :config
    (setq lin-face 'lin-blue-override-fg)
    (add-hook 'wdired-mode-hook #'koek-lin/reconfigure-for-wdired)
    (add-hook 'wgrep-mode-hook #'koek-lin/reconfigure-for-wgrep))
#+END_SRC

* Constructs

** expand-region - Mark increasingly larger construct
[[https://github.com/magnars/expand-region.el][expand-region (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :straight t
    :bind
    ("C-S-SPC" . er/expand-region)
    :config
    (setq expand-region-smart-cursor t))
#+END_SRC

** Words

*** Word case commands
Upgrade case commands.

#+BEGIN_SRC emacs-lisp
  (bind-keys
   ([remap downcase-word]   . downcase-dwim)
   ([remap upcase-word]     . upcase-dwim)
   ([remap capitalize-word] . capitalize-dwim))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun koek-word/title-case-region (begin end)
    (interactive "r")
    (save-excursion
      (let ((title (buffer-substring-no-properties begin end)))
        (delete-region begin end)
        (insert (koek-subr/title-case title)))))

  (bind-key "C-c e t" #'koek-word/title-case-region)
#+END_SRC

*** subword - Recognize words in camel case words
#+BEGIN_SRC emacs-lisp
  (use-package subword
    :hook
    ((prog-mode conf-mode eshell-mode comint-mode cider-repl-mode indium-repl-mode)
     . subword-mode)
    :delight)
#+END_SRC

*** Word motion commands
Unlike ~forward-to-word~ and ~backward-to-word~, ~koek-word/next-word~ and
~koek-word/previous-word~ recognize [[*subword - Recognize words in camel case words][subwords]].

#+BEGIN_SRC emacs-lisp
  (defun koek-word/next (&optional arg)
    "Move point to beginning of next word, repeat ARG times.
  Optional ARG is an integer and defaults to one.  When ARG is
  negative, move point to ending of previous word."
    (interactive "p")
    (unless arg
      (setq arg 1))
    (unless (= arg 0)
      (let ((step (/ arg (abs arg))))
        (when (or (and (> step 0) (looking-at (rx word)))
                  (and (< step 0)
                       (looking-back (rx word) (max (1- (point)) (point-min)))))
          (forward-word step))
        (forward-word (- arg step))
        (when (forward-word step)
          (backward-word step)))))

  (defun koek-word/previous (&optional arg)
    "Move point to ending of previous word, repeat ARG times.
  Optional ARG is an integer and defaults to one.  When ARG is
  negative, move point to beginning of next word."
    (interactive "p")
    (koek-word/next (- (or arg 1))))

  (bind-keys
   ("M-n" . koek-word/next)
   ("M-p" . koek-word/previous))
#+END_SRC

** Lines

*** visual-line - Wrapped lines
#+BEGIN_SRC emacs-lisp
  (delight 'visual-line-mode nil 'simple)
#+END_SRC

*** auto-fill - Break long lines
#+BEGIN_SRC emacs-lisp
  (add-hook 'koek-txt/confident-hook #'auto-fill-mode)
  (delight 'auto-fill-function nil 'simple)
#+END_SRC

** Expressions

*** smartparens - Pairs and symbolic expressions
[[https://github.com/Fuco1/smartparens][smartparens (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :straight t
    :bind
    (:map smartparens-mode-map
     ("C-M-f" . sp-forward-sexp)
     ("C-M-b" . sp-backward-sexp)
     ("C-M-n" . sp-next-sexp)
     ("C-M-p" . sp-previous-sexp)
     ("C-M-a" . sp-beginning-of-sexp)
     ("C-M-e" . sp-end-of-sexp)
     ("C-M-d" . sp-down-sexp)
     ("C-M-u" . sp-up-sexp)
     ("C-S-d" . sp-backward-down-sexp)
     ("C-S-u" . sp-backward-up-sexp)
     ("C-M-t" . sp-transpose-sexp)
     ("C-M-(" . sp-split-sexp)
     ("C-M-<right>" . sp-forward-slurp-sexp)
     ("C-M-<left>"  . sp-forward-barf-sexp)
     ("C-S-<left>"  . sp-backward-slurp-sexp)
     ("C-S-<right>" . sp-backward-barf-sexp)
     ("C-M-<down>"  . sp-unwrap-sexp)
     ("C-M-w" . sp-copy-sexp)
     ("C-M-k" . sp-kill-sexp))
    :hook
    (((prog-mode conf-mode eshell-mode comint-mode cider-repl-mode indium-repl-mode)
      . smartparens-mode)
     (smartparens-mode . show-smartparens-mode))
    :preface
    (defun koek-sp/separate-sexp (open-delimiter action _context)
      "Separate just inserted sexp from previous and/or next sexp.
  OPEN-DELIMITER is a string, the inserted delimiter.  ACTION is a
  symbol, the performed action, see `sp-pair'."
      (when (and (eq action 'insert)
                 ;; Outer context, _context is inner context
                 (save-excursion
                   (search-backward open-delimiter)
                   (eq (sp--get-context) 'code)))
        (save-excursion
          (search-backward open-delimiter)
          (unless (looking-back (rx (or (any "#'`,~@([{" blank) line-start))
                                (max (1- (point)) (point-min)))
            (insert " "))
          (search-forward open-delimiter)
          (search-forward (sp-get-pair open-delimiter :close))
          (unless (looking-at (rx (or (any ")]}" blank) line-end)))
            (insert " ")))))

    (defun koek-sp/install-separate-sexp-handler (mode &rest open-delimiters)
      "Install separate-sexp handler in MODE for OPEN-DELIMITERS.
  MODE is a symbol, the mode to install handler in.
  OPEN-DELIMITERS are one or more strings, the delimiters to
  install handler for."
      (dolist (delimiter open-delimiters)
        (sp-local-pair mode delimiter nil
                       :post-handlers '(:add koek-sp/separate-sexp))))

    (defun koek-sp/format-c-block (open-delimiter action _context)
      "Format just inserted multiple line C block.
  OPEN-DELIMITER is a string, the inserted delimiter.  ACTION is a
  symbol, the performed action, see `sp-pair'."
      (when (and (eq action 'insert)
                 (save-excursion
                   (search-backward open-delimiter)
                   (eq (sp--get-context) 'code)))
        (save-excursion
          (insert "\n")
          (indent-according-to-mode))
        (indent-according-to-mode)))

    (defun koek-sp/install-format-c-block-on-return-handler
        (mode &rest open-delimiters)
      "Install format-c-block handler in MODE for OPEN-DELIMITERS.
  MODE is a symbol, the mode to install handler in.
  OPEN-DELIMITERS are one or more strings, the delimiters to
  install handler for."
      (dolist (delimiter open-delimiters)
        (sp-local-pair mode delimiter nil
                       ;; For event names, see `single-key-description'
                       :post-handlers '(:add (koek-sp/format-c-block "RET")))))
    :init
    (bind-key "C-S-w" #'append-next-kill)
    :config
    (require 'smartparens-config)

    (setq sp-navigate-interactive-always-progress-point t)
    (setq sp-navigate-reindent-after-up nil)
    (setq sp-highlight-pair-overlay nil)
    (koek-sp/install-separate-sexp-handler 'clojure-mode "(" "[" "{" "\"")
    (koek-sp/install-separate-sexp-handler 'cider-repl-mode "(" "[" "{" "\"")
    (koek-sp/install-separate-sexp-handler 'lisp-mode "(" "\"")
    (koek-sp/install-separate-sexp-handler 'emacs-lisp-mode "(" "[" "\"")
    (koek-sp/install-separate-sexp-handler 'scheme-mode "(" "\"")
    (koek-sp/install-format-c-block-on-return-handler 'c-mode "{")
    (koek-sp/install-format-c-block-on-return-handler 'c++-mode "{")
    (koek-sp/install-format-c-block-on-return-handler 'css-mode "{")
    (koek-sp/install-format-c-block-on-return-handler 'java-mode "{")
    (koek-sp/install-format-c-block-on-return-handler 'js-mode "{" "[")
    (koek-sp/install-format-c-block-on-return-handler 'json-mode "{" "[")
    (koek-sp/install-format-c-block-on-return-handler 'scad-mode "{")
    (koek-sp/install-format-c-block-on-return-handler 'python-mode "{" "[" "(")
    :delight)

  (use-package lisp
    :bind
    (("C-M-{" . beginning-of-defun)
     ("C-M-}" . end-of-defun)))
#+END_SRC

**** Smartparens and GNOME Shell keybindings conflict :issue:setup:
Run:

#+BEGIN_SRC sh
  gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-left "[]"
  gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-right "[]"
  gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-down "['<Super>Page_Down']"
#+END_SRC

*** paren-face - Dim brackets
[[https://github.com/tarsius/paren-face][paren-face (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package paren-face
    :straight t
    :hook
    ((clojure-mode cider-repl-mode lisp-mode sly-mrepl-mode emacs-lisp-mode
      lisp-interaction-mode scheme-mode geiser-repl-mode)
     . paren-face-mode)
    :config
    (setq paren-face-regexp (rx (any "()[]{}"))))
#+END_SRC

** Whitespace

*** Whitespace settings
Indent with spaces, not tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

End sentences with single space, not double spaces.

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

End files with empty line.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

*** Whitespace commands
Bind ~delete-trailing-whitespace~.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c e w" #'delete-trailing-whitespace)
#+END_SRC

*** tabify - Replace tabs with spaces and vice versa
#+BEGIN_SRC emacs-lisp
  (use-package tabify
    :bind
    (("C-c e SPC" . untabify)
     ("C-c e TAB" . tabify)))
#+END_SRC

*** ws-butler - Clean whitespace
[[https://github.com/lewang/ws-butler][ws-butler (GitHub)]]

Unlike [[*whitespace - Visualize whitespace][whitespace]]'s ~auto-cleanup~ action, which cleans whitespace from
every line, ws-butler cleans whitespace from changed lines. It doesn't
produce noisy diffs.

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :straight t
    :hook ((prog-mode conf-mode) . ws-butler-mode)
    :delight)
#+END_SRC

*** whitespace - Visualize whitespace
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :hook ((prog-mode conf-mode) . whitespace-mode)
    :config
    (setq whitespace-style '(tab-mark face tabs))
    (setq whitespace-display-mappings
          '((tab-mark ?\t [?\N{RIGHTWARDS ARROW TO BAR} ?\t])))
    :delight)
#+END_SRC

* Insights

** eglot - LSP client
[[https://github.com/joaotavora/eglot][eglot (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :straight t
    :bind
    (:map eglot-mode-map
     ("C-c e x" . eglot-code-actions)
     ("C-c e r" . eglot-rename))
    :hook
    ((c-mode c++-mode erlang-mode java-mode js-mode python-mode) . eglot-ensure)
    :preface
    (defun koek-eglt/init-clangd (root db)
      (interactive
       (let* ((root (or (koek-proj/locate-root) (user-error "Not in a project")))
              (default
                (let ((db (expand-file-name "build/compile_commands.json" root)))
                  (when (file-exists-p db)
                    db)))
              (db
               (or default
                   (expand-file-name
                    (read-file-name "Compilation database: " root nil t) root))))
         (list root db)))
      (make-symbolic-link (file-relative-name (expand-file-name db root) root)
                          (expand-file-name "compile_commands.json" root)
                          'overwrite))
    :config
    (push 'company-backends eglot-stay-out-of))
#+END_SRC

** tree-sitter - Query parse tree
[[https://github.com/ubolonton/emacs-tree-sitter][tree-sitter (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter
    :straight t
    :defer t
    :delight)

  (use-package tree-sitter-langs
    :straight t
    :after tree-sitter)

  (use-package tree-sitter-hl
    :hook ((c-mode c++-mode java-mode js-mode python-mode) . tree-sitter-hl-mode))
#+END_SRC

** xref - Jump to definition and references
#+BEGIN_SRC emacs-lisp
  (use-package xref
    :straight t
    :defer t
    :config
    (setq xref-show-xrefs-function #'consult-xref)
    (setq xref-show-definitions-function #'consult-xref)
    (add-to-list 'xref-prompt-for-identifier #'xref-find-references 'append))
#+END_SRC

** flymake - Show syntax and style errors
#+BEGIN_SRC emacs-lisp
  (use-package flymake
    :straight t
    :bind
    (:map flymake-mode-map
     ("C-c e n" . flymake-goto-next-error)
     ("C-c e p" . flymake-goto-prev-error)
     ("C-c e l" . flymake-show-buffer-diagnostics)
     ("C-c e C-l" . flymake-show-project-diagnostics))
    :hook ((clojure-mode emacs-lisp-mode) . flymake-mode)
    :config
    (setq flymake-wrap-around nil)
    :delight)

  (use-package flymake-proc
    :defer t
    :config
    (remove-hook 'flymake-diagnostic-functions #'flymake-proc-legacy-flymake))
#+END_SRC

*** flymake-kondor
[[https://github.com/turbo-cafe/flymake-kondor][flymake-kondor (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package flymake-kondor
    :straight t
    :hook (clojure-mode . flymake-kondor-setup)
    :preface
    (defun koek-kndr/init (root &optional interactive)
      (interactive
       (let ((root (or (koek-proj/locate-root) (user-error "Not in a project"))))
         (list root 'interactive)))
      (when interactive
        (message "Initializing clj-kondo..."))
      (let* ((default-directory root)     ; Dynamic variable
             (build-system
              (cond
               ((file-exists-p "project.clj")
                'lein)
               ((file-exists-p "shadow-cljs.edn")
                'shadow)
               (t
                (error
                 "No supported build system found, supported are Leiningen and shadow-cljs"))))
             (classpath
              (with-temp-buffer
                (let ((result
                       (pcase build-system
                         ('lein
                          (call-process "lein" nil '(t nil) nil "classpath"))
                         ('shadow
                          (call-process "npx" nil '(t nil) nil
                                        "shadow-cljs" "classpath")))))
                  (unless (zerop result)
                    (error "%s returned %d"
                           (pcase build-system
                             ('lein   "Leiningen")
                             ('shadow "shadow-cljs"))
                           result)))
                (buffer-substring (point-min) (point-max))))
             (result
              (progn
                (make-directory ".clj-kondo" 'no-error)
                (call-process "clj-kondo" nil nil nil
                              "--lint" classpath
                              "--parallel" "--dependencies" "--copy-configs"))))
        (unless (zerop result)
          (error "clj-kondo returned %d" result)))
      (when interactive
        (message "Initializing clj-kondo...done"))))
#+END_SRC

* Completions

** Completion settings
When line is indented, press =TAB= to complete text before point.

#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent 'complete)
#+END_SRC

** abbrev - Abbreviations
#+BEGIN_SRC emacs-lisp
  (use-package abbrev
    :hook ((sql-mode sql-interactive-mode) . abbrev-mode)
    :preface
    (defun koek-bbrv/in-code-p ()
      "Return whether point is in code."
      (null (syntax-ppss-context (syntax-ppss))))
    :delight)
#+END_SRC

** yasnippet - Snippets
[[https://github.com/joaotavora/yasnippet][yasnippet (GitHub)]]

For the major mode, see [[*YASnippet][YASnippet]].

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :hook ((text-mode prog-mode conf-mode) . yas-minor-mode)
    :preface
    ;; General
    (defun koek-ys/indent-snippet ()
      "Indent last expanded snippet.
  Snippet is between `yas-snippet-beg' and `yas-snippet-end'."
      (indent-region yas-snippet-beg yas-snippet-end))

    (defun koek-ys/complete-field (candidates)
      "Complete field from CANDIDATES.
  CANDIDATES is an alist of pretty candidate to candidate pairs."
      (cdr (assoc (yas-choose-value (mapcar #'car candidates)) candidates)))

    ;; Clojure and ClojureScript
    (defun koek-ys/determine-ns-name ()
      "Determine Clojure namespace name for current.
  Assumes source path is the root of the project."
      (let ((root (or (koek-proj/locate-root) default-directory))
            (file-name (or (buffer-file-name) (buffer-name)))
            (separator (thread-first (expand-file-name "a" "b")
                         file-relative-name
                         (substring 1 2))))
        (thread-last (file-relative-name file-name root)
          file-name-sans-extension
          (string-replace separator ".")
          (string-replace "_" "-"))))

    ;; Org and Markdown
    (defvar koek-ys/languages
      '((:ietf "de-DE" :org "de-de" :tex "ngerman"  :hun "de_DE")
        (:ietf "en-US" :org "en-us" :tex "american" :hun "en_US")
        (:ietf "fr-FR" :org "fr"    :tex "frenchb"  :hun "fr_FR")
        (:ietf "nl-BE" :org "nl"    :tex "dutch"    :hun "nl_BE"))
      "List of language specifications.
  A language specification is a plist with keys :ietf, :org, :tex
  and :hun.  :ietf is a string, an IETF language code.  :org, :tex
  and :hun are strings, the Org, LaTeX and Hunspell language
  code.")

    (defun koek-ys/lang-to-other (lang from to)
      "Translate language code LANG from scheme FROM to TO.
  FROM is a symbol, the language scheme of code LANG.  TO is a
  symbol, the language scheme to.  For language schemes, see
  `koek-ys/languages'."
      (plist-get (seq-find (lambda (spec)
                             (string-equal (plist-get spec from) lang))
                           koek-ys/languages)
                 to))

    (defun koek-ys/ietf-to-other (lang to)
      "Translate IETF language code LANG to scheme TO.
  TO is a symbol, the language scheme to, see
  `koek-ys/lang-to-other'."
      (koek-ys/lang-to-other lang :ietf to))

    (defun koek-ys/org-to-other (lang to)
      "Translate Org language code LANG to scheme TO.
  TO is a symbol, the language scheme to, see
  `koek-ys/lang-to-other'."
      (koek-ys/lang-to-other lang :org to))

    (defun koek-ys/complete-ietf ()
      "Complete IETF language code."
      (yas-choose-value (mapcar (lambda (spec)
                                  (plist-get spec :ietf))
                                koek-ys/languages)))

    (defun koek-ys/complete-org ()
      "Complete Org language code from IETF codes."
      (koek-ys/complete-field (mapcar (lambda (spec)
                                        (cons (plist-get spec :ietf)
                                              (plist-get spec :org)))
                                      koek-ys/languages)))

    (defun koek-ys/make-mkdir-result (name)
      "Return function to make result directory of current code block.
  NAME is a string, the name of the variable storing the result
  file name."
      (lambda ()
        (when-let ((file-name
                    (file-name-directory
                     (or (koek-org/get-code-block-var-value name) ""))))
          (make-directory file-name 'parents))))
    :config
    ;; Load snippets
    (yas-reload-all)

    ;; Set new snippet file snippet
    (with-temp-buffer
      (insert-file-contents
       (expand-file-name "snippet-mode/new" (car (last yas-snippet-dirs))))
      (setq yas-new-snippet-default
            (buffer-substring (re-search-forward (rx line-start "# --\n"))
                              (point-max))))
    :delight yas-minor-mode)
#+END_SRC

*** New Clojure file
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/clojure-mode/new
  # -*- mode: snippet; -*-
  # name: New Clojure file
  # key: new
  # --
  (ns ${1:`(koek-ys/determine-ns-name)`}$2)

  $0
#+END_SRC

*** New shadow-cljs configuration
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/clojure-mode/shadow
  # -*- mode: snippet; -*-
  # name: New shadow-cljs configuration
  # key: shadow
  # --
  {:source-paths ["${1:src/}"$2]
   :dependencies [$3]
   :builds {$0}}
#+END_SRC

*** shadow-cljs Node.js target
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/clojure-mode/node
  # -*- mode: snippet; -*-
  # name: shadow-cljs Node.js target
  # key: node
  # expand-env: ((yas-after-exit-snippet-hook '(koek-ys/indent-snippet)))
  # --
  :${1:node} {:target :node-script
              :output-to "${2:index}.js"
              :main ${3:$1.core/main}
              :devtools {:autoload ${4:true}}}$0
#+END_SRC

*** shadow-cljs Node.js test target
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/clojure-mode/nodet
  # -*- mode: snippet; -*-
  # name: shadow-cljs Node.js test target
  # key: nodet
  # expand-env: ((yas-after-exit-snippet-hook '(koek-ys/indent-snippet)))
  # --
  :${1:node-test} {:target :node-test
                   :output-to "${2:build/$1}.js"
                   :autorun ${3:true}}$0
#+END_SRC

*** ClojureScript
Inherit Clojure snippets.

#+BEGIN_SRC fundamental :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/clojurescript-mode/.yas-parents
  clojure-mode
#+END_SRC

*** New Emacs Lisp file
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/emacs-lisp-mode/new
  # -*- mode: snippet; -*-
  # name: New Emacs Lisp file
  # key: new
  # expand-env: ((yas-after-exit-snippet-hook '(hack-local-variables)))
  # --
  ;;; ${1:`(file-name-nondirectory (or (buffer-file-name) (buffer-name)))`} --- ${2:Short description} -*- lexical-binding: t; -*-

  ;; Copyright (C) ${3:`(format-time-string "%Y")`} ${4:`user-full-name`}

  ;; Author: ${5:`user-full-name`} <${6:`user-mail-address`}>
  ;; Keywords: ${7:keyword-1, keyword-2, keyword-n}
  ;; URL: <${8:URL}>

  ;; This file is not part of GNU Emacs.

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; ${9:Long description.}

  ;;; Code:

  $0

  (provide '${1:$(string-trim-right yas-text (rx "." (zero-or-more (not "."))))})

  ;;; $1 ends here
#+END_SRC

*** New HTML file
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/mhtml-mode/new
  # -*- mode: snippet; -*-
  # name: New HTML file
  # key: new
  # --
  <!DOCTYPE html>

  <html lang="en">
    <head>
      <meta charset="utf-8" />
      <title>${1:`(thread-first (or (buffer-file-name) (buffer-name)) file-name-base capitalize)`}</title>
      <link rel="icon" href="favicon.png" />
      <link rel="stylesheet" href="assets/common.css" />
    </head>
    <body>
      $0
    </body>
  </html>
#+END_SRC

*** New JavaScript Node.js file
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/js-mode/node
  # -*- mode: snippet; -*-
  # name: New JavaScript Node.js file
  # key: node
  # --
  /*jslint
    node
  ,*/

  "use strict";

  $0

  module.exports = {};
#+END_SRC

*** New JavaScript browser file
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/js-mode/browser
  # -*- mode: snippet; -*-
  # name: New JavaScript browser file
  # key: browser
  # --
  /*jslint
    browser
  ,*/

  (function () {
      "use strict";

      $0
  }());
#+END_SRC

*** New Markdown file
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/markdown-mode/new
  # -*- mode: snippet; -*-
  # name: New Markdown file
  # key: new
  # expand-env: ((yas-after-exit-snippet-hook '(hack-local-variables)))
  # --
  <!-- -*- ispell-local-dictionary: "${2:$(koek-ys/ietf-to-other yas-text :hun)}"; -*- -->
  ---
  title: ${1:`(file-name-base (or (buffer-file-name) (buffer-name)))`}
  lang: ${2:en-US$(koek-ys/complete-ietf)}
  ...

  # ${3:Heading}
  $0
#+END_SRC

*** New Org file
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/new
  # -*- mode: snippet; -*-
  # name: New Org file
  # key: new
  # expand-env: ((yas-after-exit-snippet-hook '(hack-local-variables)))
  # --
  # -*- ispell-local-dictionary: "${2:$(koek-ys/org-to-other yas-text :hun)}"; -*-
  ,#+TITLE: ${1:`(file-name-base (or (buffer-file-name) (buffer-name)))`}
  ,#+LANGUAGE: ${2:`(koek-ys/ietf-to-other "en-US" :org)`$(koek-ys/complete-org)}
  ,#+LATEX_CLASS_OPTIONS: [a4paper,11pt]
  ,#+LATEX_HEADER: \usepackage[${2:$(koek-ys/org-to-other yas-text :tex)}]{babel}
  ,#+LATEX_HEADER: \usepackage[margin=2cm]{geometry}

  ,* ${3:Heading}
  $0
#+END_SRC

*** Quote block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/q
  # -*- mode: snippet; -*-
  # name: Quote block
  # key: q
  # --
  ,#+BEGIN_QUOTE
  $0
  ,#+END_QUOTE
#+END_SRC

*** LaTeX math environment
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/math
  # -*- mode: snippet; -*-
  # name: LaTeX math environment
  # key: $
  # --
  \\( $0 \\)
#+END_SRC

*** LaTeX displaymath environment
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/displaymath
  # -*- mode: snippet; -*-
  # name: LaTeX displaymath environment
  # key: $$
  # --
  \\[ $0 \\]
#+END_SRC

*** Code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/s
  # -*- mode: snippet; -*-
  # name: Code block
  # key: s
  # --
  ,#+BEGIN_SRC $1
  $0
  ,#+END_SRC
#+END_SRC

*** C code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/sc
  # -*- mode: snippet; -*-
  # name: C code block
  # key: sc
  # --
  ,#+BEGIN_SRC c
  $0
  ,#+END_SRC
#+END_SRC

*** C++ code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/scpp
  # -*- mode: snippet; -*-
  # name: C++ code block
  # key: scpp
  # --
  ,#+BEGIN_SRC c++
  $0
  ,#+END_SRC
#+END_SRC

*** Java code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/sjava
  # -*- mode: snippet; -*-
  # name: Java code block
  # key: sjava
  # --
  ,#+BEGIN_SRC java
  $0
  ,#+END_SRC
#+END_SRC

*** CMake code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/scmake
  # -*- mode: snippet; -*-
  # name: CMake code block
  # key: scmake
  # --
  ,#+BEGIN_SRC cmake
  $0
  ,#+END_SRC
#+END_SRC

*** Clojure code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/sclj
  # -*- mode: snippet; -*-
  # name: Clojure code block
  # key: sclj
  # --
  ,#+BEGIN_SRC clojure
  $0
  ,#+END_SRC
#+END_SRC

*** ClojureScript code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/scljs
  # -*- mode: snippet; -*-
  # name: ClojureScript code block
  # key: scljs
  # --
  ,#+BEGIN_SRC clojurescript
  $0
  ,#+END_SRC
#+END_SRC

*** Common Lisp code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/slisp
  # -*- mode: snippet; -*-
  # name: Common Lisp code block
  # key: slisp
  # --
  ,#+BEGIN_SRC lisp
  $0
  ,#+END_SRC

#+END_SRC

*** Conf code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/sconf
  # -*- mode: snippet; -*-
  # name: Conf code block
  # key: sconf
  # --
  ,#+BEGIN_SRC conf
  $0
  ,#+END_SRC
#+END_SRC

*** Emacs Lisp code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/sel
  # -*- mode: snippet; -*-
  # name: Emacs Lisp code block
  # key: sel
  # --
  ,#+BEGIN_SRC emacs-lisp
  $0
  ,#+END_SRC
#+END_SRC

*** Erlang code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/serl
  # -*- mode: snippet; -*-
  # name: Erlang code block
  # key: serl
  # --
  ,#+BEGIN_SRC erlang
  $0
  ,#+END_SRC
#+END_SRC

*** HTML code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/shtml
  # -*- mode: snippet; -*-
  # name: HTML code block
  # key: shtml
  # --
  ,#+BEGIN_SRC mhtml
  $0
  ,#+END_SRC
#+END_SRC

*** CSS code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/scss
  # -*- mode: snippet; -*-
  # name: CSS code block
  # key: scss
  # --
  ,#+BEGIN_SRC css
  $0
  ,#+END_SRC
#+END_SRC

*** JavaScript code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/sjs
  # -*- mode: snippet; -*-
  # name: JavaScript code block
  # key: sjs
  # --
  ,#+BEGIN_SRC js
  $0
  ,#+END_SRC
#+END_SRC

*** JSON code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/sjson
  # -*- mode: snippet; -*-
  # name: JSON code block
  # key: sjson
  # --
  ,#+BEGIN_SRC json
  $0
  ,#+END_SRC
#+END_SRC

*** Make code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/smake
  # -*- mode: snippet; -*-
  # name: Make code block
  # key: smake
  # --
  ,#+BEGIN_SRC make
  $0
  ,#+END_SRC
#+END_SRC

*** Markdown code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/smd
  # -*- mode: snippet; -*-
  # name: Markdown code block
  # key: smd
  # --
  ,#+BEGIN_SRC markdown
  $0
  ,#+END_SRC
#+END_SRC

*** Meson code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/smeson
  # -*- mode: snippet; -*-
  # name: Meson code block
  # key: smeson
  # --
  ,#+BEGIN_SRC meson
  $0
  ,#+END_SRC
#+END_SRC

*** Octave code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/sm
  # -*- mode: snippet; -*-
  # name: Octave code block
  # key: sm
  # --
  ,#+BEGIN_SRC octave
  $0
  ,#+END_SRC
#+END_SRC

*** Octave plot code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/smplot
  # -*- mode: snippet; -*-
  # name: Octave plot code block
  # key: smplot
  # expand-env: ((yas-after-exit-snippet-hook (list (koek-ys/make-mkdir-result "path"))) (yas-indent-line 'fixed))
  # --
  ,#+BEGIN_SRC octave :var path="images/plot-${1:name}.png" :results file :exports results
    fig = figure('visible', 'off');
    $0fplot(@(x) [sin(x), cos(x)], [-pi, pi]);
    xlabel('x');
    ylabel('y');
    legend('sin(x)', 'cos(x)');
    saveas(fig, path);
    ans = path;
  ,#+END_SRC
#+END_SRC

*** OpenSCAD code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/sscad
  # -*- mode: snippet; -*-
  # name: OpenSCAD code block
  # key: sscad
  # --
  ,#+BEGIN_SRC scad
  $0
  ,#+END_SRC
#+END_SRC

*** Org code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/sorg
  # -*- mode: snippet; -*-
  # name: Org code block
  # key: sorg
  # --
  ,#+BEGIN_SRC org
  $0
  ,#+END_SRC
#+END_SRC

*** Python code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/spy
  # -*- mode: snippet; -*-
  # name: Python code block
  # key: spy
  # --
  ,#+BEGIN_SRC python
  $0
  ,#+END_SRC
#+END_SRC

*** Python plot code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/spyplot
  # -*- mode: snippet; -*-
  # name: Python plot code block
  # key: spyplot
  # expand-env: ((yas-after-exit-snippet-hook (list (koek-ys/make-mkdir-result "path"))) (yas-indent-line 'fixed))
  # --
  ,#+BEGIN_SRC python :var path="images/plot-${1:name}.png" :results file :exports results
    from numpy import pi, linspace, sin, cos
    from matplotlib.pyplot import subplots

    $0xs = linspace(-pi, pi)
    fig, ax = subplots()
    ax.plot(xs, sin(xs), label='sin(x)')
    ax.plot(xs, cos(xs), label='cos(x)')
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.legend()
    fig.savefig(path)
    return path
  ,#+END_SRC
#+END_SRC

*** Scheme code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/sscm
  # -*- mode: snippet; -*-
  # name: Scheme code block
  # key: sscm
  # --
  ,#+BEGIN_SRC scheme
  $0
  ,#+END_SRC
#+END_SRC

*** SQL code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/ssql
  # -*- mode: snippet; -*-
  # name: SQL code block
  # key: ssql
  # --
  ,#+BEGIN_SRC sql
  $0
  ,#+END_SRC
#+END_SRC

*** Text code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/stxt
  # -*- mode: snippet; -*-
  # name: Text code block
  # key: stxt
  # --
  ,#+BEGIN_SRC text
  $0
  ,#+END_SRC
#+END_SRC

*** Wolfram Language code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/swl
  # -*- mode: snippet; -*-
  # name: Wolfram Language code block
  # key: swl
  # --
  ,#+BEGIN_SRC wolfram
  $0
  ,#+END_SRC
#+END_SRC

*** YASnippet code block
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/org-mode/sy
  # -*- mode: snippet; -*-
  # name: YASnippet code block
  # key: sy
  # --
  ,#+BEGIN_SRC snippet
  $0
  ,#+END_SRC
#+END_SRC

*** GNU GPLv3 license
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/text-mode/gpl
  # -*- mode: snippet; -*-
  # name: GNU GPLv3 license
  # key: gpl
  # expand-env: ((yas-indent-line nil))
  # --
                      GNU GENERAL PUBLIC LICENSE
                         Version 3, 29 June 2007

   Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
   Everyone is permitted to copy and distribute verbatim copies
   of this license document, but changing it is not allowed.

                              Preamble

    The GNU General Public License is a free, copyleft license for
  software and other kinds of works.

    The licenses for most software and other practical works are designed
  to take away your freedom to share and change the works.  By contrast,
  the GNU General Public License is intended to guarantee your freedom to
  share and change all versions of a program--to make sure it remains free
  software for all its users.  We, the Free Software Foundation, use the
  GNU General Public License for most of our software; it applies also to
  any other work released this way by its authors.  You can apply it to
  your programs, too.

    When we speak of free software, we are referring to freedom, not
  price.  Our General Public Licenses are designed to make sure that you
  have the freedom to distribute copies of free software (and charge for
  them if you wish), that you receive source code or can get it if you
  want it, that you can change the software or use pieces of it in new
  free programs, and that you know you can do these things.

    To protect your rights, we need to prevent others from denying you
  these rights or asking you to surrender the rights.  Therefore, you have
  certain responsibilities if you distribute copies of the software, or if
  you modify it: responsibilities to respect the freedom of others.

    For example, if you distribute copies of such a program, whether
  gratis or for a fee, you must pass on to the recipients the same
  freedoms that you received.  You must make sure that they, too, receive
  or can get the source code.  And you must show them these terms so they
  know their rights.

    Developers that use the GNU GPL protect your rights with two steps:
  (1) assert copyright on the software, and (2) offer you this License
  giving you legal permission to copy, distribute and/or modify it.

    For the developers' and authors' protection, the GPL clearly explains
  that there is no warranty for this free software.  For both users' and
  authors' sake, the GPL requires that modified versions be marked as
  changed, so that their problems will not be attributed erroneously to
  authors of previous versions.

    Some devices are designed to deny users access to install or run
  modified versions of the software inside them, although the manufacturer
  can do so.  This is fundamentally incompatible with the aim of
  protecting users' freedom to change the software.  The systematic
  pattern of such abuse occurs in the area of products for individuals to
  use, which is precisely where it is most unacceptable.  Therefore, we
  have designed this version of the GPL to prohibit the practice for those
  products.  If such problems arise substantially in other domains, we
  stand ready to extend this provision to those domains in future versions
  of the GPL, as needed to protect the freedom of users.

    Finally, every program is threatened constantly by software patents.
  States should not allow patents to restrict development and use of
  software on general-purpose computers, but in those that do, we wish to
  avoid the special danger that patents applied to a free program could
  make it effectively proprietary.  To prevent this, the GPL assures that
  patents cannot be used to render the program non-free.

    The precise terms and conditions for copying, distribution and
  modification follow.

                         TERMS AND CONDITIONS

    0. Definitions.

    "This License" refers to version 3 of the GNU General Public License.

    "Copyright" also means copyright-like laws that apply to other kinds of
  works, such as semiconductor masks.

    "The Program" refers to any copyrightable work licensed under this
  License.  Each licensee is addressed as "you".  "Licensees" and
  "recipients" may be individuals or organizations.

    To "modify" a work means to copy from or adapt all or part of the work
  in a fashion requiring copyright permission, other than the making of an
  exact copy.  The resulting work is called a "modified version" of the
  earlier work or a work "based on" the earlier work.

    A "covered work" means either the unmodified Program or a work based
  on the Program.

    To "propagate" a work means to do anything with it that, without
  permission, would make you directly or secondarily liable for
  infringement under applicable copyright law, except executing it on a
  computer or modifying a private copy.  Propagation includes copying,
  distribution (with or without modification), making available to the
  public, and in some countries other activities as well.

    To "convey" a work means any kind of propagation that enables other
  parties to make or receive copies.  Mere interaction with a user through
  a computer network, with no transfer of a copy, is not conveying.

    An interactive user interface displays "Appropriate Legal Notices"
  to the extent that it includes a convenient and prominently visible
  feature that (1) displays an appropriate copyright notice, and (2)
  tells the user that there is no warranty for the work (except to the
  extent that warranties are provided), that licensees may convey the
  work under this License, and how to view a copy of this License.  If
  the interface presents a list of user commands or options, such as a
  menu, a prominent item in the list meets this criterion.

    1. Source Code.

    The "source code" for a work means the preferred form of the work
  for making modifications to it.  "Object code" means any non-source
  form of a work.

    A "Standard Interface" means an interface that either is an official
  standard defined by a recognized standards body, or, in the case of
  interfaces specified for a particular programming language, one that
  is widely used among developers working in that language.

    The "System Libraries" of an executable work include anything, other
  than the work as a whole, that (a) is included in the normal form of
  packaging a Major Component, but which is not part of that Major
  Component, and (b) serves only to enable use of the work with that
  Major Component, or to implement a Standard Interface for which an
  implementation is available to the public in source code form.  A
  "Major Component", in this context, means a major essential component
  (kernel, window system, and so on) of the specific operating system
  (if any) on which the executable work runs, or a compiler used to
  produce the work, or an object code interpreter used to run it.

    The "Corresponding Source" for a work in object code form means all
  the source code needed to generate, install, and (for an executable
  work) run the object code and to modify the work, including scripts to
  control those activities.  However, it does not include the work's
  System Libraries, or general-purpose tools or generally available free
  programs which are used unmodified in performing those activities but
  which are not part of the work.  For example, Corresponding Source
  includes interface definition files associated with source files for
  the work, and the source code for shared libraries and dynamically
  linked subprograms that the work is specifically designed to require,
  such as by intimate data communication or control flow between those
  subprograms and other parts of the work.

    The Corresponding Source need not include anything that users
  can regenerate automatically from other parts of the Corresponding
  Source.

    The Corresponding Source for a work in source code form is that
  same work.

    2. Basic Permissions.

    All rights granted under this License are granted for the term of
  copyright on the Program, and are irrevocable provided the stated
  conditions are met.  This License explicitly affirms your unlimited
  permission to run the unmodified Program.  The output from running a
  covered work is covered by this License only if the output, given its
  content, constitutes a covered work.  This License acknowledges your
  rights of fair use or other equivalent, as provided by copyright law.

    You may make, run and propagate covered works that you do not
  convey, without conditions so long as your license otherwise remains
  in force.  You may convey covered works to others for the sole purpose
  of having them make modifications exclusively for you, or provide you
  with facilities for running those works, provided that you comply with
  the terms of this License in conveying all material for which you do
  not control copyright.  Those thus making or running the covered works
  for you must do so exclusively on your behalf, under your direction
  and control, on terms that prohibit them from making any copies of
  your copyrighted material outside their relationship with you.

    Conveying under any other circumstances is permitted solely under
  the conditions stated below.  Sublicensing is not allowed; section 10
  makes it unnecessary.

    3. Protecting Users' Legal Rights From Anti-Circumvention Law.

    No covered work shall be deemed part of an effective technological
  measure under any applicable law fulfilling obligations under article
  11 of the WIPO copyright treaty adopted on 20 December 1996, or
  similar laws prohibiting or restricting circumvention of such
  measures.

    When you convey a covered work, you waive any legal power to forbid
  circumvention of technological measures to the extent such circumvention
  is effected by exercising rights under this License with respect to
  the covered work, and you disclaim any intention to limit operation or
  modification of the work as a means of enforcing, against the work's
  users, your or third parties' legal rights to forbid circumvention of
  technological measures.

    4. Conveying Verbatim Copies.

    You may convey verbatim copies of the Program's source code as you
  receive it, in any medium, provided that you conspicuously and
  appropriately publish on each copy an appropriate copyright notice;
  keep intact all notices stating that this License and any
  non-permissive terms added in accord with section 7 apply to the code;
  keep intact all notices of the absence of any warranty; and give all
  recipients a copy of this License along with the Program.

    You may charge any price or no price for each copy that you convey,
  and you may offer support or warranty protection for a fee.

    5. Conveying Modified Source Versions.

    You may convey a work based on the Program, or the modifications to
  produce it from the Program, in the form of source code under the
  terms of section 4, provided that you also meet all of these conditions:

      a) The work must carry prominent notices stating that you modified
      it, and giving a relevant date.

      b) The work must carry prominent notices stating that it is
      released under this License and any conditions added under section
      7.  This requirement modifies the requirement in section 4 to
      "keep intact all notices".

      c) You must license the entire work, as a whole, under this
      License to anyone who comes into possession of a copy.  This
      License will therefore apply, along with any applicable section 7
      additional terms, to the whole of the work, and all its parts,
      regardless of how they are packaged.  This License gives no
      permission to license the work in any other way, but it does not
      invalidate such permission if you have separately received it.

      d) If the work has interactive user interfaces, each must display
      Appropriate Legal Notices; however, if the Program has interactive
      interfaces that do not display Appropriate Legal Notices, your
      work need not make them do so.

    A compilation of a covered work with other separate and independent
  works, which are not by their nature extensions of the covered work,
  and which are not combined with it such as to form a larger program,
  in or on a volume of a storage or distribution medium, is called an
  "aggregate" if the compilation and its resulting copyright are not
  used to limit the access or legal rights of the compilation's users
  beyond what the individual works permit.  Inclusion of a covered work
  in an aggregate does not cause this License to apply to the other
  parts of the aggregate.

    6. Conveying Non-Source Forms.

    You may convey a covered work in object code form under the terms
  of sections 4 and 5, provided that you also convey the
  machine-readable Corresponding Source under the terms of this License,
  in one of these ways:

      a) Convey the object code in, or embodied in, a physical product
      (including a physical distribution medium), accompanied by the
      Corresponding Source fixed on a durable physical medium
      customarily used for software interchange.

      b) Convey the object code in, or embodied in, a physical product
      (including a physical distribution medium), accompanied by a
      written offer, valid for at least three years and valid for as
      long as you offer spare parts or customer support for that product
      model, to give anyone who possesses the object code either (1) a
      copy of the Corresponding Source for all the software in the
      product that is covered by this License, on a durable physical
      medium customarily used for software interchange, for a price no
      more than your reasonable cost of physically performing this
      conveying of source, or (2) access to copy the
      Corresponding Source from a network server at no charge.

      c) Convey individual copies of the object code with a copy of the
      written offer to provide the Corresponding Source.  This
      alternative is allowed only occasionally and noncommercially, and
      only if you received the object code with such an offer, in accord
      with subsection 6b.

      d) Convey the object code by offering access from a designated
      place (gratis or for a charge), and offer equivalent access to the
      Corresponding Source in the same way through the same place at no
      further charge.  You need not require recipients to copy the
      Corresponding Source along with the object code.  If the place to
      copy the object code is a network server, the Corresponding Source
      may be on a different server (operated by you or a third party)
      that supports equivalent copying facilities, provided you maintain
      clear directions next to the object code saying where to find the
      Corresponding Source.  Regardless of what server hosts the
      Corresponding Source, you remain obligated to ensure that it is
      available for as long as needed to satisfy these requirements.

      e) Convey the object code using peer-to-peer transmission, provided
      you inform other peers where the object code and Corresponding
      Source of the work are being offered to the general public at no
      charge under subsection 6d.

    A separable portion of the object code, whose source code is excluded
  from the Corresponding Source as a System Library, need not be
  included in conveying the object code work.

    A "User Product" is either (1) a "consumer product", which means any
  tangible personal property which is normally used for personal, family,
  or household purposes, or (2) anything designed or sold for incorporation
  into a dwelling.  In determining whether a product is a consumer product,
  doubtful cases shall be resolved in favor of coverage.  For a particular
  product received by a particular user, "normally used" refers to a
  typical or common use of that class of product, regardless of the status
  of the particular user or of the way in which the particular user
  actually uses, or expects or is expected to use, the product.  A product
  is a consumer product regardless of whether the product has substantial
  commercial, industrial or non-consumer uses, unless such uses represent
  the only significant mode of use of the product.

    "Installation Information" for a User Product means any methods,
  procedures, authorization keys, or other information required to install
  and execute modified versions of a covered work in that User Product from
  a modified version of its Corresponding Source.  The information must
  suffice to ensure that the continued functioning of the modified object
  code is in no case prevented or interfered with solely because
  modification has been made.

    If you convey an object code work under this section in, or with, or
  specifically for use in, a User Product, and the conveying occurs as
  part of a transaction in which the right of possession and use of the
  User Product is transferred to the recipient in perpetuity or for a
  fixed term (regardless of how the transaction is characterized), the
  Corresponding Source conveyed under this section must be accompanied
  by the Installation Information.  But this requirement does not apply
  if neither you nor any third party retains the ability to install
  modified object code on the User Product (for example, the work has
  been installed in ROM).

    The requirement to provide Installation Information does not include a
  requirement to continue to provide support service, warranty, or updates
  for a work that has been modified or installed by the recipient, or for
  the User Product in which it has been modified or installed.  Access to a
  network may be denied when the modification itself materially and
  adversely affects the operation of the network or violates the rules and
  protocols for communication across the network.

    Corresponding Source conveyed, and Installation Information provided,
  in accord with this section must be in a format that is publicly
  documented (and with an implementation available to the public in
  source code form), and must require no special password or key for
  unpacking, reading or copying.

    7. Additional Terms.

    "Additional permissions" are terms that supplement the terms of this
  License by making exceptions from one or more of its conditions.
  Additional permissions that are applicable to the entire Program shall
  be treated as though they were included in this License, to the extent
  that they are valid under applicable law.  If additional permissions
  apply only to part of the Program, that part may be used separately
  under those permissions, but the entire Program remains governed by
  this License without regard to the additional permissions.

    When you convey a copy of a covered work, you may at your option
  remove any additional permissions from that copy, or from any part of
  it.  (Additional permissions may be written to require their own
  removal in certain cases when you modify the work.)  You may place
  additional permissions on material, added by you to a covered work,
  for which you have or can give appropriate copyright permission.

    Notwithstanding any other provision of this License, for material you
  add to a covered work, you may (if authorized by the copyright holders of
  that material) supplement the terms of this License with terms:

      a) Disclaiming warranty or limiting liability differently from the
      terms of sections 15 and 16 of this License; or

      b) Requiring preservation of specified reasonable legal notices or
      author attributions in that material or in the Appropriate Legal
      Notices displayed by works containing it; or

      c) Prohibiting misrepresentation of the origin of that material, or
      requiring that modified versions of such material be marked in
      reasonable ways as different from the original version; or

      d) Limiting the use for publicity purposes of names of licensors or
      authors of the material; or

      e) Declining to grant rights under trademark law for use of some
      trade names, trademarks, or service marks; or

      f) Requiring indemnification of licensors and authors of that
      material by anyone who conveys the material (or modified versions of
      it) with contractual assumptions of liability to the recipient, for
      any liability that these contractual assumptions directly impose on
      those licensors and authors.

    All other non-permissive additional terms are considered "further
  restrictions" within the meaning of section 10.  If the Program as you
  received it, or any part of it, contains a notice stating that it is
  governed by this License along with a term that is a further
  restriction, you may remove that term.  If a license document contains
  a further restriction but permits relicensing or conveying under this
  License, you may add to a covered work material governed by the terms
  of that license document, provided that the further restriction does
  not survive such relicensing or conveying.

    If you add terms to a covered work in accord with this section, you
  must place, in the relevant source files, a statement of the
  additional terms that apply to those files, or a notice indicating
  where to find the applicable terms.

    Additional terms, permissive or non-permissive, may be stated in the
  form of a separately written license, or stated as exceptions;
  the above requirements apply either way.

    8. Termination.

    You may not propagate or modify a covered work except as expressly
  provided under this License.  Any attempt otherwise to propagate or
  modify it is void, and will automatically terminate your rights under
  this License (including any patent licenses granted under the third
  paragraph of section 11).

    However, if you cease all violation of this License, then your
  license from a particular copyright holder is reinstated (a)
  provisionally, unless and until the copyright holder explicitly and
  finally terminates your license, and (b) permanently, if the copyright
  holder fails to notify you of the violation by some reasonable means
  prior to 60 days after the cessation.

    Moreover, your license from a particular copyright holder is
  reinstated permanently if the copyright holder notifies you of the
  violation by some reasonable means, this is the first time you have
  received notice of violation of this License (for any work) from that
  copyright holder, and you cure the violation prior to 30 days after
  your receipt of the notice.

    Termination of your rights under this section does not terminate the
  licenses of parties who have received copies or rights from you under
  this License.  If your rights have been terminated and not permanently
  reinstated, you do not qualify to receive new licenses for the same
  material under section 10.

    9. Acceptance Not Required for Having Copies.

    You are not required to accept this License in order to receive or
  run a copy of the Program.  Ancillary propagation of a covered work
  occurring solely as a consequence of using peer-to-peer transmission
  to receive a copy likewise does not require acceptance.  However,
  nothing other than this License grants you permission to propagate or
  modify any covered work.  These actions infringe copyright if you do
  not accept this License.  Therefore, by modifying or propagating a
  covered work, you indicate your acceptance of this License to do so.

    10. Automatic Licensing of Downstream Recipients.

    Each time you convey a covered work, the recipient automatically
  receives a license from the original licensors, to run, modify and
  propagate that work, subject to this License.  You are not responsible
  for enforcing compliance by third parties with this License.

    An "entity transaction" is a transaction transferring control of an
  organization, or substantially all assets of one, or subdividing an
  organization, or merging organizations.  If propagation of a covered
  work results from an entity transaction, each party to that
  transaction who receives a copy of the work also receives whatever
  licenses to the work the party's predecessor in interest had or could
  give under the previous paragraph, plus a right to possession of the
  Corresponding Source of the work from the predecessor in interest, if
  the predecessor has it or can get it with reasonable efforts.

    You may not impose any further restrictions on the exercise of the
  rights granted or affirmed under this License.  For example, you may
  not impose a license fee, royalty, or other charge for exercise of
  rights granted under this License, and you may not initiate litigation
  (including a cross-claim or counterclaim in a lawsuit) alleging that
  any patent claim is infringed by making, using, selling, offering for
  sale, or importing the Program or any portion of it.

    11. Patents.

    A "contributor" is a copyright holder who authorizes use under this
  License of the Program or a work on which the Program is based.  The
  work thus licensed is called the contributor's "contributor version".

    A contributor's "essential patent claims" are all patent claims
  owned or controlled by the contributor, whether already acquired or
  hereafter acquired, that would be infringed by some manner, permitted
  by this License, of making, using, or selling its contributor version,
  but do not include claims that would be infringed only as a
  consequence of further modification of the contributor version.  For
  purposes of this definition, "control" includes the right to grant
  patent sublicenses in a manner consistent with the requirements of
  this License.

    Each contributor grants you a non-exclusive, worldwide, royalty-free
  patent license under the contributor's essential patent claims, to
  make, use, sell, offer for sale, import and otherwise run, modify and
  propagate the contents of its contributor version.

    In the following three paragraphs, a "patent license" is any express
  agreement or commitment, however denominated, not to enforce a patent
  (such as an express permission to practice a patent or covenant not to
  sue for patent infringement).  To "grant" such a patent license to a
  party means to make such an agreement or commitment not to enforce a
  patent against the party.

    If you convey a covered work, knowingly relying on a patent license,
  and the Corresponding Source of the work is not available for anyone
  to copy, free of charge and under the terms of this License, through a
  publicly available network server or other readily accessible means,
  then you must either (1) cause the Corresponding Source to be so
  available, or (2) arrange to deprive yourself of the benefit of the
  patent license for this particular work, or (3) arrange, in a manner
  consistent with the requirements of this License, to extend the patent
  license to downstream recipients.  "Knowingly relying" means you have
  actual knowledge that, but for the patent license, your conveying the
  covered work in a country, or your recipient's use of the covered work
  in a country, would infringe one or more identifiable patents in that
  country that you have reason to believe are valid.

    If, pursuant to or in connection with a single transaction or
  arrangement, you convey, or propagate by procuring conveyance of, a
  covered work, and grant a patent license to some of the parties
  receiving the covered work authorizing them to use, propagate, modify
  or convey a specific copy of the covered work, then the patent license
  you grant is automatically extended to all recipients of the covered
  work and works based on it.

    A patent license is "discriminatory" if it does not include within
  the scope of its coverage, prohibits the exercise of, or is
  conditioned on the non-exercise of one or more of the rights that are
  specifically granted under this License.  You may not convey a covered
  work if you are a party to an arrangement with a third party that is
  in the business of distributing software, under which you make payment
  to the third party based on the extent of your activity of conveying
  the work, and under which the third party grants, to any of the
  parties who would receive the covered work from you, a discriminatory
  patent license (a) in connection with copies of the covered work
  conveyed by you (or copies made from those copies), or (b) primarily
  for and in connection with specific products or compilations that
  contain the covered work, unless you entered into that arrangement,
  or that patent license was granted, prior to 28 March 2007.

    Nothing in this License shall be construed as excluding or limiting
  any implied license or other defenses to infringement that may
  otherwise be available to you under applicable patent law.

    12. No Surrender of Others' Freedom.

    If conditions are imposed on you (whether by court order, agreement or
  otherwise) that contradict the conditions of this License, they do not
  excuse you from the conditions of this License.  If you cannot convey a
  covered work so as to satisfy simultaneously your obligations under this
  License and any other pertinent obligations, then as a consequence you may
  not convey it at all.  For example, if you agree to terms that obligate you
  to collect a royalty for further conveying from those to whom you convey
  the Program, the only way you could satisfy both those terms and this
  License would be to refrain entirely from conveying the Program.

    13. Use with the GNU Affero General Public License.

    Notwithstanding any other provision of this License, you have
  permission to link or combine any covered work with a work licensed
  under version 3 of the GNU Affero General Public License into a single
  combined work, and to convey the resulting work.  The terms of this
  License will continue to apply to the part which is the covered work,
  but the special requirements of the GNU Affero General Public License,
  section 13, concerning interaction through a network will apply to the
  combination as such.

    14. Revised Versions of this License.

    The Free Software Foundation may publish revised and/or new versions of
  the GNU General Public License from time to time.  Such new versions will
  be similar in spirit to the present version, but may differ in detail to
  address new problems or concerns.

    Each version is given a distinguishing version number.  If the
  Program specifies that a certain numbered version of the GNU General
  Public License "or any later version" applies to it, you have the
  option of following the terms and conditions either of that numbered
  version or of any later version published by the Free Software
  Foundation.  If the Program does not specify a version number of the
  GNU General Public License, you may choose any version ever published
  by the Free Software Foundation.

    If the Program specifies that a proxy can decide which future
  versions of the GNU General Public License can be used, that proxy's
  public statement of acceptance of a version permanently authorizes you
  to choose that version for the Program.

    Later license versions may give you additional or different
  permissions.  However, no additional obligations are imposed on any
  author or copyright holder as a result of your choosing to follow a
  later version.

    15. Disclaimer of Warranty.

    THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
  APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
  HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
  OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
  IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
  ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

    16. Limitation of Liability.

    IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
  WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
  THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
  GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
  USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
  DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
  PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
  EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGES.

    17. Interpretation of Sections 15 and 16.

    If the disclaimer of warranty and limitation of liability provided
  above cannot be given local legal effect according to their terms,
  reviewing courts shall apply local law that most closely approximates
  an absolute waiver of all civil liability in connection with the
  Program, unless a warranty or assumption of liability accompanies a
  copy of the Program in return for a fee.

                       END OF TERMS AND CONDITIONS

              How to Apply These Terms to Your New Programs

    If you develop a new program, and you want it to be of the greatest
  possible use to the public, the best way to achieve this is to make it
  free software which everyone can redistribute and change under these terms.

    To do so, attach the following notices to the program.  It is safest
  to attach them to the start of each source file to most effectively
  state the exclusion of warranty; and each file should have at least
  the "copyright" line and a pointer to where the full notice is found.

      <one line to give the program's name and a brief idea of what it does.>
      Copyright (C) <year>  <name of author>

      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.

      You should have received a copy of the GNU General Public License
      along with this program.  If not, see <https://www.gnu.org/licenses/>.

  Also add information on how to contact you by electronic and paper mail.

    If the program does terminal interaction, make it output a short
  notice like this when it starts in an interactive mode:

      <program>  Copyright (C) <year>  <name of author>
      This program comes with ABSOLUTELY NO WARRANTY; for details type \`show w'.
      This is free software, and you are welcome to redistribute it
      under certain conditions; type \`show c' for details.

  The hypothetical commands \`show w' and \`show c' should show the appropriate
  parts of the General Public License.  Of course, your program's commands
  might be different; for a GUI interface, you would use an "about box".

    You should also get your employer (if you work as a programmer) or school,
  if any, to sign a "copyright disclaimer" for the program, if necessary.
  For more information on this, and how to apply and follow the GNU GPL, see
  <https://www.gnu.org/licenses/>.

    The GNU General Public License does not permit incorporating your program
  into proprietary programs.  If your program is a subroutine library, you
  may consider it more useful to permit linking proprietary applications with
  the library.  If this is what you want to do, use the GNU Lesser General
  Public License instead of this License.  But first, please read
  <https://www.gnu.org/licenses/why-not-lgpl.html>.
#+END_SRC

*** GNU AGPLv3 license
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/text-mode/agpl
  # -*- mode: snippet; -*-
  # name: GNU AGPLv3 license
  # key: agpl
  # expand-env: ((yas-indent-line nil))
  # --
                      GNU AFFERO GENERAL PUBLIC LICENSE
                         Version 3, 19 November 2007

   Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
   Everyone is permitted to copy and distribute verbatim copies
   of this license document, but changing it is not allowed.

                              Preamble

    The GNU Affero General Public License is a free, copyleft license for
  software and other kinds of works, specifically designed to ensure
  cooperation with the community in the case of network server software.

    The licenses for most software and other practical works are designed
  to take away your freedom to share and change the works.  By contrast,
  our General Public Licenses are intended to guarantee your freedom to
  share and change all versions of a program--to make sure it remains free
  software for all its users.

    When we speak of free software, we are referring to freedom, not
  price.  Our General Public Licenses are designed to make sure that you
  have the freedom to distribute copies of free software (and charge for
  them if you wish), that you receive source code or can get it if you
  want it, that you can change the software or use pieces of it in new
  free programs, and that you know you can do these things.

    Developers that use our General Public Licenses protect your rights
  with two steps: (1) assert copyright on the software, and (2) offer
  you this License which gives you legal permission to copy, distribute
  and/or modify the software.

    A secondary benefit of defending all users' freedom is that
  improvements made in alternate versions of the program, if they
  receive widespread use, become available for other developers to
  incorporate.  Many developers of free software are heartened and
  encouraged by the resulting cooperation.  However, in the case of
  software used on network servers, this result may fail to come about.
  The GNU General Public License permits making a modified version and
  letting the public access it on a server without ever releasing its
  source code to the public.

    The GNU Affero General Public License is designed specifically to
  ensure that, in such cases, the modified source code becomes available
  to the community.  It requires the operator of a network server to
  provide the source code of the modified version running there to the
  users of that server.  Therefore, public use of a modified version, on
  a publicly accessible server, gives the public access to the source
  code of the modified version.

    An older license, called the Affero General Public License and
  published by Affero, was designed to accomplish similar goals.  This is
  a different license, not a version of the Affero GPL, but Affero has
  released a new version of the Affero GPL which permits relicensing under
  this license.

    The precise terms and conditions for copying, distribution and
  modification follow.

                         TERMS AND CONDITIONS

    0. Definitions.

    "This License" refers to version 3 of the GNU Affero General Public License.

    "Copyright" also means copyright-like laws that apply to other kinds of
  works, such as semiconductor masks.

    "The Program" refers to any copyrightable work licensed under this
  License.  Each licensee is addressed as "you".  "Licensees" and
  "recipients" may be individuals or organizations.

    To "modify" a work means to copy from or adapt all or part of the work
  in a fashion requiring copyright permission, other than the making of an
  exact copy.  The resulting work is called a "modified version" of the
  earlier work or a work "based on" the earlier work.

    A "covered work" means either the unmodified Program or a work based
  on the Program.

    To "propagate" a work means to do anything with it that, without
  permission, would make you directly or secondarily liable for
  infringement under applicable copyright law, except executing it on a
  computer or modifying a private copy.  Propagation includes copying,
  distribution (with or without modification), making available to the
  public, and in some countries other activities as well.

    To "convey" a work means any kind of propagation that enables other
  parties to make or receive copies.  Mere interaction with a user through
  a computer network, with no transfer of a copy, is not conveying.

    An interactive user interface displays "Appropriate Legal Notices"
  to the extent that it includes a convenient and prominently visible
  feature that (1) displays an appropriate copyright notice, and (2)
  tells the user that there is no warranty for the work (except to the
  extent that warranties are provided), that licensees may convey the
  work under this License, and how to view a copy of this License.  If
  the interface presents a list of user commands or options, such as a
  menu, a prominent item in the list meets this criterion.

    1. Source Code.

    The "source code" for a work means the preferred form of the work
  for making modifications to it.  "Object code" means any non-source
  form of a work.

    A "Standard Interface" means an interface that either is an official
  standard defined by a recognized standards body, or, in the case of
  interfaces specified for a particular programming language, one that
  is widely used among developers working in that language.

    The "System Libraries" of an executable work include anything, other
  than the work as a whole, that (a) is included in the normal form of
  packaging a Major Component, but which is not part of that Major
  Component, and (b) serves only to enable use of the work with that
  Major Component, or to implement a Standard Interface for which an
  implementation is available to the public in source code form.  A
  "Major Component", in this context, means a major essential component
  (kernel, window system, and so on) of the specific operating system
  (if any) on which the executable work runs, or a compiler used to
  produce the work, or an object code interpreter used to run it.

    The "Corresponding Source" for a work in object code form means all
  the source code needed to generate, install, and (for an executable
  work) run the object code and to modify the work, including scripts to
  control those activities.  However, it does not include the work's
  System Libraries, or general-purpose tools or generally available free
  programs which are used unmodified in performing those activities but
  which are not part of the work.  For example, Corresponding Source
  includes interface definition files associated with source files for
  the work, and the source code for shared libraries and dynamically
  linked subprograms that the work is specifically designed to require,
  such as by intimate data communication or control flow between those
  subprograms and other parts of the work.

    The Corresponding Source need not include anything that users
  can regenerate automatically from other parts of the Corresponding
  Source.

    The Corresponding Source for a work in source code form is that
  same work.

    2. Basic Permissions.

    All rights granted under this License are granted for the term of
  copyright on the Program, and are irrevocable provided the stated
  conditions are met.  This License explicitly affirms your unlimited
  permission to run the unmodified Program.  The output from running a
  covered work is covered by this License only if the output, given its
  content, constitutes a covered work.  This License acknowledges your
  rights of fair use or other equivalent, as provided by copyright law.

    You may make, run and propagate covered works that you do not
  convey, without conditions so long as your license otherwise remains
  in force.  You may convey covered works to others for the sole purpose
  of having them make modifications exclusively for you, or provide you
  with facilities for running those works, provided that you comply with
  the terms of this License in conveying all material for which you do
  not control copyright.  Those thus making or running the covered works
  for you must do so exclusively on your behalf, under your direction
  and control, on terms that prohibit them from making any copies of
  your copyrighted material outside their relationship with you.

    Conveying under any other circumstances is permitted solely under
  the conditions stated below.  Sublicensing is not allowed; section 10
  makes it unnecessary.

    3. Protecting Users' Legal Rights From Anti-Circumvention Law.

    No covered work shall be deemed part of an effective technological
  measure under any applicable law fulfilling obligations under article
  11 of the WIPO copyright treaty adopted on 20 December 1996, or
  similar laws prohibiting or restricting circumvention of such
  measures.

    When you convey a covered work, you waive any legal power to forbid
  circumvention of technological measures to the extent such circumvention
  is effected by exercising rights under this License with respect to
  the covered work, and you disclaim any intention to limit operation or
  modification of the work as a means of enforcing, against the work's
  users, your or third parties' legal rights to forbid circumvention of
  technological measures.

    4. Conveying Verbatim Copies.

    You may convey verbatim copies of the Program's source code as you
  receive it, in any medium, provided that you conspicuously and
  appropriately publish on each copy an appropriate copyright notice;
  keep intact all notices stating that this License and any
  non-permissive terms added in accord with section 7 apply to the code;
  keep intact all notices of the absence of any warranty; and give all
  recipients a copy of this License along with the Program.

    You may charge any price or no price for each copy that you convey,
  and you may offer support or warranty protection for a fee.

    5. Conveying Modified Source Versions.

    You may convey a work based on the Program, or the modifications to
  produce it from the Program, in the form of source code under the
  terms of section 4, provided that you also meet all of these conditions:

      a) The work must carry prominent notices stating that you modified
      it, and giving a relevant date.

      b) The work must carry prominent notices stating that it is
      released under this License and any conditions added under section
      7.  This requirement modifies the requirement in section 4 to
      "keep intact all notices".

      c) You must license the entire work, as a whole, under this
      License to anyone who comes into possession of a copy.  This
      License will therefore apply, along with any applicable section 7
      additional terms, to the whole of the work, and all its parts,
      regardless of how they are packaged.  This License gives no
      permission to license the work in any other way, but it does not
      invalidate such permission if you have separately received it.

      d) If the work has interactive user interfaces, each must display
      Appropriate Legal Notices; however, if the Program has interactive
      interfaces that do not display Appropriate Legal Notices, your
      work need not make them do so.

    A compilation of a covered work with other separate and independent
  works, which are not by their nature extensions of the covered work,
  and which are not combined with it such as to form a larger program,
  in or on a volume of a storage or distribution medium, is called an
  "aggregate" if the compilation and its resulting copyright are not
  used to limit the access or legal rights of the compilation's users
  beyond what the individual works permit.  Inclusion of a covered work
  in an aggregate does not cause this License to apply to the other
  parts of the aggregate.

    6. Conveying Non-Source Forms.

    You may convey a covered work in object code form under the terms
  of sections 4 and 5, provided that you also convey the
  machine-readable Corresponding Source under the terms of this License,
  in one of these ways:

      a) Convey the object code in, or embodied in, a physical product
      (including a physical distribution medium), accompanied by the
      Corresponding Source fixed on a durable physical medium
      customarily used for software interchange.

      b) Convey the object code in, or embodied in, a physical product
      (including a physical distribution medium), accompanied by a
      written offer, valid for at least three years and valid for as
      long as you offer spare parts or customer support for that product
      model, to give anyone who possesses the object code either (1) a
      copy of the Corresponding Source for all the software in the
      product that is covered by this License, on a durable physical
      medium customarily used for software interchange, for a price no
      more than your reasonable cost of physically performing this
      conveying of source, or (2) access to copy the
      Corresponding Source from a network server at no charge.

      c) Convey individual copies of the object code with a copy of the
      written offer to provide the Corresponding Source.  This
      alternative is allowed only occasionally and noncommercially, and
      only if you received the object code with such an offer, in accord
      with subsection 6b.

      d) Convey the object code by offering access from a designated
      place (gratis or for a charge), and offer equivalent access to the
      Corresponding Source in the same way through the same place at no
      further charge.  You need not require recipients to copy the
      Corresponding Source along with the object code.  If the place to
      copy the object code is a network server, the Corresponding Source
      may be on a different server (operated by you or a third party)
      that supports equivalent copying facilities, provided you maintain
      clear directions next to the object code saying where to find the
      Corresponding Source.  Regardless of what server hosts the
      Corresponding Source, you remain obligated to ensure that it is
      available for as long as needed to satisfy these requirements.

      e) Convey the object code using peer-to-peer transmission, provided
      you inform other peers where the object code and Corresponding
      Source of the work are being offered to the general public at no
      charge under subsection 6d.

    A separable portion of the object code, whose source code is excluded
  from the Corresponding Source as a System Library, need not be
  included in conveying the object code work.

    A "User Product" is either (1) a "consumer product", which means any
  tangible personal property which is normally used for personal, family,
  or household purposes, or (2) anything designed or sold for incorporation
  into a dwelling.  In determining whether a product is a consumer product,
  doubtful cases shall be resolved in favor of coverage.  For a particular
  product received by a particular user, "normally used" refers to a
  typical or common use of that class of product, regardless of the status
  of the particular user or of the way in which the particular user
  actually uses, or expects or is expected to use, the product.  A product
  is a consumer product regardless of whether the product has substantial
  commercial, industrial or non-consumer uses, unless such uses represent
  the only significant mode of use of the product.

    "Installation Information" for a User Product means any methods,
  procedures, authorization keys, or other information required to install
  and execute modified versions of a covered work in that User Product from
  a modified version of its Corresponding Source.  The information must
  suffice to ensure that the continued functioning of the modified object
  code is in no case prevented or interfered with solely because
  modification has been made.

    If you convey an object code work under this section in, or with, or
  specifically for use in, a User Product, and the conveying occurs as
  part of a transaction in which the right of possession and use of the
  User Product is transferred to the recipient in perpetuity or for a
  fixed term (regardless of how the transaction is characterized), the
  Corresponding Source conveyed under this section must be accompanied
  by the Installation Information.  But this requirement does not apply
  if neither you nor any third party retains the ability to install
  modified object code on the User Product (for example, the work has
  been installed in ROM).

    The requirement to provide Installation Information does not include a
  requirement to continue to provide support service, warranty, or updates
  for a work that has been modified or installed by the recipient, or for
  the User Product in which it has been modified or installed.  Access to a
  network may be denied when the modification itself materially and
  adversely affects the operation of the network or violates the rules and
  protocols for communication across the network.

    Corresponding Source conveyed, and Installation Information provided,
  in accord with this section must be in a format that is publicly
  documented (and with an implementation available to the public in
  source code form), and must require no special password or key for
  unpacking, reading or copying.

    7. Additional Terms.

    "Additional permissions" are terms that supplement the terms of this
  License by making exceptions from one or more of its conditions.
  Additional permissions that are applicable to the entire Program shall
  be treated as though they were included in this License, to the extent
  that they are valid under applicable law.  If additional permissions
  apply only to part of the Program, that part may be used separately
  under those permissions, but the entire Program remains governed by
  this License without regard to the additional permissions.

    When you convey a copy of a covered work, you may at your option
  remove any additional permissions from that copy, or from any part of
  it.  (Additional permissions may be written to require their own
  removal in certain cases when you modify the work.)  You may place
  additional permissions on material, added by you to a covered work,
  for which you have or can give appropriate copyright permission.

    Notwithstanding any other provision of this License, for material you
  add to a covered work, you may (if authorized by the copyright holders of
  that material) supplement the terms of this License with terms:

      a) Disclaiming warranty or limiting liability differently from the
      terms of sections 15 and 16 of this License; or

      b) Requiring preservation of specified reasonable legal notices or
      author attributions in that material or in the Appropriate Legal
      Notices displayed by works containing it; or

      c) Prohibiting misrepresentation of the origin of that material, or
      requiring that modified versions of such material be marked in
      reasonable ways as different from the original version; or

      d) Limiting the use for publicity purposes of names of licensors or
      authors of the material; or

      e) Declining to grant rights under trademark law for use of some
      trade names, trademarks, or service marks; or

      f) Requiring indemnification of licensors and authors of that
      material by anyone who conveys the material (or modified versions of
      it) with contractual assumptions of liability to the recipient, for
      any liability that these contractual assumptions directly impose on
      those licensors and authors.

    All other non-permissive additional terms are considered "further
  restrictions" within the meaning of section 10.  If the Program as you
  received it, or any part of it, contains a notice stating that it is
  governed by this License along with a term that is a further
  restriction, you may remove that term.  If a license document contains
  a further restriction but permits relicensing or conveying under this
  License, you may add to a covered work material governed by the terms
  of that license document, provided that the further restriction does
  not survive such relicensing or conveying.

    If you add terms to a covered work in accord with this section, you
  must place, in the relevant source files, a statement of the
  additional terms that apply to those files, or a notice indicating
  where to find the applicable terms.

    Additional terms, permissive or non-permissive, may be stated in the
  form of a separately written license, or stated as exceptions;
  the above requirements apply either way.

    8. Termination.

    You may not propagate or modify a covered work except as expressly
  provided under this License.  Any attempt otherwise to propagate or
  modify it is void, and will automatically terminate your rights under
  this License (including any patent licenses granted under the third
  paragraph of section 11).

    However, if you cease all violation of this License, then your
  license from a particular copyright holder is reinstated (a)
  provisionally, unless and until the copyright holder explicitly and
  finally terminates your license, and (b) permanently, if the copyright
  holder fails to notify you of the violation by some reasonable means
  prior to 60 days after the cessation.

    Moreover, your license from a particular copyright holder is
  reinstated permanently if the copyright holder notifies you of the
  violation by some reasonable means, this is the first time you have
  received notice of violation of this License (for any work) from that
  copyright holder, and you cure the violation prior to 30 days after
  your receipt of the notice.

    Termination of your rights under this section does not terminate the
  licenses of parties who have received copies or rights from you under
  this License.  If your rights have been terminated and not permanently
  reinstated, you do not qualify to receive new licenses for the same
  material under section 10.

    9. Acceptance Not Required for Having Copies.

    You are not required to accept this License in order to receive or
  run a copy of the Program.  Ancillary propagation of a covered work
  occurring solely as a consequence of using peer-to-peer transmission
  to receive a copy likewise does not require acceptance.  However,
  nothing other than this License grants you permission to propagate or
  modify any covered work.  These actions infringe copyright if you do
  not accept this License.  Therefore, by modifying or propagating a
  covered work, you indicate your acceptance of this License to do so.

    10. Automatic Licensing of Downstream Recipients.

    Each time you convey a covered work, the recipient automatically
  receives a license from the original licensors, to run, modify and
  propagate that work, subject to this License.  You are not responsible
  for enforcing compliance by third parties with this License.

    An "entity transaction" is a transaction transferring control of an
  organization, or substantially all assets of one, or subdividing an
  organization, or merging organizations.  If propagation of a covered
  work results from an entity transaction, each party to that
  transaction who receives a copy of the work also receives whatever
  licenses to the work the party's predecessor in interest had or could
  give under the previous paragraph, plus a right to possession of the
  Corresponding Source of the work from the predecessor in interest, if
  the predecessor has it or can get it with reasonable efforts.

    You may not impose any further restrictions on the exercise of the
  rights granted or affirmed under this License.  For example, you may
  not impose a license fee, royalty, or other charge for exercise of
  rights granted under this License, and you may not initiate litigation
  (including a cross-claim or counterclaim in a lawsuit) alleging that
  any patent claim is infringed by making, using, selling, offering for
  sale, or importing the Program or any portion of it.

    11. Patents.

    A "contributor" is a copyright holder who authorizes use under this
  License of the Program or a work on which the Program is based.  The
  work thus licensed is called the contributor's "contributor version".

    A contributor's "essential patent claims" are all patent claims
  owned or controlled by the contributor, whether already acquired or
  hereafter acquired, that would be infringed by some manner, permitted
  by this License, of making, using, or selling its contributor version,
  but do not include claims that would be infringed only as a
  consequence of further modification of the contributor version.  For
  purposes of this definition, "control" includes the right to grant
  patent sublicenses in a manner consistent with the requirements of
  this License.

    Each contributor grants you a non-exclusive, worldwide, royalty-free
  patent license under the contributor's essential patent claims, to
  make, use, sell, offer for sale, import and otherwise run, modify and
  propagate the contents of its contributor version.

    In the following three paragraphs, a "patent license" is any express
  agreement or commitment, however denominated, not to enforce a patent
  (such as an express permission to practice a patent or covenant not to
  sue for patent infringement).  To "grant" such a patent license to a
  party means to make such an agreement or commitment not to enforce a
  patent against the party.

    If you convey a covered work, knowingly relying on a patent license,
  and the Corresponding Source of the work is not available for anyone
  to copy, free of charge and under the terms of this License, through a
  publicly available network server or other readily accessible means,
  then you must either (1) cause the Corresponding Source to be so
  available, or (2) arrange to deprive yourself of the benefit of the
  patent license for this particular work, or (3) arrange, in a manner
  consistent with the requirements of this License, to extend the patent
  license to downstream recipients.  "Knowingly relying" means you have
  actual knowledge that, but for the patent license, your conveying the
  covered work in a country, or your recipient's use of the covered work
  in a country, would infringe one or more identifiable patents in that
  country that you have reason to believe are valid.

    If, pursuant to or in connection with a single transaction or
  arrangement, you convey, or propagate by procuring conveyance of, a
  covered work, and grant a patent license to some of the parties
  receiving the covered work authorizing them to use, propagate, modify
  or convey a specific copy of the covered work, then the patent license
  you grant is automatically extended to all recipients of the covered
  work and works based on it.

    A patent license is "discriminatory" if it does not include within
  the scope of its coverage, prohibits the exercise of, or is
  conditioned on the non-exercise of one or more of the rights that are
  specifically granted under this License.  You may not convey a covered
  work if you are a party to an arrangement with a third party that is
  in the business of distributing software, under which you make payment
  to the third party based on the extent of your activity of conveying
  the work, and under which the third party grants, to any of the
  parties who would receive the covered work from you, a discriminatory
  patent license (a) in connection with copies of the covered work
  conveyed by you (or copies made from those copies), or (b) primarily
  for and in connection with specific products or compilations that
  contain the covered work, unless you entered into that arrangement,
  or that patent license was granted, prior to 28 March 2007.

    Nothing in this License shall be construed as excluding or limiting
  any implied license or other defenses to infringement that may
  otherwise be available to you under applicable patent law.

    12. No Surrender of Others' Freedom.

    If conditions are imposed on you (whether by court order, agreement or
  otherwise) that contradict the conditions of this License, they do not
  excuse you from the conditions of this License.  If you cannot convey a
  covered work so as to satisfy simultaneously your obligations under this
  License and any other pertinent obligations, then as a consequence you may
  not convey it at all.  For example, if you agree to terms that obligate you
  to collect a royalty for further conveying from those to whom you convey
  the Program, the only way you could satisfy both those terms and this
  License would be to refrain entirely from conveying the Program.

    13. Remote Network Interaction; Use with the GNU General Public License.

    Notwithstanding any other provision of this License, if you modify the
  Program, your modified version must prominently offer all users
  interacting with it remotely through a computer network (if your version
  supports such interaction) an opportunity to receive the Corresponding
  Source of your version by providing access to the Corresponding Source
  from a network server at no charge, through some standard or customary
  means of facilitating copying of software.  This Corresponding Source
  shall include the Corresponding Source for any work covered by version 3
  of the GNU General Public License that is incorporated pursuant to the
  following paragraph.

    Notwithstanding any other provision of this License, you have
  permission to link or combine any covered work with a work licensed
  under version 3 of the GNU General Public License into a single
  combined work, and to convey the resulting work.  The terms of this
  License will continue to apply to the part which is the covered work,
  but the work with which it is combined will remain governed by version
  3 of the GNU General Public License.

    14. Revised Versions of this License.

    The Free Software Foundation may publish revised and/or new versions of
  the GNU Affero General Public License from time to time.  Such new versions
  will be similar in spirit to the present version, but may differ in detail to
  address new problems or concerns.

    Each version is given a distinguishing version number.  If the
  Program specifies that a certain numbered version of the GNU Affero General
  Public License "or any later version" applies to it, you have the
  option of following the terms and conditions either of that numbered
  version or of any later version published by the Free Software
  Foundation.  If the Program does not specify a version number of the
  GNU Affero General Public License, you may choose any version ever published
  by the Free Software Foundation.

    If the Program specifies that a proxy can decide which future
  versions of the GNU Affero General Public License can be used, that proxy's
  public statement of acceptance of a version permanently authorizes you
  to choose that version for the Program.

    Later license versions may give you additional or different
  permissions.  However, no additional obligations are imposed on any
  author or copyright holder as a result of your choosing to follow a
  later version.

    15. Disclaimer of Warranty.

    THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
  APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
  HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
  OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
  IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
  ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

    16. Limitation of Liability.

    IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
  WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
  THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
  GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
  USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
  DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
  PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
  EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGES.

    17. Interpretation of Sections 15 and 16.

    If the disclaimer of warranty and limitation of liability provided
  above cannot be given local legal effect according to their terms,
  reviewing courts shall apply local law that most closely approximates
  an absolute waiver of all civil liability in connection with the
  Program, unless a warranty or assumption of liability accompanies a
  copy of the Program in return for a fee.

                       END OF TERMS AND CONDITIONS

              How to Apply These Terms to Your New Programs

    If you develop a new program, and you want it to be of the greatest
  possible use to the public, the best way to achieve this is to make it
  free software which everyone can redistribute and change under these terms.

    To do so, attach the following notices to the program.  It is safest
  to attach them to the start of each source file to most effectively
  state the exclusion of warranty; and each file should have at least
  the "copyright" line and a pointer to where the full notice is found.

      <one line to give the program's name and a brief idea of what it does.>
      Copyright (C) <year>  <name of author>

      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU Affero General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.

      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Affero General Public License for more details.

      You should have received a copy of the GNU Affero General Public License
      along with this program.  If not, see <https://www.gnu.org/licenses/>.

  Also add information on how to contact you by electronic and paper mail.

    If your software can interact with users remotely through a computer
  network, you should also make sure that it provides a way for users to
  get its source.  For example, if your program is a web application, its
  interface could display a "Source" link that leads users to an archive
  of the code.  There are many ways you could offer source, and different
  solutions will be better for different programs; see section 13 for the
  specific requirements.

    You should also get your employer (if you work as a programmer) or school,
  if any, to sign a "copyright disclaimer" for the program, if necessary.
  For more information on this, and how to apply and follow the GNU AGPL, see
  <https://www.gnu.org/licenses/>.
#+END_SRC

*** MIT license
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/text-mode/mit
  # -*- mode: snippet; -*-
  # name: MIT license
  # key: mit
  # expand-env: ((yas-indent-line nil))
  # --
  MIT License

  Copyright (c) ${1:`(format-time-string "%Y")`} ${2:`user-full-name`}

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.$0
#+END_SRC

*** New snippet file
#+BEGIN_SRC snippet :tangle stow/emacs/.config/emacs/etc/yasnippet/snippets/snippet-mode/new
  # -*- mode: snippet; -*-
  # name: New snippet file
  # key: new
  # --
  # -*- mode: snippet; -*-
  # name: ${1:Snippet name}
  # key: ${2:`(let ((buffer-name (buffer-name))) (if (or (string-equal buffer-name yas-new-snippet-buffer-name) (string-match (rx "*org-src: " (one-or-more not-newline) "*") buffer-name)) "key" buffer-name))`}
  # --
  $0
#+END_SRC

** company - Inline completion UI
[[https://github.com/company-mode/company-mode][company (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :bind
    (:map company-mode-map
     ;; TAB or C-i (terminal)
     ([remap indent-for-tab-command] . company-indent-or-complete-common)
     ;; M-TAB or C-M-i (terminal)
     ([remap completion-at-point] . company-complete-common)
     :map company-active-map
     ("C-n" . company-select-next)
     ("C-p" . company-select-previous))
    :hook ((prog-mode conf-mode comint-mode cider-repl-mode) . company-mode)
    :preface
    (defmacro koek-cpny/set-backends (modes backends)
      "Set BACKENDS in MODES.
  MODES is a list of symbols, the modes to set backends in.
  BACKENDS evaluates to a list of backends, the backends to set,
  see `company-backends'."
      (declare (indent 1))
      (let ((value-sym (gensym)))
        `(let ((,value-sym ,backends))
           ,@(seq-mapcat
              (lambda (mode)
                (let* ((prefix "koek-cpny/")
                       (mode-name (symbol-name mode))
                       (backends-sym (koek-subr/intern
                                      prefix mode-name "-backends"))
                       (f-sym (koek-subr/intern
                               prefix "setup-" mode-name "-backends"))
                       (hook-sym (koek-subr/intern mode-name "-hook")))
                  `((defvar ,backends-sym (copy-tree ,value-sym)
                      ,(format "List of backends in `%s'." mode))

                    (defun ,f-sym ()
                      ,(format "Setup backends in `%s'." mode)
                      (setq-local company-backends ,backends-sym))

                    (add-hook ',hook-sym #',f-sym))))
              modes))))

    (koek-cpny/set-backends (indium-repl-mode)
      '((company-indium-repl company-files :with company-yasnippet)))
    (koek-cpny/set-backends (geiser-mode geiser-repl-mode)
      '((geiser-company-backend company-files :with company-yasnippet)))
    (koek-cpny/set-backends (cmake-mode conf-mode makefile-mode scad-mode)
      '((company-dabbrev-code company-files :with company-yasnippet)))
    :config
    (setq company-backends
          '((company-capf company-files :with company-yasnippet)))
    (setq company-idle-delay nil)
    (setq company-show-quick-access t)
    :delight)

  (use-package company-dabbrev
    :defer t
    :config
    (setq company-dabbrev-other-buffers t) ; Same major mode
    (setq company-dabbrev-ignore-case t)   ; Case typed, during completion
    (setq company-dabbrev-downcase nil))   ; Case candidate, when inserted
#+END_SRC

*** company-flx - Flx completion style
[[https://github.com/PythonNut/company-flx][company-flx (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package company-flx
    :straight t
    :after company
    :config
    (company-flx-mode))
#+END_SRC

* Help and documentation

** Help

*** help - Help viewer
#+BEGIN_SRC emacs-lisp
  (use-package help
    :defer t
    :config
    (setq help-window-select t))

  (use-package help-mode
    :defer t
    :config
    (use-package link-hint
      :bind
      (:map help-mode-map
       ("j" . link-hint-open-link)))

    (add-hook 'help-mode-hook #'koek-subr/reset-default-directory))

  (use-package help-fns
    :bind
    ("C-c d f" . describe-face))

  (use-package descr-text
    :bind
    ("C-c d c" . describe-char))
#+END_SRC

*** helpful - Partial help replacement
[[https://github.com/Wilfred/helpful][helpful (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :straight t
    :bind
    (([remap describe-variable] . helpful-variable)
     ([remap describe-function] . helpful-callable)
     ([remap describe-key]      . helpful-key))
    :config
    (use-package link-hint
      :bind
      (:map helpful-mode-map
       ("j" . link-hint-open-link)))

    (setq helpful-max-buffers nil)
    (add-hook 'helpful-mode-hook #'koek-subr/reset-default-directory))
#+END_SRC

*** elisp-demos - Code examples
[[https://github.com/xuchunyang/elisp-demos][elisp-demos (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package elisp-demos
    :straight t
    :after helpful
    :config
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+END_SRC

** info - Info viewer
#+BEGIN_SRC emacs-lisp
  (use-package info
    :bind
    ("C-c d i" . info-apropos)
    :config
    (use-package link-hint
      :bind
      (:map Info-mode-map
       ("j" . link-hint-open-link)))

    (add-hook 'Info-mode-hook #'koek-subr/reset-default-directory))
#+END_SRC

** man - Manual viewer
#+BEGIN_SRC emacs-lisp
  (use-package man
    :bind
    ("C-c d m" . man)
    :preface
    (define-advice Man-notify-when-ready
        (:around (f buffer) koek-man/normalize-notify-method)
      (if (eq Man-notify-method 'koek/pop-to-buffer)
          (pop-to-buffer buffer)
        (funcall f buffer)))
    :config
    (use-package link-hint
      :bind
      (:map Man-mode-map
       ("j" . link-hint-open-link)))

    (setq Man-notify-method 'koek/pop-to-buffer)
    (add-hook 'Man-mode-hook #'koek-subr/reset-default-directory))
#+END_SRC

** apropos - Search Emacs environment
#+BEGIN_SRC emacs-lisp
  (use-package apropos
    :bind
    ("C-c d a" . apropos)
    :config
    (use-package link-hint
      :bind
      (:map apropos-mode-map
       ("j" . link-hint-open-link)))

    (add-hook 'apropos-mode-hook #'koek-subr/reset-default-directory))
#+END_SRC

** devdocs - DevDocs viewer
[[https://github.com/astoff/devdocs.el][devdocs (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package devdocs
    :straight t
    :bind
    ("C-c d d" . devdocs-lookup)
    :autoload (devdocs--available-docs devdocs--installed-docs)
    :preface
    (defvar koek-devd/docs nil)

    (defun koek-devd/register (docs)
      (setq koek-devd/docs (seq-uniq (append docs koek-devd/docs))))

    (defun koek-devd/install (&optional interactive)
      (interactive (list 'interactive))
      (let* ((installed (mapcar (apply-partially #'alist-get 'slug)
                                (devdocs--installed-docs)))
             (missing (seq-difference (mapcar #'symbol-name koek-devd/docs)
                                      installed))
             (docs (seq-filter (lambda (doc)
                                 (member (alist-get 'slug doc) missing))
                               (devdocs--available-docs)))
             (doc-n 1)
             (n-docs (length docs)))
        (dolist (doc docs)
          (when interactive
            (message "Installing `%s' (%d/%d)..."
                     (alist-get 'name doc) doc-n n-docs))
          (let ((inhibit-message t))      ; Dynamic variable
            (devdocs-install doc))
          (setq doc-n (1+ doc-n))))
      (when interactive
        (message "Installing documentation...done")))

    (defmacro koek-devd/set-docs (modes docs)
      (declare (indent 1))
      (let ((value-sym (gensym)))
        `(let ((,value-sym ,docs))
           (koek-devd/register ,value-sym)
           ,@(seq-mapcat
              (lambda (mode)
                (let* ((prefix "koek-devd/")
                       (mode-name (symbol-name mode))
                       (docs-sym (koek-subr/intern prefix mode-name "-docs"))
                       (f-sym (koek-subr/intern
                               prefix "setup-" mode-name "-docs"))
                       (hook-sym (koek-subr/intern mode-name "-hook")))
                  `((defvar ,docs-sym (copy-sequence ,value-sym)
                      ,(format "List of docs in `%s'." mode))

                    (defun ,f-sym ()
                      ,(format "Setup docs in `%s'." mode)
                      ;; local
                      (setq-local devdocs-current-docs
                                  (mapcar #'symbol-name ,docs-sym)))

                    (add-hook ',hook-sym #',f-sym))))
              modes))))

    (koek-devd/set-docs (c-mode)
      '(c))
    (koek-devd/set-docs (c++-mode)
      '(cpp))
    (koek-devd/set-docs (java-mode)
      '(openjdk~19))
    (koek-devd/set-docs (clojure-mode)
      '(clojure~1.11 openjdk~19))
    (koek-devd/set-docs (clojurescript-mode)
      '(clojure~1.11 javascript dom node))
    (koek-devd/set-docs (cider-repl-mode)
      '(clojure~1.11))
    (koek-devd/set-docs (erlang-mode erlang-shell-mode)
      '(erlang~26))
    (koek-devd/set-docs (mhtml-mode)
      '(html))
    (koek-devd/set-docs (css-mode)
      '(css))
    (koek-devd/set-docs (js-mode indium-repl-mode)
      '(javascript dom jquery lodash~4 node express))
    (koek-devd/set-docs (json-mode)
      '(npm))
    (koek-devd/set-docs (octave-mode inferior-octave-mode)
      '(octave))
    (koek-devd/set-docs (python-mode inferior-python-mode)
      '(python~3.12 numpy~1.23 pandas~1 statsmodels scikit_learn scikit_image
        tensorflow~2.9 matplotlib~3.7))
    (koek-devd/set-docs (sql-mode sql-interactive-mode)
      '(postgresql~16))
    :config
    (use-package link-hint
      :bind
      (:map devdocs-mode-map
       ("j" . link-hint-open-link)))

    (setq devdocs-window-select t)
    (setq devdocs-separator " > ")        ; Mirror info
    (add-hook 'devdocs-mode-hook #'koek-subr/reset-default-directory))
#+END_SRC

** eldoc - Show docstring
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :straight t
    :bind
    ("C-c d e" . eldoc-doc-buffer)
    :config
    (setq eldoc-echo-area-use-multiline-p nil)
    :delight)
#+END_SRC

** Web commands
#+BEGIN_SRC emacs-lisp
  (defun koek-web/construct-duckduckgo-url (query)
    (concat "https://duckduckgo.com/?q="
            (mapconcat #'url-hexify-string (split-string query) "+")))

  (defun koek-web/query (query)
    (interactive "sQuery: ")
    (browse-url (koek-web/construct-duckduckgo-url query)))

  (defun koek-web/query-region (begin end)
    (interactive "r")
    (let ((query (buffer-substring-no-properties begin end)))
      (deactivate-mark)
      (koek-web/query query)))
#+END_SRC

* Applications

** vterm - Terminal emulator
[[https://github.com/akermu/emacs-libvterm][vterm (GitHub)]]

For shell configuration, see [[file:dotfiles.org::*Bash][Bash]].

#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :straight t
    :bind
    (("C-c x t" . vterm)
     :map vterm-mode-map
     ("C-x C-q" . vterm-copy-mode)
     ("C-c C-l" . vterm-clear)
     :map vterm-copy-mode-map
     ("C-x C-q" . vterm-copy-mode))
    :delight (vterm-copy-mode " Copy"))
#+END_SRC

** eshell - Shell
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :bind
    ("C-c x e" . eshell))

  (use-package esh-module
    :defer t
    :config
    (push 'eshell-smart eshell-modules-list))

  (use-package em-unix
    :defer t
    :config
    (setq eshell-mv-interactive-query t)
    (setq eshell-cp-interactive-query t)
    (setq eshell-ln-interactive-query t)
    (setq eshell-rm-interactive-query t))
#+END_SRC

*** Aliases
#+BEGIN_SRC fundamental :tangle stow/emacs/.config/emacs/etc/eshell/aliases
  alias ll ls -lAh $*
  alias nb jupyter notebook $*
#+END_SRC

** proced - Processes
#+BEGIN_SRC emacs-lisp
  (use-package proced
    :bind
    ("C-c x p" . proced)
    :config
    (add-hook 'proced-mode-hook #'koek-subr/reset-default-directory))
#+END_SRC

** compile - Run asynchronous processes
#+BEGIN_SRC emacs-lisp
  (use-package compile
    :bind
    ("C-c x c" . compile)
    :preface
    (autoload #'ansi-color-apply-on-region "ansi-color")

    (defun koek-cmpl/style-output ()
      "Style process output.
  Output is between `compilation-filter-start' and point."
      (ansi-color-apply-on-region compilation-filter-start (point)))
    :config
    (setq compilation-scroll-output 'first-error)
    (add-hook 'compilation-filter-hook #'koek-cmpl/style-output))
#+END_SRC

** eww - Web browser
#+BEGIN_SRC emacs-lisp
  (use-package eww
    :bind
    ("C-c x b" . eww)
    :preface
    (defun koek-eww/handle-eww (bookmark)
      (let ((name (bookmark-name-from-full-record bookmark)))
        (set-buffer
         (generate-new-buffer (koek-subr/construct-earmuffed-name "eww" name)))
        (eww-mode)
        (eww (bookmark-get-filename bookmark))))

    (defun koek-eww/jump-bookmark (bookmark)
      (interactive (list (koek-bmrk/read-generic-url "Bookmark: ")))
      (let ((koek-bmrk/handle-generic-url-f ; Dynamic variable
             #'koek-eww/handle-eww))
        (bookmark-jump bookmark)))

    (defun koek-eww/get-page ()
      (let ((url (plist-get eww-data :url))
            (title (plist-get eww-data :title)))
        (list :url url :title (unless (string-empty-p title) title))))

    (defun koek-eww/make-record ()
      (let* ((page (koek-eww/get-page))
             (url (or (plist-get page :url) (user-error "Not visiting a URL")))
             (title (plist-get page :title))
             (normalized (when title
                           (koek-subr/normalize-title title))))
        (koek-bmrk/generic-url-record url normalized)))

    (defun koek-eww/setup-current ()
      (setq-local bookmark-make-record-function #'koek-eww/make-record))

    (defun koek-eww/update-current ()
      (let* ((page (koek-eww/get-page))
             (title (plist-get page :title))
             (url (plist-get page :url)))
        (rename-buffer
         (koek-subr/construct-earmuffed-name "eww" (or title url)) 'unique)))

    (defun koek-eww/rewrite-reddit (url)
      "Rewrite Reddit to Reddit mobile.
  URL is a string, the URL to rewrite."
      (let ((parsed (url-generic-parse-url url)))
        (when (string-match (rx line-start
                                (zero-or-one (or "www" "old") ".") "reddit.com"
                                line-end)
                            (url-host parsed))
          (setf (url-host parsed) "i.reddit.com")
          (url-recreate-url parsed))))

    (defvar koek-eww/rewrite-fs '(koek-eww/rewrite-reddit)
      "List of rewrite functions.
  A rewrite function rewrites a URL.  It's passed a string, the URL
  to rewrite.  It must return a string, the rewritten URL, or, to
  not rewrite the URL, nil.")

    (defun koek-eww/rewrite (url)
      "Rewrite URL.
  URL is a string, the URL to rewrite.  The rewritten URL is the
  result of the first rewrite function to return a URL or, when
  none return a URL, nil.  For rewrite functions, see
  `koek-eww/rewrite-fs'."
      (seq-some (lambda (f)
                  (funcall f url))
                koek-eww/rewrite-fs))

    (defun koek-eww/redirect (url &optional interactive)
      (interactive
       (let* ((page (koek-eww/get-page))
              (url (or (plist-get page :url) (user-error "Not visiting a URL"))))
         (list url 'interactive)))
      (let ((rewritten (koek-eww/rewrite url)))
        (unless rewritten
          (let* ((parsed (url-generic-parse-url url))
                 (host (url-host parsed)))
            (user-error "Redirect failed, no rewrite function for `%s'" host)))
        (when interactive
          (message "Redirecting to `%s'" rewritten))
        (eww rewritten)))
    :config
    (use-package link-hint
      :bind
      (:map eww-mode-map
       ("j" . link-hint-open-link)))

    (bind-key "m" #'koek-eww/redirect eww-mode-map)

    (add-hook 'eww-mode-hook #'koek-subr/reset-default-directory)
    (add-hook 'eww-mode-hook #'koek-eww/setup-current)
    (add-hook 'eww-after-render-hook #'koek-eww/update-current))
#+END_SRC

*** shr - HTML renderer
Shr is used by other packages (e.g. [[*mu4e - E-mail client][mu4e]] and [[*elfeed - News reader][elfeed]]) besides eww.

#+BEGIN_SRC emacs-lisp
  (use-package shr
    :defer t
    :config
    (setq shr-use-colors nil)
    (setq shr-max-image-proportion 0.6)
    (setq shr-image-animate nil))
#+END_SRC

** elpher - Gopher and Gemini browser
[[gopher://thelambdalab.xyz/1/projects/elpher][elpher]]

#+BEGIN_SRC emacs-lisp
  (use-package elpher
    :straight t
    :defer t
    :init
    (put 'elpher-bookmark-jump 'bookmark-handler-type "Gopher and Gemini")
    :config
    (use-package link-hint
      :bind
      (:map elpher-mode-map
       ("j" . link-hint-open-link)))

    (add-hook 'elpher-mode-hook #'koek-subr/reset-default-directory))
#+END_SRC

** mu4e - E-mail client
[[https://github.com/djcb/mu][mu4e (GitHub)]]

For e-mail accounts, see [[*E-mail accounts][E-mail accounts]].

#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :bind
    ("C-c x m" . mu4e)
    :preface
    (defun koek-mu4e/compose-message (email)
      (interactive (list (koek-bbdb/read-email "To: ")))
      (compose-mail (koek-subr/strip-chevrons email)))
    :init
    (bind-key "C-c x C-m" #'compose-mail)

    (setq mail-user-agent 'mu4e-user-agent))

  (use-package mu4e-vars
    :defer t
    :config
    (setq mu4e-get-mail-command
          (format "mbsync -c %s -a"
                  (expand-file-name "isync/mbsyncrc" (xdg-config-home))))
    ;; When moving e-mail, isync expects them to be renamed
    (setq mu4e-change-filenames-when-moving t)

    (setq mu4e-completing-read-function #'completing-read)
    (setq mu4e-context-policy 'pick-first)
    (setq mu4e-compose-complete-addresses nil)

    (setq mu4e-use-fancy-chars t)
    (setq mu4e-hide-index-messages t))

  (use-package mu4e-search
    :defer t
    :preface
    (autoload #'mu4e-search "mu4e-search")

    (defun koek-mu4e/display-messages-to (email)
      (interactive (list (koek-bbdb/read-email "To: ")))
      (let ((normalized (koek-subr/strip-chevrons email)))
        (mu4e-search (mapconcat (lambda (field)
                                  (concat field ":" normalized))
                                '("to" "cc" "bcc") " or "))))

    (defun koek-mu4e/display-messages-from (email)
      (interactive (list (koek-bbdb/read-email "From: ")))
      (mu4e-search (concat "from:" (koek-subr/strip-chevrons email)))))

  (use-package mu4e-main
    :defer t
    :config
    (use-package mu4e-update
      :bind
      (:map mu4e-main-mode-map
       ("G" . mu4e-update-mail-and-index)))) ; Mirror elfeed

  (use-package mu4e-headers
    :defer t
    :config
    (use-package mu4e-update
      :bind
      (:map mu4e-headers-mode-map
       ("G" . mu4e-update-mail-and-index)))

    (use-package mu4e-org
      :bind
      (:map mu4e-headers-mode-map
       ("C-c o c" . mu4e-org-store-and-capture)))

    ;; Headers must at least be the width of the header short name plus
    ;; two for sort direction. For header short names, see
    ;; `mu4e-header-info'.
    (setq mu4e-headers-fields '((:human-date . 8)
                                (:from       . 22)
                                (:subject    . nil)))

    ;; Style thread segments
    (let ((specs '((mu4e-headers-thread-root-prefix          . "■ ")
                   (mu4e-headers-thread-first-child-prefix   . "▪ ")
                   (mu4e-headers-thread-child-prefix         . "├╴")
                   (mu4e-headers-thread-last-child-prefix    . "└╴")
                   (mu4e-headers-thread-orphan-prefix        . "□ ")
                   (mu4e-headers-thread-single-orphan-prefix . "□ ")
                   (mu4e-headers-thread-duplicate-prefix     . "= ")
                   (mu4e-headers-thread-connection-prefix    . "│ ")
                   (mu4e-headers-thread-blank-prefix         . "  "))))
      (dolist (spec specs)
        (pcase-let ((`(,symbol . ,segment) spec))
          (set symbol (cons segment segment)))))

    (add-hook 'mu4e-headers-mode-hook #'koek-subr/reset-default-directory))

  (use-package mu4e-mark
    :defer t
    :config
    ;; When trashing e-mail, e-mail is flagged trashed. E-mail flagged
    ;; trashed is deleted by most e-mail providers. Move to trash but
    ;; don't flag trashed.
    (setq mu4e-marks
          (cons (cons 'trash
                      (plist-put (alist-get 'trash mu4e-marks)
                                 :action
                                 (lambda (docid _msg target)
                                   (mu4e--server-move
                                    docid (mu4e--mark-check-target target) "-N"))))
                (assq-delete-all 'trash mu4e-marks)))

    ;; Style marker characters
    (setq mu4e-marks
          (mapcar (pcase-lambda (`(,mark . ,props))
                    (let ((marker (let ((spec (plist-get props :char)))
                                    (if (consp spec)
                                        (car spec)
                                      spec))))
                      (cons mark (plist-put props :char (cons marker marker)))))
                  mu4e-marks)))

  (use-package mu4e-view
    :defer t
    :config
    (use-package mu4e-update
      :bind
      (:map mu4e-view-mode-map
       ("G" . mu4e-update-mail-and-index)))

    (use-package mu4e-org
      :bind
      (:map mu4e-view-mode-map
       ("C-c o c" . mu4e-org-store-and-capture))))

  ;; Prefer variables of package mu4e-compose to those of message and
  ;; those of message to those of sendmail
  (use-package message
    :defer t
    :preface
    (defun koek-msg/check-spelling ()
      "Check spelling of e-mail."
      (let ((tick (buffer-chars-modified-tick)))
        (ispell-message)
        (unless (or (= (buffer-chars-modified-tick) tick)
                    (y-or-n-p "Spelling checked.  Send? "))
          (user-error "Send aborted"))))
    :config
    (setq message-send-mail-function #'smtpmail-send-it)
    (setq message-beginning-of-line nil)
    (add-hook 'message-send-hook #'koek-msg/check-spelling))

  (use-package mu4e-compose
    :defer t
    :config
    ;; Revert remap
    (bind-keys
     :map mu4e-compose-mode-map
     ([remap beginning-of-buffer] . nil)
     ([remap end-of-buffer]       . nil))

    (setq mu4e-compose-context-policy 'ask-if-none))

  (use-package mu4e-org
    ;; system
    :when (executable-find "mu")
    :after org
    :config
    (require 'mu4e)

    (setq mu4e-org-link-query-in-headers-mode t))
#+END_SRC

** bbdb - Address book :wip:
[[http://savannah.nongnu.org/projects/bbdb][bbdb (Savannah)]]

To show birthdays as agenda entries, see [[info:org#Weekly/daily agenda][Anniversaries from BBDB
(info)]].

#+BEGIN_SRC emacs-lisp
  (use-package bbdb
    :straight t
    :after mu4e
    :preface
    (defvar koek-bbdb/email-history nil
      "History of e-mail addresses read.")

    (defun koek-bbdb/read-email (prompt)
      (let* ((candidates (seq-mapcat (lambda (record)
                                       (mapcar (lambda (email)
                                                 (cons email record))
                                               (bbdb-record-mail record)))
                                     (bbdb-records)))
             (table (koek-subr/enrich candidates
                      category 'email
                      annotation-function
                      (lambda (candidate)
                        (when-let ((name (thread-first candidate
                                           (assoc candidates)
                                           cdr
                                           bbdb-record-name)))
                          (concat " " name))))))
        (completing-read prompt table nil t nil 'koek-bbdb/email-history)))

    (defun koek-bbdb/display-email (email)
      (interactive (list (koek-bbdb/read-email "E-mail: ")))
      (bbdb-search-mail
       (rx line-start (literal (koek-subr/strip-chevrons email)) line-end)))
    :config
    (push '(("Belgium" "België") "spcC" "@%s\n@@%p @%c@\n%C@" "%c")
          bbdb-address-format-list)
    (setq bbdb-default-country nil)
    (setq bbdb-phone-style nil)

    ;; Delegate to `display-buffer', respect `display-buffer-alist'
    (setq bbdb-pop-up-window-size t)
    (setq bbdb-mua-pop-up-window-size t)

    (bbdb-initialize 'mu4e 'message))

  (use-package bbdb-com
    :bind
    ("C-c x a" . bbdb))
#+END_SRC

*** bbdb-vcard - Import from and export to vCard
[[https://github.com/tohojo/bbdb-vcard][bbdb-vcard (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package bbdb-vcard
    :straight t
    :after bbdb
    :preface
    (autoload #'bbdb-vcard-import-vcard "bbdb-vcard")
    (autoload #'bbdb-vcard-iterate-vcards "bbdb-vcard")

    (defun koek-bbdb/import-dir (file-name &optional interactive)
      "Import vCards from directory FILE-NAME and its subdirectories.
  Treats every vCard as a distinct contact.  INTERACTIVE is used
  internally."
      (interactive
       (progn
         (require 'bbdb-vcard)
         (let* ((root (if (file-accessible-directory-p bbdb-vcard-default-dir)
                          bbdb-vcard-default-dir
                        default-directory))
                (file-name
                 (expand-file-name
                  (read-directory-name "vCard directory: " root nil t) root)))
           (list file-name 'interactive))))
      ;; `bbdb-allow-duplicates' and `bbdb-vcard-try-merge' are dynamic
      ;; variables
      (let* ((bbdb-allow-duplicates t)  ; Distinct contacts can have the same name
             (bbdb-vcard-try-merge nil) ; Distinct contacts can have the same landline telephone number
             (file-names
              (directory-files-recursively file-name (rx ".vcf" line-end) nil t))
             (vcards (with-temp-buffer
                       (dolist (file-name file-names)
                         (insert-file-contents file-name)
                         (when (and (eolp) (not (bolp)))
                           (insert "\n")))
                       (buffer-substring (point-min) (point-max))))
             (records
              (bbdb-vcard-iterate-vcards #'bbdb-vcard-import-vcard vcards))
             (n-records (length records)))
        (when interactive
          (message "%d %s imported"
                   n-records (if (= n-records 1) "vCard" "vCards"))))))
#+END_SRC

** elfeed - News reader
[[https://github.com/skeeto/elfeed][elfeed (GitHub)]]

For news feeds, see [[file:secrets.org::*News feeds][News feeds]].

The elfeed configuration depends on bongo. Insert [[*bongo - Media player][bongo]] configuration
here so the compiler can load bongo and expand its macros.

#+BEGIN_SRC emacs-lisp :noweb no-export
  <<bongo-config>>
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :straight t
    :bind
    ("C-c x n" . elfeed)
    :preface
    (eval-when-compile
      (require 'bongo))
    (autoload #'bongo-enqueue-region "bongo")
    (autoload #'bongo-insert-uri "bongo")
    (autoload #'bongo-library-mode "bongo") ; with-temp-bongo-library-buffer

    (defvar koek-feed/feeds-file
      (no-littering-expand-etc-file-name "elfeed-feeds.el"))

    (defun koek-feed/read-feeds ()
      (when (file-readable-p koek-feed/feeds-file)
        (with-temp-buffer
          (insert-file-contents koek-feed/feeds-file)
          (read (current-buffer)))))

    (defun koek-feed/add-feed (title url &rest tags)
      "Add news feed to database.
  TITLE and URL are strings.  TAGS are zero or more symbols."
      (setf (elfeed-meta (elfeed-db-get-feed url) :title) title)
      (push (cons url tags) elfeed-feeds))

    (defun koek-feed/init-feeds ()
      (dolist (feed (koek-feed/read-feeds))
        (let ((args
               (pcase feed
                 (`(,title reddit month ,id . ,tags)
                  `(,(concat title " (Reddit Month)")
                    ,(format "https://www.reddit.com/r/%s/top.rss?t=month" id)
                    post ,@tags))
                 (`(,title reddit ,id . ,tags)
                  `(,(concat title " (Reddit)")
                    ,(format "https://www.reddit.com/r/%s/top.rss?t=week" id)
                    post ,@tags))
                 (`(,title youtube ,id . ,tags)
                  `(,(concat title " (YouTube)")
                    ,(format "https://www.youtube.com/feeds/videos.xml?channel_id=%s" id)
                    video ,@tags))
                 (_feed
                  feed))))
          (apply #'koek-feed/add-feed args))))

    (defun koek-feed/get-entries ()
      "Return selected entries.
  When called from show buffer, return current entry.  When called
  from search buffer, return entries in region or entry on current
  line."
      (if elfeed-show-entry
          (list elfeed-show-entry)
        (elfeed-search-selected)))

    (defun koek-feed/visit (entry)
      "Visit ENTRY in eww."
      (let* ((title (elfeed-entry-title entry))
             (buffer (generate-new-buffer
                      (koek-subr/construct-earmuffed-name "eww" title))))
        (with-current-buffer buffer
          (eww-mode)
          (eww (elfeed-entry-link entry)))
        (pop-to-buffer buffer)))

    (defun koek-feed/visit-dwim ()
      "Visit selected entries in eww."
      (interactive)
      (let ((entries (koek-feed/get-entries)))
        (when (derived-mode-p 'elfeed-search-mode)
          (elfeed-untag entries 'unread)
          (mapc #'elfeed-search-update-entry entries)
          (unless (or elfeed-search-remain-on-entry (use-region-p))
            (forward-line)))
        (mapc #'koek-feed/visit entries)))

    (defun koek-feed/enqueue (entries &optional next)
      "Enqueue ENTRIES in bongo.
  When optional NEXT is truthy, enqueue after playing track, else,
  enqueue after last track."
      (with-temp-bongo-library-buffer
        (dolist (entry entries)
          (bongo-insert-uri (elfeed-entry-link entry)
                            (elfeed-entry-title entry)))
        (bongo-enqueue-region (if next 'insert 'append)
                              (point-min) (point-max)
                              'maybe-display-playlist)))

    (defun koek-feed/enqueue-dwim (&optional arg)
      "Enqueue selected entries in bongo.
  With `\\[universal-argument]' prefix argument ARG, enqueue after
  playing track, else, enqueue after last track."
      (interactive "P")
      (let ((entries (koek-feed/get-entries)))
        (when (derived-mode-p 'elfeed-search-mode)
          (elfeed-untag entries 'unread)
          (mapc #'elfeed-search-update-entry entries)
          (unless (or elfeed-search-remain-on-entry (use-region-p))
            (forward-line)))
        (koek-feed/enqueue entries arg)))

    (defun koek-feed/enqueue-next-dwim ()
      "Enqueue selected entries in bongo after playing track."
      (interactive)
      (koek-feed/enqueue-dwim t)))

  (use-package elfeed-curl
    :defer t
    :config
    (setq elfeed-curl-timeout (* elfeed-curl-timeout 2)))

  (use-package elfeed-search
    :defer t
    :config
    (bind-keys
     :map elfeed-search-mode-map
     ("b" . koek-feed/visit-dwim)
     ("B" . elfeed-search-browse-url)
     ("e" . koek-feed/enqueue-dwim)
     ("E" . koek-feed/enqueue-next-dwim))

    (setq elfeed-search-filter (concat elfeed-search-filter " "))
    (add-hook 'elfeed-search-mode-hook #'koek-subr/reset-default-directory))

  (use-package elfeed-show
    :defer t
    :init
    (put 'elfeed-show-bookmark-handler 'bookmark-handler-type "News")
    :config
    (use-package link-hint
      :bind
      (:map elfeed-show-mode-map
       ("j" . link-hint-open-link)))

    (bind-keys
     :map elfeed-show-mode-map
     ("b" . koek-feed/visit-dwim)
     ("B" . elfeed-show-visit)
     ("e" . koek-feed/enqueue-dwim)
     ("E" . koek-feed/enqueue-next-dwim)))
#+END_SRC

** gnus - News reader
Gnus is a placeholder.

#+BEGIN_SRC emacs-lisp
  (use-package gnus-dired
    :hook (dired-mode . turn-on-gnus-dired-mode)
    :config
    (setq gnus-dired-mail-mode mail-user-agent))
#+END_SRC

** pdf-tools - PDF viewer
[[https://github.com/politza/pdf-tools][pdf-tools (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :straight t
    :defer t
    :preface
    (defun koek-pdf/recompile (&optional interactive)
      "Recompile epdf.
  INTERACTIVE is used internally."
      (interactive (list 'interactive))
      (require 'pdf-tools)
      (let ((callback (lambda (file-name)
                        (setq pdf-info-epdfinfo-program file-name)
                        (when file-name
                          (kill-buffer))  ; Compile buffer is current
                        (when interactive
                          (if file-name
                              (message "Recompiling epdf...done")
                            (message "Recompile epdf failed")))))) ; error, hook
        (when interactive
          (message "Recompiling epdf..."))
        (pdf-tools-build-server
         pdf-tools-directory 'no-install-deps nil callback))))

  (use-package pdf-loader
    :config
    (pdf-loader-install 'no-ask 'no-install-deps))

  (use-package pdf-view
    :mode ((rx ".pdf" string-end) . pdf-view-mode)
    :preface
    (defun koek-pdf/redraw-hard ()
      "Invalidate cache and redraw document."
      (pdf-cache-clear-images)
      (pdf-view-redisplay t))

    (defun koek-pdf/stain ()
      "Stain document."
      (pdf-info-setoptions :render/foreground (car pdf-view-midnight-colors)
                           :render/background (cdr pdf-view-midnight-colors)
                           :render/usecolors t)
      (koek-pdf/redraw-hard))

    ;; `pdf-view-midnight-minor-mode' is difficult to extend
    (define-minor-mode koek-pdf/stain-mode
      "Stain document for reading under different light conditions."
      :lighter " Stain"
      (unless (derived-mode-p 'pdf-view-mode)
        (user-error "Not in a PDF buffer"))
      (if koek-pdf/stain-mode
          (progn
            (add-hook 'after-save-hook #'koek-pdf/stain nil 'local)
            (add-hook 'after-revert-hook #'koek-pdf/stain nil 'local)
            (koek-pdf/stain))
        (remove-hook 'after-save-hook #'koek-pdf/stain 'local)
        (remove-hook 'after-revert-hook #'koek-pdf/stain 'local)
        (pdf-info-setoptions :render/usecolors nil)
        (koek-pdf/redraw-hard)))

    ;; Hints are cached, i.e., cache must be invalidated on theme change
    (defun koek-pdf/invalidate-all ()
      "Invalidate cache all documents."
      (save-current-buffer
        (dolist (buffer (buffer-list))
          (set-buffer buffer)
          (when (derived-mode-p 'pdf-view-mode)
            (pdf-cache-clear-images)))))

    (defun koek-pdf/restain-all ()
      "Restain all stained documents."
      (save-current-buffer
        (dolist (buffer (buffer-list))
          (set-buffer buffer)
          (when (and (derived-mode-p 'pdf-view-mode) koek-pdf/stain-mode)
            (koek-pdf/stain)))))
    :config
    (use-package consult
      :bind
      (:map pdf-view-mode-map
       ("C-c j h" . consult-imenu)
       ("h" . consult-imenu)
       ("d" . consult-imenu)))

    (bind-keys
     :map pdf-view-mode-map
     ([remap pdf-view-midnight-minor-mode] . koek-pdf/stain-mode)
     ("C-c e s" . koek-pdf/stain-mode))

    (setq-default pdf-view-display-size 'fit-page)
    ;; Invalidate then restain. `add-hook' adds to the front. The
    ;; reverse invalidates the restained page.
    (add-hook 'koek-thm/enable-hook #'koek-pdf/restain-all)
    (add-hook 'koek-thm/enable-hook #'koek-pdf/invalidate-all)
    :delight (pdf-view-mode "PDF" :major))

  (use-package pdf-links
    :bind
    (:map pdf-links-minor-mode-map
     ([remap link-hint-open-link] . pdf-links-action-perform)
     ("j" . pdf-links-action-perform))
    :preface
    ;; Show hints in minuscule
    (define-advice pdf-links-read-link-action--create-keys
        (:filter-return (hints) koek-pdf/downcase-hints)
      (mapcar (lambda (chars)
                (mapcar #'downcase chars))
              hints))

    (define-advice pdf-links-read-link-action--read-chars
        (:filter-args (args) koek-pdf/normalize-hints)
      (list (car args)
            (mapcar (pcase-lambda (`(,hint . ,link))
                      (cons (mapcar #'upcase hint)
                            link))
                    (cadr args))))
    :config
    (let ((spec
           (seq-mapcat
            (lambda (name)
              (list name (face-attribute 'pdf-links-read-link name nil 'default)))
            '(:family :width :weight :slant))))
      (setq pdf-links-read-link-convert-commands
            `("-family"     ,(plist-get spec :family)
              "-stretch"    ,(thread-last (plist-get spec :width)
                               symbol-name
                               capitalize
                               (string-replace "-" ""))
              "-weight"     ,(pcase (plist-get spec :weight)
                               ('ultra-light "Thin")
                               ('extra-light "ExtraLight")
                               ('light       "Light")
                               ('semi-bold   "SemiBold")
                               ('bold        "Bold")
                               ('extra-bold  "ExtraBold")
                               ('ultra-bold  "Black")
                               (_weight      "Normal"))
              "-style"      ,(pcase (plist-get spec :slant)
                               ('italic  "Italic")
                               ('oblique "Oblique")
                               (_slant   "Normal"))
              "-pointsize"  "%P"
              "-fill"       "%f"
              "-undercolor" "%b"
              "-draw"       "text %X,%Y '%c'"))))
#+END_SRC

*** saveplace-pdf-view - Restore page on revisit
[[https://github.com/nicolaisingh/saveplace-pdf-view][saveplace-pdf-view (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package saveplace-pdf-view
    :straight t
    :after pdf-view)
#+END_SRC

** dictionary - Dictionary
[[https://github.com/myrkr/dictionary-el][dictionary (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package dictionary
    :bind
    ("C-c x d" . dictionary-search)
    :config
    (use-package link-hint
      :bind
      (:map dictionary-mode-map
       ("j" . link-hint-open-link)))

    (bind-key "DEL" #'scroll-down-command 'dictionary-mode-map)

    (setq dictionary-create-buttons nil))
#+END_SRC

** calendar - Calendar
To show holidays as agenda entries, see [[info:org#Weekly/daily agenda][Calendar/Diary integration
(info)]].

#+BEGIN_SRC emacs-lisp
  (use-package calendar
    :bind
    ("C-c x q" . calendar)                ; [Q]alendar [sic]
    :hook (calendar-today-visible . calendar-mark-today)
    :config
    (setq calendar-mark-holidays-flag t)
    (add-hook 'calendar-mode-hook #'koek-subr/reset-default-directory))

  (use-package holidays
    :bind
    ("C-c x C-q" . list-holidays))
#+END_SRC

*** belgian-holidays - Belgian holidays
#+BEGIN_SRC emacs-lisp
  (koek-pkg/register belgian-holidays)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle stow/emacs/.config/emacs/lisp/belgian-holidays/belgian-holidays.el
  ;;; belgian-holidays --- Belgian holidays -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020-2023 Nicolas De Jaeghere

  ;; Author: Nicolas De Jaeghere <nicolas@dejaeghe.re>
  ;; Keywords: calendar
  ;; URL: <https://github.com/Koekelas/dotfiles>

  ;; This file is not part of GNU Emacs.

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; This package defines the Belgian holidays. It's intended to be used
  ;; with the builtin holidays package. The holiday names are in Dutch.
  ;; To configure belgian-holidays, add to your initialization file:
  ;;
  ;;     (require 'holidays)
  ;;     (require 'belgian-holidays)
  ;;
  ;;     ;; Either both public and miscellaneous holidays
  ;;     (setq holiday-other-holidays
  ;;           (append holiday-other-holidays holiday-belgian-holidays))
  ;;
  ;;     ;; Or only public holidays
  ;;     (setq holiday-other-holidays
  ;;           (append holiday-other-holidays holiday-belgian-public-holidays))

  ;;; Code:

  (defvar holiday-belgian-public-holidays
    '((holiday-fixed 1 1 "Nieuwjaar")
      (holiday-easter-etc 0 "Pasen")
      (holiday-easter-etc 1 "Paasmaandag")
      (holiday-fixed 5 1 "Dag van de Arbeid")
      (holiday-easter-etc 39 "Onze-Lieve-Heer-Hemelvaart")
      (holiday-easter-etc 49 "Pinksteren")
      (holiday-easter-etc 50 "Pinkstermaandag")
      (holiday-fixed 7 21 "Nationale feestdag van België")
      (holiday-fixed 8 15 "Onze-Lieve-Vrouw-Hemelvaart")
      (holiday-fixed 11 1 "Allerheiligen")
      (holiday-fixed 11 11 "Wapenstilstand")
      (holiday-fixed 12 25 "Kerstmis"))
    "List of public Belgian holiday expressions.")

  (defvar holiday-belgian-misc-holidays
    '((holiday-fixed 1 6 "Driekoningen")
      (holiday-fixed 2 14 "Valentijnsdag")
      (holiday-fixed 3 19 "Vaderdag (Antwerpen)")
      (holiday-float 5 0 2 "Moederdag")
      (holiday-float 6 0 2 "Vaderdag")
      (holiday-fixed 7 11 "Feestdag van Vlaanderen")
      (holiday-fixed 8 15 "Moederdag (Antwerpen)")
      (holiday-fixed 9 27 "Dag van de Franse Gemeenschap")
      (holiday-fixed 11 2 "Allerzielen")
      (holiday-fixed 11 11 "Sint-Maarten")
      (holiday-fixed 11 15 "Dag van de Duitstalige Gemeenschap")
      (holiday-fixed 11 15 "Koningsdag")
      (holiday-fixed 12 6 "Sinterklaas")
      (holiday-fixed 12 26 "Tweede kerstdag")
      (holiday-fixed 12 31 "Oudejaarsavond"))
    "List of miscellaneous Belgian holiday expressions.")

  (defvar holiday-belgian-holidays
    (append holiday-belgian-public-holidays holiday-belgian-misc-holidays)
    "List of Belgian holiday expressions.")

  (provide 'belgian-holidays)

  ;;; belgian-holidays ends here
#+END_SRC

** bongo - Media player
[[https://github.com/dbrock/bongo][bongo (GitHub)]]

Inserting media is cumbersome, the library buffer doesn't help. By
contrast, inserting and immediately enqueueing media from [[*dired - File manager][dired]] sparks
joy. The idea is from [[https://protesilaos.com/codelog/2020-08-06-emacs-bongo-extras/][Bongo media manager and extras (Protesilaos
Stavrou)]].

#+BEGIN_SRC emacs-lisp :noweb-ref bongo-config :tangle no
  (use-package bongo
    :straight t
    :bind
    (("C-c x k" . bongo)
     ("C-c k s" . bongo-seek)
     ("C-c k f" . bongo-seek-forward-10)
     ("C-c k b" . bongo-seek-backward-10)
     ("C-c k a" . bongo-replay-current)
     ("C-c k e" . bongo-perform-next-action)
     ("C-c k n" . bongo-play-next)
     ("C-c k p" . bongo-play-previous)
     ("C-c k x" . bongo-stop))
    :hook (dired-mode . bongo-dired-library-mode)
    :preface
    (eval-when-compile
      (require 'bongo))

    (define-advice bongo-default-library-buffer
        (:override () koek-bngo/get-default-library-buffer)
      (dired-noselect bongo-default-directory))

    (defun koek-bngo/reconfigure-for-wdired ()
      "Reconfigure bongo-dired-library for use with wdired.
  When wdired is enabled, disable bongo-dired-library, else, enable
  bongo-dired-library."
      (bongo-dired-library-mode (if wdired-mode 0 1)))

    (defun koek-bngo/enqueue (file-names &optional next)
      "Enqueue FILE-NAMES.
  When optional NEXT is truthy, enqueue after playing track, else,
  enqueue after last track."
      (with-temp-bongo-library-buffer
        (dolist (file-name file-names)
          (bongo-insert-file file-name))
        (bongo-enqueue-region (if next 'insert 'append)
                              (point-min) (point-max)
                              'maybe-display-playlist)))

    ;; Contrary to what its signature suggests,
    ;; `bongo-dired-enqueue-lines' only enqueues current line
    (defun koek-bngo/dired-enqueue-dwim (&optional arg)
      "Enqueue current line or marked lines.
  With `\\[universal-argument]' prefix argument ARG, enqueue after
  playing track, else, enqueue after last track."
      (interactive "P")
      (let* ((file-names (dired-get-marked-files))
             (mark-active
              (or (length> file-names 1)
                  (eq (car (dired-get-marked-files nil nil nil 'distinguish))
                      t))))
        (koek-bngo/enqueue file-names arg)
        (unless mark-active
          (dired-next-line 1))))

    (defun koek-bngo/dired-enqueue-next-dwim ()
      "Enqueue current line or marked lines after playing track."
      (interactive)
      (koek-bngo/dired-enqueue-dwim t))

    ;; Disable banner
    (define-advice bongo-default-playlist-buffer
        (:override () koek-bngo/get-default-playlist-buffer)
      (let ((buffer (get-buffer-create bongo-default-playlist-buffer-name)))
        (with-current-buffer buffer
          (unless (derived-mode-p 'bongo-playlist-mode)
            (bongo-playlist-mode)))
        buffer))

    (defun koek-bngo/play-pause ()
      "Pause or resume playback.
  When playback is stopped, play first unplayed track after last
  played track, first unplayed track or first track."
      (interactive)
      (with-bongo-playlist-buffer
        (let* ((current (bongo-point-at-first-line-satisfying
                         #'bongo-current-track-line-p))
               (next (or (and current
                              (bongo-point-at-first-line-satisfying
                               #'bongo-unplayed-track-line-p current))
                         (bongo-point-at-first-line-satisfying
                          #'bongo-unplayed-track-line-p)
                         (bongo-point-at-first-line-satisfying
                          #'bongo-track-line-p))))
          (cond
           ((bongo-playing-p)
            (bongo-pause/resume))
           (next
            (save-excursion
              (goto-char next)
              (bongo-play)))
           (t
            (user-error "Nothing to play"))))))
    :config
    (bind-keys
     ("C-c k k" . koek-bngo/play-pause)
     :map bongo-dired-library-mode-map
     ([remap bongo-dired-append-enqueue-lines] . koek-bngo/dired-enqueue-dwim)
     ([remap bongo-dired-insert-enqueue-lines] . koek-bngo/dired-enqueue-next-dwim))

    ;; Backends
    (setq bongo-enabled-backends '(mpv))
    (setq bongo-custom-backend-matchers
          '((mpv . (local-file "m4a"))
            (mpv . ("https:" . t))))

    ;; Libraries
    (setq bongo-prefer-library-buffers nil)
    (setq bongo-insert-whole-directory-trees t)
    (add-hook 'wdired-mode-hook #'koek-bngo/reconfigure-for-wdired)

    ;; Playlists
    (setq bongo-join-inserted-tracks nil)
    (setq bongo-display-playlist-after-enqueue nil)

    ;; Appearance
    (setq bongo-header-line-mode nil)
    (setq bongo-mode-line-indicator-mode nil)
    (setq bongo-mark-played-tracks t)
    (setq bongo-track-mark-icon-file-name nil)
    (setq bongo-display-track-icons nil)
    :delight bongo-dired-library-mode)
#+END_SRC

** Screencast

*** prepcast - Prepare for screencasting
#+BEGIN_SRC emacs-lisp
  (use-package prepcast
    :koek t
    :defer t
    :config
    (setq prepcast-scale 1.5)
    :delight)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle stow/emacs/.config/emacs/lisp/prepcast/prepcast.el
  ;;; prepcast.el --- Prepare for screencasting -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020-2023 Nicolas De Jaeghere

  ;; Author: Nicolas De Jaeghere <nicolas@dejaeghe.re>
  ;; Keywords: frames
  ;; URL: <https://github.com/Koekelas/dotfiles>

  ;; This file is not part of GNU Emacs.

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; This package provides prepcast-mode, a global minor mode.  When
  ;; enabled, prepare for screencasting, when disabled, revert
  ;; preparations.  A preparation can be anything, from increasing the
  ;; default face height to launching a program.

  ;;; Code:

  (eval-when-compile
    (require 'subr-x))
  (require 'seq)

  (defgroup prepcast nil
    "Prepare for screencasting."
    :group 'frames)

  (defcustom prepcast-scale 1.25
    "Scale of elements."
    :type 'float)

  (defcustom prepcast-prep-fs
    '(prepcast-prep-default-face prepcast-prep-moody prepcast-prep-keycast)
    "List of prepare functions.
  A prepare function prepares an element for screencasting and must
  return a function to revert the preparation or, to not revert the
  preparation, nil."
    :type 'function)

  (defvar prepcast--unprep-fs nil
    "List of unprepare functions.")

  (defun prepcast-prep-default-face ()
    "Prepare default face for screencasting."
    (let ((height (face-attribute 'default :height)))
      (set-face-attribute 'default nil :height (round (* height prepcast-scale)))
      (lambda ()
        (set-face-attribute 'default nil :height height))))

  (defun prepcast-prep-moody ()
    "Prepare moody for screencasting."
    (when (featurep 'moody)
      (let ((height moody-mode-line-height))
        (setq moody-mode-line-height (round (* height prepcast-scale)))
        (lambda ()
          (setq moody-mode-line-height height)))))

  (declare-function keycast-mode "ext:keycast")
  (defvar keycast-mode)

  (defun prepcast-prep-keycast ()
    "Prepare keycast for screencasting."
    (when (featurep'keycast)
      (unless keycast-mode
        (keycast-mode 1)
        (lambda ()
          (keycast-mode 0)))))

  ;;;###autoload
  (define-minor-mode prepcast-mode
    "Prepare for screencasting."
    :global t :lighter " Prep"
    (if prepcast-mode
        (unless prepcast--unprep-fs
          (setq prepcast--unprep-fs
                (thread-last prepcast-prep-fs
                  (mapcar #'funcall)
                  (seq-remove #'null))))
      (mapc #'funcall prepcast--unprep-fs)
      (setq prepcast--unprep-fs nil)))

  (provide 'prepcast)

  ;;; prepcast.el ends here
#+END_SRC

*** keycast - Show key presses
[[https://github.com/tarsius/keycast][keycast (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package keycast
    :straight t
    :defer t
    :config
    (setq keycast-mode-line-window-predicate #'moody-window-active-p)
    (setq keycast-mode-line-insert-after 'keycast-marker)
    (setq keycast-separator-width 3)
    (setq keycast-mode-line-remove-tail-elements nil))
#+END_SRC

* Languages
Several modes want the =txt= file extension. Insert [[*Text][text-mode]]
configuration here so [[*CMake][cmake-mode]] and [[*Conf][conf-mode]] can shadow the catchall
~auto-mode-alist~ entry.

#+BEGIN_SRC emacs-lisp :noweb no-export
  <<text-mode-config>>
#+END_SRC

** C family
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :mode
    (((rx ".c" string-end) . c-mode)
     ((rx (or ".cpp" ".cxx") string-end) . c++-mode)
     ((rx ".java" string-end) . java-mode))
    :config
    (bind-keys
     :map c-mode-map
     ("C-x p i l" . koek-eglt/init-clangd)
     ("C-x p i c" . koek-cmke/init)
     ("C-x p i m" . koek-mson/init)
     :map c++-mode-map
     ("C-x p i l" . koek-eglt/init-clangd)
     ("C-x p i c" . koek-cmke/init)
     ("C-x p i m" . koek-mson/init))

    ;; Resolve keybinding conflict with company
    (unbind-key "TAB" c-mode-base-map))

  (use-package cc-cmds
    :defer t
    :preface
    (define-advice c-update-modeline
        (:around (f) koek-cc/prevent-update-mode-name)
      (let ((name mode-name))
        (funcall f)
        (setq mode-name name)
        (force-mode-line-update))))

  (use-package cc-vars
    :defer t
    :config
    (setq c-default-style
          '((awk-mode  . "awk")
            (java-mode . "java")
            (other     . "stroustrup"))))
#+END_SRC

*** gino - Generate Arduino project :wip:
#+BEGIN_SRC emacs-lisp
  (use-package gino
    :load-path "lisp/gino"
    :commands gino-generate-project)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle stow/emacs/.config/emacs/lisp/gino/gino.el
  ;;; gino.el --- Generate Arduino project -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020 Nicolas De Jaeghere

  ;; Author: Nicolas De Jaeghere <nicolas@dejaeghe.re>
  ;; Keywords: tools
  ;; URL: https://github.com/Koekelas/dotfiles

  ;; This file is not part of GNU Emacs.

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Generate an Arduino project backed by Meson

  ;;; Code:

  (require 'subr-x)
  (require 'seq)

  (defvar gino-hardware-install-dirs '("/usr/share/arduino/hardware/")
    "List of file names to hardware specification install directories.")

  (defvar gino-hardware-whitelist-preds
    (list (lambda (spec)
            (let ((name (gino--get-in '(platform name) spec))
                  (version (gino--get-in '(platform version) spec)))
              (and (string= name "Arch Linux Arduino AVR Boards")
                   (string-match-p
                    (rx line-start "1.8." (one-or-more num) line-end) version)
                   t))))
    "List of hardware specification whitelist predicates.
  A hardware specification whitelist predicate is passed a hardware
  specification.")

  (defun gino--get-in (keys alist)
    "Return value for KEYS in nested ALIST.
  KEYS is a list of keys."
    (if keys
        (gino--get-in (cdr keys) (assq (car keys) alist))
      (cdr alist)))

  (defun gino--set-in (keys value alist)
    "Set value for KEYS to VALUE in nested ALIST.
  KEYS is a list of keys."
    (when-let ((key (car keys)))
      (let ((pair (or (assq key alist)
                      (let ((new-pair (cons key ())))
                        (push new-pair alist)
                        new-pair))))
        (setcdr pair (if-let ((rem-keys (cdr keys)))
                         (gino--set-in rem-keys value (cdr pair))
                       value))))
    alist)

  (defun gino--extract-keys (compound-key)
    "Extract keys from COMPOUND-KEY.
  COMPOUND-KEY is a string of dot separated keys."
    (mapcar #'intern (split-string compound-key (rx "."))))

  (defun gino--make-nested-alist (properties)
    "Return nested alist.
  PROPERTIES is an alist of compound key to value pairs."
    (seq-reduce (pcase-lambda (alist `(,key . ,value))
                  (gino--set-in (gino--extract-keys key) value alist))
                properties ()))

  (defun gino--read-properties (file-name)
    "Read properties from FILE-NAME."
    (let ((properties ()))
      (with-temp-buffer
        (insert-file-contents file-name)
        (while (re-search-forward         ; Matches across multiple lines
                (rx line-start
                    (submatch-n 1
                     (not (any "#\n")) (one-or-more (not (any "=")))) "="
                    (submatch-n 2 (one-or-more not-newline)) line-end)
                nil t)
          (push (cons (match-string 1) (match-string 2)) properties)))
      (gino--make-nested-alist properties)))

  (defun gino--read-hardware-specs (file-names)
    "Read hardware specifications from FILE-NAMES.
  FILE-NAMES is a list of file names to hardware specification
  install directories."
    (thread-last file-names
      (seq-mapcat
       (lambda (file-name)
         (file-expand-wildcards (expand-file-name "*/*/platform.txt" file-name)
                                'full)))
      (mapcar #'file-name-directory)
      (mapcar
       (lambda (file-name)
         `((home        . ,file-name)
           (boards      . ,(gino--read-properties
                            (expand-file-name "boards.txt" file-name)))
           (platform    . ,(gino--read-properties
                            (expand-file-name "platform.txt" file-name)))
           (programmers . ,(gino--read-properties
                            (expand-file-name "programmers.txt" file-name))))))))

  (defun gino--insert-section-heading (name)
    "Insert section heading into current.
  NAME is a string."
    (unless (= (point) 1)
      (insert "\n"))
    (insert "[" name "]\n"))

  (defun gino--normalize-property-value (value)
    "Normalize property value VALUE.
  VALUE is a symbol, number, string or list.  Value is converted to
  a string."
    (cond
     ((listp value)
      (format "[%s]" (mapconcat #'gino--normalize-property-value value ", ")))
     ((stringp value)
      (format "'%s'" value))
     (t
      (format "%s" value))))

  (defun gino--insert-property (key value)
    "Insert property into current.
  KEY is a string.  VALUE is a symbol, number, string or list."
    (insert key " = " (gino--normalize-property-value value) "\n"))

  (eval-and-compile
    (defun gino--propertyp (element)
      "Return whether ELEMENT is a property."
      (not (keywordp element)))

    (defun gino--normalize-sections-spec (spec &optional sections)
      "Normalize sections specification SPEC.
  SPEC is a list of section names and properties.  Specification is
  converted to a nested alist.  Keys are converted to strings.
  SECTIONS is used internally."
      (if spec
          (let ((section
                 (cons
                  (replace-regexp-in-string (rx line-start ":") ""
                                            (symbol-name (car spec)))
                  (mapcar (pcase-lambda (`(,key ,value))
                            (cons (symbol-name key) value))
                          (seq-partition
                           (seq-take-while #'gino--propertyp (cdr spec)) 2)))))
            (gino--normalize-sections-spec
             (seq-drop-while #'gino--propertyp (cdr spec))
             (cons section sections)))
        (reverse sections))))

  (defmacro gino--write-cross-file (file-name &rest spec)
    (declare (indent 1))
    `(with-temp-file ,file-name
       ,@(seq-mapcat (pcase-lambda (`(,name . ,properties))
                       (cons `(gino--insert-section-heading ,name)
                             (mapcar (pcase-lambda (`(,key . ,value))
                                       `(gino--insert-property ,key ,value))
                                     properties)))
                     (gino--normalize-sections-spec spec))))

  ;;;###autoload
  (defun gino-generate-project (file-name board-spec)
    "Generate Arduino project.
  FILE-NAME is a string, the file name to the project home
  directory.  BOARD-SPEC is an alist, the board specification.  It
  has two keys, hardware and board.  hardware points to a
  hardware specification.  board points to a board in hardware."
    (interactive
     (list
      (thread-last (read-directory-name "Project home: ")
        expand-file-name
        file-name-as-directory)
      (let ((candidates
             (let ((hardware-specs
                    (seq-filter
                     (lambda (spec)
                       (seq-some (lambda (pred)
                                   (funcall pred spec))
                                 gino-hardware-whitelist-preds))
                     (gino--read-hardware-specs gino-hardware-install-dirs))))
               (seq-mapcat
                (lambda (hardware-spec)
                  (let ((platform-name
                         (format "%s %s"
                                 (gino--get-in '(platform name) hardware-spec)
                                 (gino--get-in '(platform version) hardware-spec))))
                    (thread-last (gino--get-in '(boards) hardware-spec)
                      (mapcar #'cdr)
                      (seq-filter (apply-partially #'gino--get-in '(name)))
                      (mapcar (lambda (board-spec)
                                (cons (format "%s (%s)"
                                              (gino--get-in '(name) board-spec)
                                              platform-name)
                                      `((board    . ,board-spec)
                                        (hardware . ,hardware-spec))))))))
                hardware-specs))))
        (cdr (assoc (completing-read "Board: " candidates nil t) candidates)))))
    (make-directory file-name 'parents)
    (gino--write-cross-file (expand-file-name "cross.txt" file-name)
      :binaries
      c (executable-find "avr-gcc")
      cpp (executable-find "avr-g++")
      :properties
      ino_src (directory-files
               (thread-last (gino--get-in '(hardware home) board-spec)
                 (expand-file-name "cores/")
                 (expand-file-name
                  (gino--get-in '(board build core) board-spec))
                 file-name-as-directory)
               'full (rx (or ".c" ".cpp") line-end))
      :host_machine
      system "bare"))

  (provide 'gino)

  ;;; gino.el ends here
#+END_SRC

** Clojure and ClojureScript
[[https://github.com/clojure-emacs/clojure-mode][clojure-mode (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :straight t
    :mode
    (((rx ".clj" string-end) . clojure-mode)
     ((rx ".cljs" string-end) . clojurescript-mode)
     ((rx ".cljc" string-end) . clojurec-mode)
     ((rx ".edn" string-end) . clojure-mode))
    :config
    (bind-key "C-x p i k" #'koek-kndr/init clojure-mode-map)
    :delight
    (clojure-mode "Clj" :major)
    (clojurescript-mode "Cljs" :major)
    (clojurec-mode "Cljc" :major))
#+END_SRC

*** cider - Interact with process
[[https://github.com/clojure-emacs/cider][cider (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :straight t
    :after clojure-mode)

  (use-package cider-mode
    :defer t
    :config
    (use-package cider-eval
      :bind
      (:map cider-mode-map
       ("C-c C-c" . cider-load-buffer)))

    ;; Resolve keybinding conflict with org
    (unbind-key "C-c C-k" cider-mode-map)
    :delight)

  (use-package cider-common
    :defer t
    :config
    (setq cider-prompt-for-symbol nil))

  (use-package cider-repl
    :defer t
    :config
    ;; Resolve keybinding conflict with company
    (unbind-key "TAB" cider-repl-mode-map)

    (setq cider-repl-use-pretty-printing t))
#+END_SRC

** CMake
[[https://gitlab.kitware.com/cmake/cmake][cmake-mode (GitLab)]]

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :straight t
    :mode ((rx (or ".cmake" "/CMakeLists.txt") string-end) . cmake-mode)
    :preface
    ;; source tree, relative
    (defun koek-cmke/init (root config &optional interactive)
      (interactive
       (let ((root (or (koek-proj/locate-root) (user-error "Not in a project")))
             (config
              (or (car (koek-proj/locate-configs "CMakeLists.txt" nil 'prompt))
                  (user-error "No CMake configuration found"))))
         (list root config 'interactive)))
      (when interactive
        (message "Initializing CMake..."))
      (let* ((default-directory root)     ; Dynamic variable
             (result
              (progn
                (make-directory "build" 'no-error)
                (make-symbolic-link
                 "build/compile_commands.json" "compile_commands.json" 'overwrite)
                (call-process "cmake" nil nil nil
                              "-S" config "-B" "build/"
                              "-D" "CMAKE_EXPORT_COMPILE_COMMANDS=ON"))))
        (unless (zerop result)
          (error "CMake returned %d" result)))
      (when interactive
        (message "Initializing CMake...done")))
    :config
    (bind-key "C-x p i c" #'koek-cmke/init cmake-mode-map))
#+END_SRC

** Common Lisp
#+BEGIN_SRC emacs-lisp
  (use-package lisp-mode
    :mode (rx ".lisp" string-end))

  (use-package inf-lisp
    :after lisp-mode
    :config
    (setq inferior-lisp-program "sbcl"))
#+END_SRC

*** sly - Interact with process
[[https://github.com/joaotavora/sly][sly (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package sly
    :straight t
    :load-path "straight/build/sly/contrib" ; Silence warnings
    :after lisp-mode)

  (use-package sly-mrepl
    :defer t
    :config
    ;; Resolve keybinding conflict with company
    (unbind-key "TAB" sly-mrepl-mode-map))
#+END_SRC

** Conf
#+BEGIN_SRC emacs-lisp
  (use-package conf-mode
    :mode (rx (or ".desktop" "/cross.txt") string-end)
    :preface
    (defvar koek-conf/mode-names
      '((conf-colon-mode     . "Conf:")
        (conf-desktop-mode   . "Desktop")
        (conf-javaprop-mode  . "Properties")
        (conf-ppd-mode       . "PPD")
        (conf-space-mode     . "Conf\N{MIDDLE DOT}")
        (conf-toml-mode      . "TOML")
        (conf-unix-mode      . "Unix")
        (conf-windows-mode   . "INI")
        (conf-xdefaults-mode . "Xdefaults"))
      "Alist of Conf mode symbol to Conf mode name pairs.")

    (define-advice conf-mode-initialize
        (:after (&rest _args) koek-conf/update-mode-name)
      (setq mode-name
            '(:eval
              ;; When mode-name is evaluated during mode line update,
              ;; inhibit-mode-name-delight is unbound or false
              (or (and (not (bound-and-true-p inhibit-mode-name-delight))
                       (alist-get major-mode koek-conf/mode-names))
                  "Conf")))))
#+END_SRC

** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  (use-package elisp-mode
    :mode ((rx ".el" string-end) . emacs-lisp-mode)
    :preface
    ;; koek/default+load-path
    (define-advice elisp-flymake-byte-compile
        (:around (f &rest args) koek-el/normalize-flymake-load-path)
      (let ((elisp-flymake-byte-compile-load-path ; Dynamic variable
             (if (eq elisp-flymake-byte-compile-load-path 'koek/default+load-path)
                 (cons "." load-path)
               elisp-flymake-byte-compile-load-path)))
        (apply f args)))
    :config
    (use-package pp
      :bind
      (:map emacs-lisp-mode-map
       ("C-c e e" . pp-eval-last-sexp)
       ("C-c e m" . pp-macroexpand-last-sexp)
       :map lisp-interaction-mode-map
       ("C-c e e" . pp-eval-last-sexp)
       ("C-c e m" . pp-macroexpand-last-sexp)))

    (use-package helpful
      :bind
      (:map emacs-lisp-mode-map
       ("C-c C-d" . helpful-at-point)
       :map lisp-interaction-mode-map
       ("C-c C-d" . helpful-at-point)))

    (bind-keys
     :map emacs-lisp-mode-map
     ("C-c C-c" . eval-buffer)
     :map lisp-interaction-mode-map
     ("C-c C-c" . eval-buffer))

    (setq elisp-flymake-byte-compile-load-path 'koek/default+load-path)
    :delight (emacs-lisp-mode "El" :major))
#+END_SRC

*** checkdoc - Documentation checker
#+BEGIN_SRC emacs-lisp
  (use-package checkdoc
    :defer t
    :config
    (setq checkdoc-package-keywords-flag t))
#+END_SRC

** Erlang
[[https://github.com/erlang/otp][erlang (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package erlang
    :straight t
    :mode ((rx ".erl" string-end) . erlang-mode)
    :config
    ;; Set Erlang home
    (let* ((file-names
            (mapcar #'file-name-directory
                    (file-expand-wildcards "c:/Program Files/erl*/bin/erlc.exe")))
           ;; Dynamic variable, shadow Chocolatey shim
           (exec-path (append file-names exec-path)))
      (when-let ((file-name (executable-find "erlc")))
        (setq erlang-root-dir
              (thread-first file-name
                file-truename
                (locate-dominating-file "bin")))))
    :delight (erlang-mode "Erl" :major))
#+END_SRC

** HTML and CSS
#+BEGIN_SRC emacs-lisp
  (use-package mhtml-mode
    :mode (rx (or ".htm" ".html") string-end)
    :delight (mhtml-mode "HTML" :major))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :mode (rx ".css" string-end))
#+END_SRC

*** emmet - Expand CSS selector to HTML
[[https://github.com/smihica/emmet-mode][emmet-mode (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :straight t
    :bind
    (:map emmet-mode-keymap
     ("M-<iso-lefttab>" . emmet-expand-line))
    :hook (mhtml-mode css-mode)
    :config
    (setq emmet-self-closing-tag-style " /")
    :delight)
#+END_SRC

** JavaScript
#+BEGIN_SRC emacs-lisp
  (use-package js
    :mode ((rx ".js" string-end) . js-mode)
    :config
    ;; Resolve keybinding conflict with eglot
    (unbind-key "M-." js-mode-map)

    (setq js-enabled-frameworks '(javascript))
    :delight (js-mode "JS" :major))
#+END_SRC

*** indium - Interact with process
[[https://github.com/NicolasPetton/Indium][indium (GitHub)]]

#+BEGIN_SRC emacs-lisp
  ;; Prevent indium from creating Chrome profile directory during
  ;; installation
  (setq indium-chrome-data-dir nil)

  (use-package indium-interaction
    :straight indium
    :hook (js-mode . indium-interaction-mode)
    :config
    ;; Resolve keybinding conflict with documentation keymap
    (unbind-key "C-c d" indium-interaction-mode-map)
    :delight)

  (use-package indium-chrome
    :defer t
    :config
    (setq indium-chrome-data-dir
          (no-littering-expand-var-file-name "indium/chrome-profile/"))
    (make-directory indium-chrome-data-dir 'parents))

  (use-package indium-repl
    :defer t
    :config
    ;; Resolve keybinding conflict with company
    (unbind-key "TAB" indium-repl-mode-map))
#+END_SRC

** JSON
[[https://github.com/joshwnj/json-mode][json-mode (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :straight t
    :mode (rx ".json" string-end))
#+END_SRC

** Make
#+BEGIN_SRC emacs-lisp
  (use-package make-mode
    :mode ((rx "/Makefile" string-end) . makefile-gmake-mode)
    :delight
    (makefile-mode "Make" :major)
    (makefile-automake-mode "Automake" :major)
    (makefile-bsdmake-mode "BSDMake" :major)
    (makefile-gmake-mode "GMake" :major)
    (makefile-imake-mode "IMake" :major)
    (makefile-makepp-mode "Make++" :major))
#+END_SRC

** Markdown
[[https://github.com/jrblevin/markdown-mode][markdown-mode (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode (rx ".md" string-end)
    :config
    (setq markdown-command "pandoc -s -f markdown -t html5")
    (setq markdown-use-pandoc-style-yaml-metadata t)
    (setq markdown-asymmetric-header t)
    :delight (markdown-mode "MD" :major))
#+END_SRC

** Meson
[[https://github.com/wentasah/meson-mode][meson-mode (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package meson-mode
    :straight t
    :mode (rx "/meson.build" string-end)
    :preface
    (defun koek-mson/init (root config &optional interactive)
      (interactive
       (let ((root (or (koek-proj/locate-root) (user-error "Not in a project")))
             (config
              (or (car (koek-proj/locate-configs "meson.build" nil 'prompt))
                  (user-error "No Meson configuration found"))))
         (list root config 'interactive)))
      (when interactive
        (message "Initializing Meson..."))
      (let* ((default-directory root)     ; Dynamic variable
             (result
              (progn
                (make-directory "build" 'no-error)
                (make-symbolic-link
                 "build/compile_commands.json" "compile_commands.json" 'overwrite)
                (call-process "meson" nil nil nil config "build/"))))
        (unless (zerop result)
          (error "Meson returned %d" result)))
      (when interactive
        (message "Initializing Meson...done"))))
#+END_SRC

** Octave and MATLAB
#+BEGIN_SRC emacs-lisp
  (use-package octave
    :mode ((rx ".m" string-end) . octave-mode)
    :config
    ;; Insert MATLAB compatible comments
    (setq octave-comment-char ?%)
    (setq octave-comment-start (char-to-string octave-comment-char))
    (setq octave-block-comment-start
          (concat (make-string 2 octave-comment-char) " "))

    (setq octave-blink-matching-block nil)
    :delight (octave-mode "M" :major))
#+END_SRC

** OpenSCAD
[[https://github.com/openscad/openscad][scad-mode (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package scad-mode
    :straight t
    :mode (rx ".scad" string-end)
    :config
    ;; Resolve smartparens' handlers not being called
    (unbind-key "<return>" scad-mode-map)

    (setq scad-indent-style "stroustrup"))
#+END_SRC

** Org
For agendas or capture templates, respectively see [[*Agendas][Agendas]] or [[*Capture templates][Capture
templates]].

#+BEGIN_SRC emacs-lisp
  (use-package org
    :mode ((rx ".org" string-end) . org-mode)
    :bind
    (:map org-mode-map
     ("C-c o k" . org-clone-subtree-with-time-shift) ; [K]lone [sic]
     ("C-c h f" . org-forward-heading-same-level)
     ("C-c h b" . org-backward-heading-same-level)
     ("C-c h n" . org-next-visible-heading)
     ("C-c h p" . org-previous-visible-heading)
     ("C-c h a" . org-previous-block)
     ("C-c h e" . org-next-block))
    :hook
    ((window-setup . org-clock-persistence-insinuate) ; After initial buffer
     (org-mode . org-cdlatex-mode)
     (org-babel-after-execute . org-redisplay-inline-images))
    :config
    (use-package avy
      :bind
      (:map org-mode-map
       ("C-c j M-h" . avy-org-goto-heading-timer)))

    (use-package consult
      :bind
      (:map org-mode-map
       ("C-c j h" . consult-org-heading)
       ([remap consult-imenu] . consult-org-heading)))

    (use-package org-clock
      :bind
      (:map org-mode-map
       ("C-c o i" . org-clock-in)))

    (use-package outline
      :bind
      (:map org-mode-map
       ("C-c h u" . outline-up-heading)))

    ;; General
    (push 'org-protocol org-modules)
    (push 'beamer org-export-backends)
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((C . t) ; C and C++
                                   (clojure . t)
                                   (lisp . t)
                                   (emacs-lisp . t)
                                   (java . t)
                                   (js . t)
                                   (octave . t)
                                   (python . t)
                                   (scheme . t)
                                   (sql . t)))
    (setq org-adapt-indentation nil)

    ;; Headings
    (setq org-startup-folded t)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "STALLED(s@/!)" "|" "DONE(d!)" "ABANDONED(a@)")))
    (setq org-tags-column 0)

    ;; Appearance
    (setq org-hide-emphasis-markers t)
    (setq org-use-sub-superscripts '{})
    (setq org-pretty-entities t)
    (setq org-highlight-latex-and-related '(native))
    (push '("" "listings" nil) org-latex-packages-alist)

    ;; Appearance - Headings
    (setq org-fontify-done-headline nil)
    (setq org-ellipsis truncate-string-ellipsis)

    ;; Appearance - Images
    (setq org-startup-with-inline-images t)
    (let ((width (thread-last (display-monitor-attributes-list)
                   car                    ; Primary monitor
                   (alist-get 'geometry)  ; Arrangement/resolution
                   (nth 2))))             ; Width
      (setq org-image-actual-width (floor (* width (/ 1 5.0)))))

    ;; Appearance - LaTeX previews
    (setq org-startup-with-latex-preview t)
    (setq org-preview-latex-image-directory
          (no-littering-expand-var-file-name "org/latex-previews/"))
    (setq org-format-latex-options
          (plist-put org-format-latex-options :scale (/ 4 3.0)))
    :delight org-cdlatex-mode)

  (use-package org-agenda
    :bind
    ("C-c o a" . org-agenda)
    :config
    (setq org-agenda-sticky t)
    (setq org-agenda-time-leading-zero t)
    (add-hook 'org-agenda-mode-hook #'koek-subr/reset-default-directory))

  (use-package org-capture
    :bind
    (("C-c o c" . org-capture)
     ("C-c j s" . org-capture-goto-last-stored))
    :preface
    (defun koek-org/setup-tag-completion ()
      "Setup tag completion in current.
  Candidates are collected from agenda files."
      (setq-local org-complete-tags-always-offer-all-agenda-tags t))
    :config
    (add-hook 'org-capture-mode-hook #'hack-local-variables)
    (add-hook 'org-capture-mode-hook #'koek-org/setup-tag-completion))

  (use-package org-clock
    :bind
    (("C-c j c" . org-clock-goto)
     ("C-c o o" . org-clock-out)
     ("C-c o x" . org-clock-cancel))
    :config
    (setq org-clock-persist 'clock)
    (org-clock-load))

  (use-package org-list
    :bind
    ("C-c o t" . org-cycle-list-bullet))  ; List [t]ype

  (use-package org-refile
    :defer t
    :config
    (setq org-refile-targets
          '((nil . (:maxlevel . 3))       ; Current
            (org-agenda-files . (:maxlevel . 3))))
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path 'buffer-name))

  (use-package org-src
    :defer t
    :preface
    (define-advice org-src--construct-edit-buffer-name
        (:override (org-buffer-name _lang) koek-org/construct-edit-buffer-name)
      (koek-subr/construct-earmuffed-name "org-src" org-buffer-name))
    :config
    (setq org-src-window-setup 'plain)
    (setq org-src-ask-before-returning-to-edit-buffer nil)
    :delight)
#+END_SRC

*** Babel
Tangling is modified in two important ways. First, the function
~koek-org/gen-autoloads~ generates autoloads for Emacs Lisp packages.
It's part of tangling [[*Embedded packages][embedded packages]]. Second, the function
~koek-org/process-file-end~ processes the file end according to the
value of the variable ~require-final-newline~, see [[*Whitespace settings][Whitespace settings]].
It's part of tangling [[*yasnippet - Snippets][embedded snippets]].

#+BEGIN_SRC emacs-lisp
  (use-package ob-core
    :defer t
    :preface
    (defun koek-org/get-code-block-vars ()
      "Return variables for current code block."
      (thread-last (org-babel-get-src-block-info 'light)
        (nth 2)                           ; Header arguments
        (seq-filter (pcase-lambda (`(,type))
                      (eq type :var)))
        (mapcar #'cdr)
        (mapcar
         (lambda (var)
           (string-match
            (rx (group-n 1 (one-or-more (not "="))) "="
                (group-n 3 (zero-or-one "\"")) (group-n 2 (zero-or-more not-newline)) (backref 3))
            var)
           (let ((name (match-string 1 var))
                 (value (match-string 2 var)))
             (cons name (unless (string-empty-p value) value)))))))

    (defun koek-org/get-code-block-var-value (name)
      "Return value of variable NAME for current code block.
  NAME is a string, the name of the variable."
      (when-let ((var (seq-find (pcase-lambda (`(,nm))
                                  (string-equal nm name))
                                (koek-org/get-code-block-vars))))
        (cdr var)))
    :config
    ;; Evaluate code blocks in buffer after confirmation
    (let ((whitelist nil))
      (setq org-confirm-babel-evaluate
            (lambda (_language _body)
              ;; A reference to a buffer is a good id but would storing
              ;; a reference prevent the buffer from being garbage
              ;; collected?
              (let ((id (or (buffer-file-name) (buffer-name))))
                (unless (assoc id whitelist)
                  (push (cons id
                              (yes-or-no-p
                               (format "Evaluate code blocks in %s on your system this session? "
                                       id)))
                        whitelist))
                (not (cdr (assoc id whitelist))))))))

  (use-package ob-tangle
    :defer t
    :preface
    (autoload #'byte-recompile-file "bytecomp")

    (define-advice org-babel-tangle
        (:around (f &rest args) koek-org/disable-recentf)
      ;; Dynamic variables
      (let ((find-file-hook (remq 'recentf-track-opened-file find-file-hook))
            (write-file-functions
             (remq 'recentf-track-opened-file write-file-functions)))
        (apply f args)))

    (defun koek-org/process-file-end ()
      "Process end of tangled file.
  Code blocks end with empty line.  When `require-final-newline' is
  nil, delete empty line at end of file."
      (unless require-final-newline
        (save-excursion
          (goto-char (point-max))
          (unless (bobp)
            (delete-char -1)
            (save-buffer)))))

    (defun koek-org/gen-autoloads ()
      "Generate autoloads for Emacs Lisp packages."
      (when (derived-mode-p 'emacs-lisp-mode)
        (let* ((file-name (buffer-file-name))
               (package-dir (file-name-directory file-name))
               (package-name (thread-first package-dir
                               directory-file-name
                               file-name-base))
               (autoload-file
                (expand-file-name (concat package-name "-autoloads.el")
                                  package-dir)))
          (when (string-equal (file-name-base file-name) package-name)
            (make-directory-autoloads package-dir autoload-file)
            (kill-buffer (find-buffer-visiting autoload-file))))))

    (defun koek-org/compile-emacs-lisp ()
      "Compile Emacs Lisp files."
      (when (derived-mode-p 'emacs-lisp-mode)
        (byte-recompile-file (buffer-file-name) nil 0)))
    :config
    ;; Generate autoloads then compile. `add-hook' adds to the front.
    (add-hook 'org-babel-post-tangle-hook #'koek-org/compile-emacs-lisp)
    (add-hook 'org-babel-post-tangle-hook #'koek-org/gen-autoloads)
    (add-hook 'org-babel-post-tangle-hook #'koek-org/process-file-end)
    (add-hook 'org-babel-post-tangle-hook #'hack-local-variables))

  (use-package ob-clojure
    :defer t
    :config
    (setq org-babel-clojure-backend 'cider))
#+END_SRC

*** Link
#+BEGIN_SRC emacs-lisp
  (use-package ol
    :bind
    ("C-c o l" . org-store-link)
    :config
    (setq org-link-keep-stored-after-insertion t))

  (use-package ol-bbdb
    :defer t
    :preface
    (defun koek-org/construct-birthday-entry-name (name age _age-suffix)
      "Return name of agenda entry for birthday.
  NAME is a string, the name of the person.  AGE is an integer, the
  age of the person."
      (format "[[bbdb:%s][%s (%d %s old)]]"
              name name age (if (= age 1) "year" "years")))
    :config
    ;; BBDB anniversary (many, any type) and vCard ANNIVERSARY (one, any
    ;; type except birthday) aren't compatible, birthday and BDAY are
    (setq org-bbdb-anniversary-field 'birthday)
    (setq org-bbdb-anniversary-format-alist
          '(("birthday" . koek-org/construct-birthday-entry-name))))
#+END_SRC

*** Export
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'htmlize)         ; Optional dependency

  (use-package ox
    :defer t
    :config
    (setq org-export-time-stamp-file nil)
    (setq org-export-headline-levels 4)
    (setq org-export-with-date nil)
    (setq org-export-with-toc 3))

  (use-package ox-html
    :defer t
    :config
    (setq org-html-doctype "html5")
    (setq org-html-html5-fancy t)
    (setq org-html-validation-link nil))

  (use-package ox-latex
    :defer t
    :config
    (setq org-latex-pdf-process '("latexmk -pdf %f"))
    (setq org-latex-src-block-backend 'listings)

    ;; Setup hyperref
    (let ((options
           (let ((normalized (replace-regexp-in-string
                              (rx (one-or-more (any " \n"))) ""
                              org-latex-hyperref-template)))
             (string-match
              (rx "{" (group-n 1 (one-or-more (any alpha "={}%,"))) "}")
              normalized)
             (split-string (match-string 1 normalized) ","))))
      (setq org-latex-hyperref-template
            (concat "\\hypersetup{\n "
                    (string-join (append options '("hidelinks")) ",\n ")
                    "\n}\n"))))
#+END_SRC

*** org-caldav - Sync calendars
[[https://github.com/dengste/org-caldav][org-caldav (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package org-caldav
    :straight t
    :bind
    ("C-c o s" . org-caldav-sync))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :mode ((rx ".py" string-end) . python-mode)
    :bind
    (:map python-mode-map
     ("C-x C-e" . python-shell-send-statement))
    :preface
    (defun koek-py/disable-checker ()
      "Disable Python checker in current."
      (remove-hook 'flymake-diagnostic-functions #'python-flymake 'local))
    :config
    (add-hook 'python-mode-hook #'koek-py/disable-checker)
    :delight (python-mode "Py" :major))
#+END_SRC

*** pipenv - Consume packages
[[https://github.com/pwalsh/pipenv.el][pipenv (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package pipenv
    :straight t
    :hook (python-mode . pipenv-mode)
    :delight)
#+END_SRC

** Scheme
#+BEGIN_SRC emacs-lisp
  (use-package scheme
    :mode ((rx ".scm" string-end) . scheme-mode)
    :delight
    (scheme-mode
     (:eval
      (if geiser-impl--implementation
          (capitalize (symbol-name geiser-impl--implementation))
        "Scm"))
     :major))
#+END_SRC

*** geiser - Interact with process
[[https://github.com/jaor/geiser][geiser (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'geiser-guile)    ; Optional dependency

  (use-package geiser
    :straight t
    :after scheme)

  (use-package geiser-autodoc
    :defer t
    :delight)

  (use-package geiser-company
    :defer t
    :preface
    (define-advice geiser-company--setup-company
        (:around (f &rest args) koek-gsr/prevent-setup-backends)
      (let ((backends company-backends))
        (apply f args)
        (setq company-backends backends))))

  (use-package geiser-mode
    :defer t
    :delight)

  (use-package geiser-repl
    :defer t
    :config
    ;; Resolve keybinding conflict with company
    (unbind-key "TAB" geiser-repl-mode-map))
#+END_SRC

** SQL
#+BEGIN_SRC emacs-lisp
  (use-package sql
    :mode ((rx ".sql" string-end) . sql-mode)
    :preface
    ;; When SQL dialect is setup, mode-name is overridden, i.e., delight
    ;; is undone
    (define-advice sql-highlight-product (:after () koek-sql/update-mode-name)
      (setq mode-name
            '(:eval
              (or (and (not (bound-and-true-p inhibit-mode-name-delight))
                       (not (eq sql-product 'ansi))
                       (sql-get-product-feature sql-product :name))
                  "SQL"))))
    :config
    (autoload #'find-library-name "find-func")
    (autoload #'define-abbrev "abbrev")

    ;; Upcase keywords after insertion
    (let ((keywords
           (split-string
            (with-temp-buffer
              (insert-file-contents (find-library-name "sql"))
              (search-forward "ANSI Reserved keywords")
              (buffer-substring
               (re-search-forward (rx (one-or-more (not "\""))))
               (re-search-forward (rx (one-or-more (not  ")"))))))
            nil 'omit-nulls "\"")))
      (dolist (keyword keywords)
        (define-abbrev sql-mode-abbrev-table keyword (upcase keyword)
                       nil :enable-function #'koek-bbrv/in-code-p :system t)))

    (setq sql-product 'postgres))
#+END_SRC

*** sql-indent - Indent code
#+BEGIN_SRC emacs-lisp
  (use-package sql-indent
    :straight t
    :hook (sql-mode . sqlind-minor-mode)
    :delight sqlind-minor-mode)
#+END_SRC

** TeX
TeX configuration is a placeholder. [[*Org][Org]] optionally requires CDLaTeX
which requires AUCTeX.

[[https://www.gnu.org/software/auctex/][auctex]]

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :straight auctex
    :mode ((rx ".tex" string-end) . TeX-tex-mode))
#+END_SRC

*** cdlatex - Completion
[[https://github.com/cdominik/cdlatex][cdlatex (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package cdlatex
    :straight t
    :hook (LaTeX-mode . cdlatex-mode)
    :delight)
#+END_SRC

** Text
#+BEGIN_SRC emacs-lisp :noweb-ref text-mode-config :tangle no
  (use-package text-mode
    :mode (rx (or ".txt" "/README" "/LICENSE") string-end)
    :preface
    (defvar koek-txt/insecure-modes
      '(sgml-mode                         ; mhtml-mode derives from sgml-mode
        snippet-mode)
      "List of major mode symbols.
  Modes are insecure about being derived from text-mode.")

    (defvar koek-txt/confident-hook nil
      "Normal hook run after enabling text-mode or derived modes.
  Modes are confident about being derived from text-mode.")

    (defun koek-txt/run-confident-hook ()
      "Run `koek-txt/confident-hook'."
      (unless (apply #'derived-mode-p koek-txt/insecure-modes)
        (run-hooks 'koek-txt/confident-hook)))
    :config
    (add-hook 'text-mode-hook #'koek-txt/run-confident-hook)
    :delight (text-mode "Txt" :major))
#+END_SRC

*** outline - Outlines
#+BEGIN_SRC emacs-lisp
  (use-package outline
    ;; outline-minor-mode-prefix, outline-mode-prefix-map, org
    :bind
    (:map outline-minor-mode-map
     ("C-c h f" . outline-forward-same-level)
     ("C-c h b" . outline-backward-same-level)
     ("C-c h n" . outline-next-visible-heading)
     ("C-c h p" . outline-previous-visible-heading)
     ("C-c h u" . outline-up-heading)
     ("C-c h RET" . outline-insert-heading))
    :preface
    (defun koek-otln/get-level ()
      (length (match-string 1)))

    ;; capture group
    (defmacro koek-otln/set-headings (modes pattern)
      (declare (indent 1))
      (let ((value-sym (gensym)))
        `(let ((,value-sym ,pattern))
           ,@(seq-mapcat
              (lambda (mode)
                (let* ((prefix "koek-otln/")
                       (mode-name (symbol-name mode))
                       (pattern-sym (koek-subr/intern
                                     prefix mode-name "-pattern"))
                       (f-sym (koek-subr/intern
                               prefix "setup-" mode-name "-pattern"))
                       (hook-sym (koek-subr/intern mode-name "-hook")))
                  `((defvar ,pattern-sym ,value-sym
                      ,(format "Regular expression matching a heading in `%s'."
                               mode-name))

                    (defun ,f-sym ()
                      ,(format "Setup heading pattern in `%s'" mode-name)
                      (setq-local outline-regexp ,pattern-sym)
                      (setq-local outline-level #'koek-otln/get-level))

                    ;; Setup then enable. `add-hook' adds to the front.
                    ;; The reverse has no effect.
                    (add-hook ',hook-sym #'outline-minor-mode)
                    (add-hook ',hook-sym #',f-sym))))
              modes))))

    (koek-otln/set-headings (clojure-mode lisp-mode emacs-lisp-mode scheme-mode)
      (rx ";;" (group-n 1 (one-or-more ";")) " "))
    (koek-otln/set-headings (c-mode c++-mode java-mode js-mode scad-mode)
      (rx "//" (group-n 1 (one-or-more "/")) " "))
    (koek-otln/set-headings (erlang-mode octave-mode)
      (rx "%%" (group-n 1 (one-or-more "%")) " "))
    (koek-otln/set-headings (css-mode)
      (rx "/*" (group-n 1 (one-or-more "*")) " "))
    (koek-otln/set-headings (python-mode)
      (rx "#" (group-n 1 (one-or-more "#")) " "))
    :config
    (use-package consult
      :bind
      (:map outline-minor-mode-map
       ("C-c j h" . consult-outline)))

    (setq outline-minor-mode-cycle t)
    (setq outline-minor-mode-highlight 'override)
    :delight outline-minor-mode)
#+END_SRC

** Wolfram Language
[[https://github.com/kawabata/wolfram-mode][wolfram-mode (GitHub)]]

#+BEGIN_SRC emacs-lisp
  (use-package wolfram-mode
    :straight t
    :mode (rx ".wl" string-end)
    :delight (wolfram-mode "WL" :major))
#+END_SRC

** YASnippet
For the minor mode, see [[*yasnippet - Snippets][yasnippet - Snippets]].

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :mode ("/snippets/" . snippet-mode))
#+END_SRC

* Appearance

** Frame settings
Maximize frames. Configuring this during early initialization reduces
startup time.

#+BEGIN_SRC emacs-lisp :tangle stow/emacs/.config/emacs/early-init.el
  (push '(fullscreen . maximized) default-frame-alist)
#+END_SRC

Show file name in title bar.

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
        '((:eval
           (let ((root (koek-proj/get-root))
                 (file-name (buffer-file-name)))
             (cond
              ((and root file-name)
               (format "~%s/%s"
                       (koek-proj/get-name) (file-relative-name file-name root)))
              (file-name
               (abbreviate-file-name file-name))
              (t
               "%b"))))
          " - Emacs"))
#+END_SRC

Disable menu bar, tool bar and scroll bars. Configuring this during
early initialization reduces startup time.

#+BEGIN_SRC emacs-lisp :tangle stow/emacs/.config/emacs/early-init.el
  ;; Prefer setting frame parameters to disabling modes
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars . nil) default-frame-alist)
#+END_SRC

Disable blink cursor.

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

** Theme infrastructure
Parts of this configuration need to act on theme changes and need to
know the theme variant, whether a theme is a light or dark theme.
Define theme infrastructure.

#+BEGIN_SRC emacs-lisp
  (defvar koek-thm/enable-hook nil
    "Normal hook run after enabling theme.")

  (define-advice enable-theme (:after (&rest _args) koek-thm/run-enable-hook)
    (run-hooks 'koek-thm/enable-hook))

  (defvar koek-thm/dark-themes '(modus-vivendi)
    "List of theme symbols.
  Themes are dark themes.")

  (defun koek-thm/darkp (&optional theme)
    "Return whether THEME is a dark theme.
  Optional THEME is a symbol, the theme to interrogate and defaults
  to the current theme."
    (memq (or theme (car custom-enabled-themes)) koek-thm/dark-themes))
#+END_SRC

Match frame theme variant, the window decoration theme variant, with
current theme.

#+BEGIN_SRC emacs-lisp
  (defun koek-thm/set-frame-theme-variant-xprop (frame dark)
    (call-process "xprop" nil 0 nil
                  "-id" (frame-parameter frame 'outer-window-id)
                  "-f" "_GTK_THEME_VARIANT" "8u"
                  "-set" "_GTK_THEME_VARIANT" (if dark "dark" "")))

  (defun koek-thm/set-frame-theme-variant-none (_frame _dark)
    nil)

  (defvar koek-thm/set-frame-theme-variant-f
    (cond
     ((executable-find "xprop")
      #'koek-thm/set-frame-theme-variant-xprop)
     (t
      #'koek-thm/set-frame-theme-variant-none)))

  (defun koek-thm/set-frame-theme-variant (frame dark)
    (funcall koek-thm/set-frame-theme-variant-f frame dark))

  (defun koek-thm/update-frame-theme-variant (frame)
    (koek-thm/set-frame-theme-variant frame (koek-thm/darkp)))

  (defun koek-thm/update-frame-theme-variant-all ()
    "Update theme variant of all frames."
    (let ((dark (koek-thm/darkp)))
      (mapc (lambda (frame)
              (koek-thm/set-frame-theme-variant frame dark))
            (frame-list))))

  (add-hook 'after-make-frame-functions #'koek-thm/update-frame-theme-variant)
  (add-hook 'koek-thm/enable-hook #'koek-thm/update-frame-theme-variant-all)
#+END_SRC

** modus-themes - Accessible light and dark theme
[[https://git.sr.ht/~protesilaos/modus-themes][modus-themes (sourcehut)]]

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :straight t
    :preface
    (defun koek-mt/load (variant)
      "Load and enable Modus theme variant VARIANT.
  VARIANT is a symbol, the variant of the Modus theme, either
  operandi or vivendi."
      (pcase-let* ((koek-thm/enable-hook nil) ; Dynamic variable
                   (themes '(modus-operandi modus-vivendi))
                   (`(,new ,old) (if (eq variant 'operandi)
                                     themes
                                   (reverse themes))))
        (when (custom-theme-enabled-p old)
          (disable-theme old))
        (unless (custom-theme-p new)
          (load-theme new 'no-confirm 'no-enable))
        (enable-theme new)
        (modus-themes-with-colors
          (custom-set-faces
           `(dired-directory     ((,class :inherit bold)))
           `(pdf-links-read-link ((,class
                                   :foreground unspecified :background unspecified
                                   :inherit (modus-themes-intense-magenta bold)))))))
      ;; After user theme
      (run-hooks 'koek-thm/enable-hook))

    (defun koek-mt/toggle-variant ()
      "Toggle Modus theme variant."
      (interactive)
      (koek-mt/load
       (if (eq (car custom-enabled-themes) 'modus-operandi) 'vivendi 'operandi)))
    :init
    (bind-key "C-c z t" #'koek-mt/toggle-variant)

    (setq modus-themes-deuteranopia t)
    (setq modus-themes-mixed-fonts t)
    (setq modus-themes-bold-constructs t)
    (setq modus-themes-italic-constructs t)
    (setq modus-themes-fringes nil)
    (setq modus-themes-subtle-line-numbers t)
    (setq modus-themes-mode-line '(moody accented))
    (setq modus-themes-region '(bg-only))
    (setq modus-themes-hl-line '(accented underline))
    (let ((defaults '(background overline variable-pitch)))
      (setq modus-themes-headings
            `((1 . (1.3 ,@defaults))
              (2 . (1.2 ,@defaults))
              (3 . (1.1 ,@defaults))
              (t . ,defaults))))
    (setq modus-themes-box-buttons '(flat variable-pitch))
    (setq modus-themes-org-blocks 'gray-background)
    :config
    (koek-mt/load 'vivendi))
#+END_SRC

** Fonts
Try [[https://www.fsd.it/shop/fonts/pragmatapro/][PragmataPro]] or [[https://typeof.net/Iosevka/][Iosevka]] for fixed pitch and [[https://www.ibm.com/plex/][IBM Plex]] for variable
pitch.

#+BEGIN_SRC emacs-lisp
  (defvar koek-font/pairs
    '(((:family "PragmataPro Liga" :height 110)
       (:family "IBM Plex Sans" :height 1.0))
      ((:family "Iosevka" :height 110)
       (:family "IBM Plex Sans" :height 1.0)))
    "List of font pairs.
  A font pair is a list of two font specifications, one for fixed
  pitch and one for variable pitch faces.  A font specification is
  a plist of face attributes, see `set-face-attribute'.  Both font
  specifications must set the family face attribute.  The fixed
  pitch font specification must set an absolute height, the
  variable pitch optionally a relative height.")

  (when-let* ((pair
               (let ((families (seq-uniq (font-family-list))))
                 (seq-find
                  (lambda (pair)
                    (seq-every-p (lambda (spec)
                                   (member (plist-get spec :family) families))
                                 pair))
                  koek-font/pairs)))
              (fixed (car pair))
              (variable (cadr pair)))
    (apply #'set-face-attribute 'default nil fixed)
    (apply #'set-face-attribute
           'fixed-pitch nil (plist-put (copy-sequence fixed) :height 1.0))
    (apply #'set-face-attribute 'variable-pitch nil variable))
#+END_SRC

** window-divider - Show window divider
Unlike the default window divider, which is drawn in the left fringe
of the right window, the ~window-divider-mode~ divider is drawn between
windows and continues in the mode line.

#+BEGIN_SRC emacs-lisp
  (setq window-divider-default-right-width 1)
  (window-divider-mode)
#+END_SRC

** koek-ml - Custom mode line
koek-ml depends on moody. Insert [[*moody - Tabs and ribbons][moody]] configuration here so koek-ml
can load moody.

#+BEGIN_SRC emacs-lisp :noweb no-export
  <<moody-config>>
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package koek-ml
    :koek t
    :init
    (koek-ml-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle stow/emacs/.config/emacs/lisp/koek-ml/koek-ml.el
  ;;; koek-ml --- Custom mode line -*- lexical-binding: t; -*-

  ;; Copyright (C) 2021-2023 Nicolas De Jaeghere

  ;; Author: Nicolas De Jaeghere <nicolas@dejaeghe.re>
  ;; Keywords: frames
  ;; URL: <https://github.com/Koekelas/dotfiles>

  ;; This file is not part of GNU Emacs.

  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; This package provides koek-ml-mode, a global minor mode configuring
  ;; a custom mode line, for use with Nicolas' Emacs configuration.

  ;;; Code:

  (eval-when-compile
    (require 'subr-x)
    (require 'ediff-init)
    (require 'pdf-macs))
  (require 'seq)
  (require 'koek-subr)
  (require 'moody)

  ;;; Custom

  (defgroup koek-ml nil
    "Custom mode line."
    :group 'frames)

  (defface koek-ml/selected-workspace '((t . (:inherit mode-line-emphasis)))
    "Face for selected workspace label in mode line.")

  (defface koek-ml/unselected-workspace nil
    "Face for unselected workspace label in mode line.")

  (defface koek-ml/variant '((t . (:inherit mode-line-emphasis)))
    "Face for variant label in mode line.")

  ;;; Utility variables and functions

  (defvar koek-ml/separator (make-string 3 ?\s)
    "Mode line group separator.")

  (defvar koek-ml/large-separator
    (make-string (* (length koek-ml/separator) 5) ?\s)
    "Mode line left right separator.")

  (defun koek-ml/strip-percent-constructs (s)
    "Strip percent constructs from string S.
  S is a string, the string to strip percent constructs from."
    (thread-last s
      (replace-regexp-in-string (rx "%" (not "%")) "" s)
      (string-replace "%%" "%")))

  ;;; Constructs

  ;;;; Dummies

  (defvar koek-ml/dummies '((eldoc-mode-line-string nil))
    "Mode line construct for dummies.
  A dummy prevents a package from altering the mode line.")

  ;;;; eldoc

  (defvar koek-ml/eldoc
    '(eldoc-mode-line-string ("" eldoc-mode-line-string koek-ml/separator))
    "Mode line construct for eldoc.")
  (put 'koek-ml/eldoc 'risky-local-variable t)

  ;;;; ace-window

  (defun koek-ml/prevent-setup-ace (f &rest args)
    "Prevent ace-window from altering the mode line.
  Intended as advice around `ace-window-display-mode'."
    (let ((format (default-value 'mode-line-format)))
      (apply f args)
      (setq-default mode-line-format format)
      (force-mode-line-update 'all)))

  (defun koek-ml/get-window-label ()
    "Return window label of selected window."
    (when-let ((label (window-parameter nil 'ace-window-path)))
      (substring-no-properties label)))

  (defvar koek-ml/ace
    '(:eval
      (when (bound-and-true-p ace-window-mode)
        (when-let ((label (koek-ml/get-window-label)))
          `(,(moody-ribbon (propertize label 'face 'aw-mode-line-face) nil 'up)
            koek-ml/separator))))
    "Mode line construct for ace-window.")
  (put 'koek-ml/ace 'risky-local-variable t)

  ;;;; ediff

  (defvar-local koek-ml/variant nil
    "Ediff variant.")

  (defvar koek-ml/ediff
    '(:eval
      (when (and koek-ml/variant (not (bound-and-true-p ace-window-mode)))
        `(,(let ((label (plist-get koek-ml/variant :label))
                 (state (plist-get koek-ml/variant :state)))
             (moody-ribbon (concat (propertize label 'face 'koek-ml/variant)
                                   (when state " ")
                                   state)
                           nil 'up))
          koek-ml/separator)))
    "Mode line construct for ediff.")
  (put 'koek-ml/ediff 'risky-local-variable t)

  ;;;; Recursive edit depth

  (defvar koek-ml/depth
    '(:eval
      (let ((depth (- (recursion-depth) (minibuffer-depth))))
        (when (and (> depth 0) (moody-window-active-p))
          `(,(moody-ribbon (format "[%d]" depth) nil 'up)
            koek-ml/separator))))
    "Mode line construct for recursive edit depth.")
  (put 'koek-ml/depth 'risky-local-variable t)

  ;;;; exwm workspaces

  (defvar exwm-workspace--workareas)
  (defvar exwm-workspace-current-index)

  (defun koek-ml/get-exwm-workspaces ()
    "Return workspaces of selected monitor."
    (thread-last (number-sequence 0 (1- (length exwm-workspace--workareas)))
      (seq-group-by (lambda (n)
                      (nth n exwm-workspace--workareas)))
      (mapcar #'cdr)
      (seq-find (lambda (ns)
                  (memq exwm-workspace-current-index ns)))
      (mapcar (lambda (n)
                (list :n n :label (or (koek-subr/arabic-to-roman n) "N"))))))

  (defvar koek-ml/exwm-workspaces
    '(:eval
      (when (and (featurep 'exwm-workspace) (moody-window-active-p))
        (let ((workspaces (koek-ml/get-exwm-workspaces)))
          (when (length> workspaces 1)
            `(,(moody-ribbon
                (mapconcat
                 (lambda (workspace)
                   (let ((face (if (= (plist-get workspace :n)
                                      exwm-workspace-current-index)
                                   'koek-ml/selected-workspace
                                 'koek-ml/unselected-workspace)))
                     (propertize (plist-get workspace :label) 'face face)))
                 workspaces " ")
                nil 'up)
              koek-ml/separator)))))
    "Mode line construct for exwm workspaces.")
  (put 'koek-ml/exwm-workspaces 'risky-local-variable t)

  ;;;; Identification

  (defvar koek-ml/id
    '(:eval
      (let ((prefix (when (and (featurep 'project)
                               (derived-mode-p 'prog-mode 'conf-mode))
                      (koek-proj/get-name))))
        (moody-tab
         (concat
          (when prefix (koek-subr/elide prefix 16))
          (when prefix "/")
          (propertize
           (koek-subr/elide (buffer-name) 32) 'face 'mode-line-buffer-id)))))
    "Mode line construct for identification.")
  (put 'koek-ml/id 'risky-local-variable t)

  ;;;; State

  (defvar koek-ml/state '(" " "%*%+")
    "Mode line construct for state.")

  ;;;; keycast

  (defvar keycast-mode-line)

  (defvar koek-ml/keycast
    '(:eval
      (when (bound-and-true-p keycast-mode)
        keycast-mode-line))
    "Mode line construct for keycast.")
  (put 'koek-ml/keycast 'risky-local-variable t)

  ;;;; Position

  (defvar koek-ml/position
    '(:eval
      (unless (derived-mode-p 'pdf-view-mode)
        `("" koek-ml/large-separator
          ,(when (buffer-narrowed-p)
             (list (moody-ribbon "Narrowed" nil 'up) " "))
          "%p" " " "%l,%c")))
    "Mode line construct for position.")
  (put 'koek-ml/position 'risky-local-variable t)

  ;;;; pdf-tools

  (declare-function pdf-cache-number-of-pages "ext:pdf-cache")

  (defvar koek-ml/pdf
    '(:eval
      (when (derived-mode-p 'pdf-view-mode)
        `("" koek-ml/large-separator
          ,(format "%d/%d" (pdf-view-current-page) (pdf-cache-number-of-pages)))))
    "Mode line construct for pdf-tools.")
  (put 'koek-ml/pdf 'risky-local-variable t)

  ;;;; exwm input

  (defvar exwm--input-mode)

  (defun koek-ml/prevent-update-exwm-input (f &rest args)
    "Prevent exwm from altering mode line process.
  Intended as advice around `exwm-input--update-mode-line'."
    (let ((status mode-line-process))
      (apply f args)
      (setq mode-line-process status)
      (force-mode-line-update)))

  (defvar koek-ml/exwm-input
    '(:eval
      (when (and (featurep 'exwm-core) (eq exwm--input-mode 'char-mode)
                 (moody-window-active-p))
        `("" koek-ml/separator
          ,(moody-ribbon "Char" nil 'up))))
    "Mode line construct for exwm input.")
  (put 'koek-ml/exwm-input 'risky-local-variable t)

  ;;;; Input

  (defvar koek-ml/input
    '(:eval
      (when (and current-input-method (moody-window-active-p))
        `("" koek-ml/separator
          ,(moody-ribbon current-input-method-title nil 'up))))
    "Mode line construct for input.")
  (put 'koek-ml/input 'risky-local-variable t)

  ;;;; flymake

  (declare-function flymake--lookup-type-property "flymake")
  (declare-function flymake-diagnostic-type "flymake")
  (declare-function flymake-diagnostics "flymake")
  (declare-function flymake-disabled-backends "flymake")
  (declare-function flymake-reporting-backends "flymake")
  (declare-function flymake-running-backends "flymake")

  (defvar koek-ml/flymake-levels '(:error :warning :note))

  (defvar koek-ml/checker-names
    '((eglot-flymake-backend      . "LSP")
      (elisp-flymake-byte-compile . "El")
      (elisp-flymake-checkdoc     . "CDoc")
      (flymake-kondor-backend     . "Kondo"))
    "Alist of checker symbol to checker name pairs.")

  (defun koek-ml/get-flymake-state ()
    "Return state of flymake.
  State is the symbol running (some checkers running),
  finished (all checkers finished running), disabled (all
  compatible checkers disabled) or no-checker (no compatible
  checkers)."
    (let* ((enabled (flymake-running-backends))
           (finished (flymake-reporting-backends))
           (running (seq-difference enabled finished))
           (disabled (flymake-disabled-backends)))
      (cond
       (running
        'running)
       (finished
        'finished)
       (disabled
        'disabled)
       (t
        'no-checker))))

  (defun koek-ml/state-to-description (state)
    "Convert flymake state STATE to a description.
  STATE is a symbol, a flymake state."
    (let ((words (split-string (symbol-name state) "-")))
      (string-join (cons (capitalize (car words)) (cdr words)) " ")))

  (defun koek-ml/get-flymake-n-diags ()
    "Return number of diagnoses per level."
    (thread-last (flymake-diagnostics)
      (seq-group-by #'flymake-diagnostic-type)
      (mapcar (pcase-lambda (`(,level . ,diags))
                (cons level (length diags))))))

  (defvar koek-ml/flymake
    '(:eval
      (when (and (bound-and-true-p flymake-mode) (moody-window-active-p))
        `("" koek-ml/separator
          ,(when-let ((name
                       ;; First enabled checker
                       (alist-get (car (last (flymake-running-backends)))
                                  koek-ml/checker-names)))
             (concat name " "))
          ,(pcase (koek-ml/get-flymake-state)
             ((or 'running 'finished)
              (let ((n-diags (koek-ml/get-flymake-n-diags)))
                (mapconcat
                 (lambda (level)
                   (propertize
                    (number-to-string (alist-get level n-diags 0))
                    'face (flymake--lookup-type-property level 'mode-line-face)))
                 koek-ml/flymake-levels ";")))
             (state
              (koek-ml/state-to-description state))))))
    "Mode line construct for flymake.")
  (put 'koek-ml/flymake 'risky-local-variable t)

  ;;;; vc

  (defvar vc-mode)

  (defvar koek-ml/vc
    '(:eval
      (when (and (bound-and-true-p vc-mode) (moody-window-active-p))
        (let ((state (string-trim (substring-no-properties vc-mode))))
          ;; For format, see `vc-default-mode-line-string'
          (string-match
           (rx (group-n 1 (one-or-more (not (any "-:@!?")))) (any "-:@!?")
               (zero-or-one (one-or-more (not ":")) ":")
               (group-n 2 (one-or-more not-newline)))
           state)
          `("" koek-ml/separator
            ,(format "%s %s" (match-string 1 state) (match-string 2 state))))))
    "Mode line construct for version control.")
  (put 'koek-ml/vc 'risky-local-variable t)

  ;;;; Task

  (declare-function org-clock-get-clocked-time "org-clock")
  (declare-function org-clocking-buffer "org")
  (declare-function org-duration-from-minutes "org-duration")

  (defvar koek-ml/task
    '(:eval
      (when (and (featurep 'org) (org-clocking-buffer) (moody-window-active-p))
        `("" koek-ml/separator
          ,(org-duration-from-minutes (org-clock-get-clocked-time)))))
    "Mode line construct for task.")
  (put 'koek-ml/task 'risky-local-variable t)

  ;;;; Modes

  (defvar koek-ml/modes
    '("" koek-ml/separator "(" mode-name mode-line-process minor-mode-alist ")")
    "Mode line construct for modes.")
  (put 'koek-ml/modes 'risky-local-variable t)

  ;;; Presets

  ;;;; Default

  (defvar koek-ml/mode-line-format
    `(,@koek-ml/dummies " "
      koek-ml/eldoc koek-ml/ace koek-ml/ediff
      koek-ml/depth koek-ml/exwm-workspaces
      koek-ml/id koek-ml/state keycast-marker
      koek-ml/position koek-ml/pdf koek-ml/exwm-input koek-ml/input
      koek-ml/flymake koek-ml/vc koek-ml/task koek-ml/modes))

  ;;;; transient

  (defvar koek-ml/transient-format
    '(" "
      (:eval
       (moody-tab
        (propertize (koek-subr/construct-earmuffed-name
                     "transient" mode-line-buffer-identification)
                    'face 'mode-line-buffer-id)))
      koek-ml/large-separator
      koek-ml/modes))
  (put 'koek-ml/transient-format 'risky-local-variable t)

  ;;;; ediff

  (defvar koek-ml/variant-types '(A B C Ancestor)
    "List of variant types.")

  (defun koek-ml/get-variant-state (type)
    "Return state of variant type TYPE for current diff.
  TYPE is a symbol, the type of the variant, see
  `koek-ml/variant-types'."
    (when (ediff-valid-difference-p)
      (let* ((diff
              (let ((diff
                     (if (eq type 'Ancestor)
                         (ediff-get-state-of-merge ediff-current-difference)
                       (ediff-get-state-of-diff ediff-current-difference type))))
                (pcase diff
                  ((or "=diff(A)" "prefer-B") "=A")
                  ((or "=diff(B)" "prefer-A") "=B")
                  ("=diff(C)"                 "=C")
                  ("=diff(A+B)"               "=A+B"))))
             (merge (when (eq type 'C)
                      (ediff-get-state-of-merge ediff-current-difference)))
             (ancestor
              (when (and (eq type 'C)
                         (ediff-get-state-of-ancestor ediff-current-difference)
                     "empty")))
             (state (concat diff
                            (when (and diff merge) ";")
                            merge
                            (when (and (or diff merge) ancestor) ";")
                            ancestor)))
        (unless (string-empty-p state)
          state))))

  (defvar koek-ml/diff
    '(:eval
      `("" koek-ml/large-separator
        ,(let ((diff-n (1+ ediff-current-difference))
               (n-diffs ediff-number-of-differences))
           (cond
            ((< diff-n 1)
             (format "Begin -/%d" n-diffs))
            ((> diff-n n-diffs)
             (format "End -/%d" n-diffs))
            (t
             (format "%d/%d" diff-n n-diffs))))))
    "Mode line construct for ediff diff.")
  (put 'koek-ml/diff 'risky-local-variable t)

  (defun koek-ml/update-ediff ()
    "Update mode line of control buffer.
  Intended as advice overriding `ediff-refresh-mode-lines'."
    (setq mode-line-format
          `(,@koek-ml/dummies " "
            koek-ml/eldoc koek-ml/ace
            koek-ml/depth koek-ml/exwm-workspaces
            koek-ml/id koek-ml/keycast
            koek-ml/diff koek-ml/task koek-ml/modes))
    (force-mode-line-update)
    (dolist (type koek-ml/variant-types)
      (when-let ((buffer (ediff-get-buffer type)))
        (let ((state (koek-ml/get-variant-state type)))
          (with-current-buffer buffer
            (setq koek-ml/variant
                  (list :label (if (eq type 'Ancestor) "Anc" (symbol-name type))
                        :state state))
            (force-mode-line-update))))))

  (defun koek-ml/cleanup-variants ()
    "Cleanup variants."
    (dolist (type koek-ml/variant-types)
      (when-let ((buffer (ediff-get-buffer type)))
        (with-current-buffer buffer
          (kill-local-variable 'koek-ml/variant)
          (force-mode-line-update)))))

  ;;;; calendar

  (defvar calendar-buffer)
  (declare-function calendar-current-date "calendar")
  (declare-function calendar-date-string "calendar")
  (declare-function calendar-set-mode-line "calendar")

  (defun koek-ml/setup-calendar (description)
    "Setup mode line of calendar buffer.
  Intended as advice overriding `calendar-set-mode-line'."
    (let ((normalized (koek-ml/strip-percent-constructs description)))
      (setq mode-line-format
            `(,@koek-ml/dummies " "
              koek-ml/eldoc koek-ml/ace
              koek-ml/depth koek-ml/exwm-workspaces
              koek-ml/id koek-ml/keycast
              ("" koek-ml/large-separator ,normalized)
              koek-ml/task koek-ml/modes)))
    (force-mode-line-update))

  (defun koek-ml/update-calendar ()
    "Update mode line of calendar buffer.
  Intended as advice overriding `calendar-update-mode-line'."
    ;; Calendar buffer isn't guaranteed to exist or be current
    (when-let ((buffer (get-buffer calendar-buffer)))
      (with-current-buffer buffer
        (calendar-set-mode-line
         (calendar-date-string (calendar-current-date)
                               'abbreviate 'no-dayname)))))

  ;;; Minor mode

  (defvar koek-ml/old-mode-line-format nil)

  ;;;###autoload
  (define-minor-mode koek-ml-mode
    "Custom mode line."
    :global t
    (if koek-ml-mode
        (progn
          (let ((format (default-value 'mode-line-format)))
            (unless (eq format koek-ml/mode-line-format)
              (setq koek-ml/old-mode-line-format format)))
          (setq-default mode-line-format koek-ml/mode-line-format)
          (advice-add 'ace-window-display-mode :around #'koek-ml/prevent-setup-ace)
          (advice-add 'exwm-input--update-mode-line :around #'koek-ml/prevent-update-exwm-input)
          (advice-add 'ediff-refresh-mode-lines :override #'koek-ml/update-ediff)
          (add-hook 'ediff-cleanup-hook #'koek-ml/cleanup-variants)
          (advice-add 'calendar-set-mode-line :override #'koek-ml/setup-calendar)
          (advice-add 'calendar-update-mode-line :override #'koek-ml/update-calendar))
      (setq-default mode-line-format koek-ml/old-mode-line-format)
      (setq koek-ml/old-mode-line-format nil)
      (advice-remove 'ace-window-display-mode #'koek-ml/prevent-setup-ace)
      (advice-remove 'exwm-input--update-mode-line #'koek-ml/prevent-update-exwm-input)
      (advice-remove 'ediff-refresh-mode-lines #'koek-ml/update-ediff)
      (remove-hook 'ediff-cleanup-hook #'koek-ml/cleanup-variants)
      (advice-remove 'calendar-set-mode-line #'koek-ml/setup-calendar)
      (advice-remove 'calendar-update-mode-line #'koek-ml/update-calendar))
    (force-mode-line-update 'all))

  (provide 'koek-ml)

  ;;; koek-ml ends here
#+END_SRC

*** moody - Tabs and ribbons
[[https://github.com/tarsius/moody][moody (GitHub)]]

#+BEGIN_SRC emacs-lisp :noweb-ref moody-config :tangle no
  (use-package moody
    :straight t
    :defer t
    :config
    (setq x-underline-at-descent-line t)
    (setq moody-mode-line-height 24))
#+END_SRC

** Ellipsis string
#+BEGIN_SRC emacs-lisp :tangle stow/emacs/.config/emacs/early-init.el
  (setq truncate-string-ellipsis "~")
#+END_SRC

* Personal

** Locale
Configure locale.

#+BEGIN_SRC emacs-lisp
  (use-package calendar
    :defer t
    :config
    ;; Prefer calling calendar-set-date-style to setting
    ;; calendar-date-style. Calling calendar-set-date-style sets related
    ;; variables.
    (calendar-set-date-style 'european)
    (setq calendar-week-start-day 1))     ; Monday

  ;; Dependency of org-caldav
  (use-package ox-icalendar
    :defer t
    :config
    (setq org-icalendar-timezone "Europe/Brussels"))
#+END_SRC

** Secrets
Retrieve secrets from [[https://freedesktop.org/wiki/Specifications/secret-storage-spec/][Secret Service]].

#+BEGIN_SRC emacs-lisp
  (use-package auth-source
    :defer t
    :config
    (setq auth-sources '("secrets:Login")))
#+END_SRC

** Well known directories
Define well known directories.

#+BEGIN_SRC emacs-lisp
  (defun koek/get-user-dir (name)
    "Return user directory NAME.
  NAME is a string, the name of the user directory."
    (when-let ((file-name (getenv name)))
      (file-name-as-directory file-name)))

  (defvar koek/home-dir "~/"
    "File name to home directory.")

  (defvar koek/documents-dir
    (or (koek/get-user-dir "XDG_DOCUMENTS_DIR") koek/home-dir)
    "File name to documents directory.")

  (defvar koek/download-dir
    (or (koek/get-user-dir "XDG_DOWNLOAD_DIR") koek/home-dir)
    "File name to download directory.")

  (defvar koek/music-dir
    (or (koek/get-user-dir "XDG_MUSIC_DIR") koek/home-dir)
    "File name to music directory.")

  (defvar koek/calendars-dir
    (or (koek/get-user-dir "KOEK_CALENDARS_DIR") koek/documents-dir)
    "File name to calendars directory.")

  (defvar koek/contacts-dir
    (or (koek/get-user-dir "KOEK_CONTACTS_DIR") koek/documents-dir)
    "File name to contacts directory.")

  (defvar koek/news-dir
    (or (koek/get-user-dir "KOEK_NEWS_DIR") koek/documents-dir)
    "File name to news directory.")

  (defvar koek/notes-dir
    (or (koek/get-user-dir "KOEK_NOTES_DIR") koek/documents-dir)
    "File name to notes directory.")

  (defvar koek/projects-dir
    (or (koek/get-user-dir "KOEK_PROJECTS_DIR") koek/home-dir)
    "File name to projects directory.")
#+END_SRC

** Monitors
Configure monitors and monitor layouts.

#+BEGIN_SRC emacs-lisp
  (use-package exar
    :koek t
    :when (koek-wm/exwm-session-p)
    :config
    (let ((icc-dir (expand-file-name "icc/" (xdg-data-home))))
      (setq exar-monitors
            `(:laptop (:edid "0x06af3d13000000002617" :name "Laptop"
                       :color ,(expand-file-name "laptop.icc" icc-dir))
              :desk   (:edid "0x35491800000000000013" :name "Desk"
                       :color ,(expand-file-name "desk.icc" icc-dir))))
      (setq exar-layouts
            '((:name "Desk (primary) and laptop (left)"
               :monitors
               (:desk (:top 0 :left 1920 :width 1920 :height 1080)
                :laptop (:top 0 :left 0 :width 1920 :height 1080 :workspaces (1 6))))
              (:name "Desk"
               :monitors (:desk (:top 0 :left 0 :width 1920 :height 1080)))
              (:name "Laptop"
               :monitors (:laptop (:top 0 :left 0 :width 1920 :height 1080))))))
    (exar-enable)
    (exwm-enable))
#+END_SRC

** Agendas
Org files in ~koek/documents-dir~, ~koek/calendars-dir~ and child
directories of ~koek/projects-dir~, are agenda files. Configure agendas.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :preface
    (defun koek/get-agenda-dirs ()
      "Return agenda directories."
      (append (list koek/documents-dir koek/calendars-dir)
              (koek-subr/get-child-dirs koek/projects-dir 'full)))

    (defun koek/get-agenda-files ()
      "Return agenda files."
      (thread-last (koek/get-agenda-dirs)
        (seq-mapcat (lambda (file-name)
                      (directory-files file-name 'full (rx ".org" line-end))))
        (seq-remove #'koek-subr/lock-file-p)
        seq-uniq))

    (define-advice org-agenda-files
        (:before (&rest _args) koek/update-agenda-files)
      (setq org-agenda-files (koek/get-agenda-files)))
    :config
    (setq org-directory koek/documents-dir))
#+END_SRC

*** Holidays
Configure holidays.

#+BEGIN_SRC emacs-lisp
  (use-package holidays
    :defer t
    :config
    (require 'belgian-holidays)

    (setq calendar-holidays
          (append holiday-belgian-holidays holiday-solar-holidays)))
#+END_SRC

*** Calendars :setup:
To generate the app password, follow [[https://www.fastmail.com/help/clients/apppassword.html][App Passwords (FastMail)]]. Name it
/Emacs calendars/ and give it access to CalDAV. Then, to store it
securely, run:

#+BEGIN_SRC sh
  secret-tool store --label="Emacs calendars personal" host "caldav.fastmail.com:443" port "https" user "nicolas@dejaeghe.re"
#+END_SRC

For more information, see [[info:auth#Help for users][Help for users (info)]], specifically the
explanation of URL authentication.

Configure calendars. For calendar details, login to [[https://www.fastmail.com/][FastMail]], click
/Settings/, /Calendars/. Then, for the desired calendar, click /Export/.

#+BEGIN_SRC emacs-lisp
  (use-package org-caldav
    :defer t
    :config
    ;; Local copy
    ;; Store sync state with calendars, simplifying backup
    (setq org-caldav-save-directory koek/calendars-dir)
    (setq org-caldav-inbox (expand-file-name "Afspraken.org" koek/calendars-dir))
    (setq org-caldav-files nil)

    ;; Remote copy
    (setq org-caldav-url
          "https://caldav.fastmail.com/dav/calendars/user/nicolas@dejaeghe.re")
    (setq org-caldav-calendar-id "260b63a1-58cd-4cf2-bf6a-a2e5acfcf995"))
#+END_SRC

** Capture templates :setup:
#+BEGIN_SRC js :exports none
  ((args) => {
      "use strict";
      const toQuery = (args) => Object.entries(args).map(([key, value]) => `${key}=${value}`).join("&");
      const {protocol, ...rest} = Object.keys(args).reduce((acc, key) => {
          acc[key] = encodeURIComponent(args[key]);
          return acc;
      }, {});
      location.href = `org-protocol://${protocol}?${toQuery(rest)}`;
  })({protocol: "capture", template: "t", url: location.href, title: document.title, body: window.getSelection()});
#+END_SRC

To capture /Book/ from the browser, create a [[https://en.wikipedia.org/wiki/Bookmarklet][bookmarklet]]:

#+CAPTION: Boek (book)
#+BEGIN_SRC js
  javascript:((args) => {"use strict"; const toQuery = (args) => Object.entries(args).map(([key, value]) => `${key}=${value}`).join("&"); const {protocol, ...rest} = Object.keys(args).reduce((acc, key) => {acc[key] = encodeURIComponent(args[key]); return acc;}, {}); location.href = `org-protocol://${protocol}?${toQuery(rest)}`;})({protocol: "capture", template: "b", url: location.href, body: window.getSelection()});
#+END_SRC

In [[https://www.mozilla.org/en-US/firefox/new/][Firefox]], to show bookmarklets to the left of the menu ([[https://en.wikipedia.org/wiki/Hamburger_button][hamburger]]):

1. Click the menu, Customize
2. In the footer, click Toolbars and show the bookmarks toolbar
3. Move the bookmarks toolbar items placeholder to the toolbar
4. In the footer, click Toolbars and hide the bookmarks toolbar

Bookmarklets placed into the Bookmarks Toolbar group are shown to the
left of the menu.

Configure org capture templates.

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :defer t
    :config
    (setq org-capture-templates
          `(("t" "Task" entry (file+olp "Inbox.org" "Taken")
             "* TODO %?"
             :empty-lines 1)
            ("r" "Reply" entry (file+olp "Inbox.org" "Taken")
             ,(string-join '("* TODO Beantwoord %:subject"
                             "DEADLINE: %^t"
                             ""
                             "%a"
                             ""
                             "%?")
                           "\n")
             :empty-lines 1)
            ("a" "Appointment" entry (file "Kalenders/Afspraken.org")
             ,(string-join '("* %^{Name}"
                             "%^T"
                             "%^{LOCATION}p" ; Inserted after heading
                             "%?")
                           "\n")
             :empty-lines 1)
            ("b" "Book" item (file+olp "Inbox.org" "Media tips" "Boeken")
             "- [[%:link][%(koek-subr/normalize-title \"%i\")]]%?")))
    (setq org-capture-templates-contexts '(("r" ((in-mode . "mu4e-view-mode"))))))
#+END_SRC

** Downloads
Configure downloads.

#+BEGIN_SRC emacs-lisp
  (use-package eww
    :defer t
    :config
    (setq eww-download-directory koek/download-dir))
#+END_SRC

** E-mail accounts
Configure e-mail accounts. For server details, see [[file:dotfiles.org::*isync][isync]], specifically
the instructions on storing passwords.

#+BEGIN_SRC emacs-lisp
  (use-package mu4e-context
    :defer t
    :config
    (setq mu4e-contexts
          (list (make-mu4e-context
                 :name "Personal"
                 :match-func
                 (lambda (message)
                   (when message
                     (string-prefix-p "/Personal/"
                                      (mu4e-message-field message :maildir))))
                 :vars
                 `((smtpmail-smtp-server   . "smtp.fastmail.com")
                   (smtpmail-smtp-service  . 465)
                   (smtpmail-stream-type   . ssl)
                   ;; refile-folder, drafts-folder, sent-folder and
                   ;; trash-folder are directory file names, i.e., no
                   ;; trailing /
                   (mu4e-refile-folder     . "/Personal/Archive")
                   (mu4e-drafts-folder     . "/Personal/Drafts")
                   (mu4e-sent-folder       . "/Personal/Sent")
                   (mu4e-trash-folder      . "/Personal/Trash")
                   (mu4e-compose-signature . ,user-full-name))))))

  (use-package mu4e-bookmarks
    :defer t
    :config
    (setq mu4e-bookmarks
          '((:name "Personal INBOX"
             :query "maildir:/Personal/INBOX"
             :key ?p)
            (:name "Applied Artificial Intelligence"
             :query "maildir:/Personal/Opleidingen/AAI"
             :key ?a)
            (:name "Verbouwing"
             :query "maildir:/Personal/Verbouwing"
             :key ?v)
            (:name "emacs-devel"
             :query "maildir:\"/Personal/Mailing Lists/emacs-devel\""
             :key ?e)
            (:name "Unread"
             :query "flag:unread not maildir:\"/Personal/Mailing Lists/\" not maildir:/Personal/Spam"
             :key ?u)
            (:name "All unread"
             :query "flag:unread"
             :key ?U))))
#+END_SRC

** Contacts
Configure contacts.

#+BEGIN_SRC emacs-lisp
  (use-package bbdb-vcard
    :defer t
    :config
    (setq bbdb-vcard-default-dir koek/contacts-dir))
#+END_SRC

** News
Configure news.

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :defer t
    :config
    (setq elfeed-db-directory koek/news-dir)

    (use-package recentf
      :defer t
      :config
      (push (rx line-start (literal elfeed-db-directory)) recentf-exclude))

    (koek-feed/init-feeds))
#+END_SRC

** Media
Configure media.

#+BEGIN_SRC emacs-lisp
  (use-package bongo
    :defer t
    :config
    (setq bongo-default-directory koek/music-dir))
#+END_SRC

** Initial buffer
Show agenda as initial buffer.

#+BEGIN_SRC emacs-lisp
  (defun koek/get-initial-buffer ()
    "Return initial buffer."
    (let ((layout (current-window-configuration)))
      (org-agenda-list)
      (set-window-configuration layout))
    org-agenda-buffer)

  (setq initial-buffer-choice #'koek/get-initial-buffer)
#+END_SRC

* Footer
#+BEGIN_SRC emacs-lisp
  ;;; init.el ends here
#+END_SRC
